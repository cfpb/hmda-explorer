/*!                                      
            /$$$$$$          /$$        
           /$$__  $$        | $$        
  /$$$$$$$| $$  \__//$$$$$$ | $$$$$$$  
 /$$_____/| $$$$   /$$__  $$| $$__  $$  
| $$      | $$_/  | $$  \ $$| $$  \ $$
| $$      | $$    | $$  | $$| $$  | $$  
|  $$$$$$$| $$    | $$$$$$$/| $$$$$$$/  
 \_______/|__/    | $$____/ |_______/  
                  | $$                  
                  | $$                  
                  |__/                  

* public-data-platform-static - v0.15.2 - 2013-09-21
* http://consumerfinance.gov
* Copyright (c) 2013 Consumer Financial Protection Bureau; Licensed Public, Domain */

 /* ===========================================================
 * bootstrap-tooltip.js v2.3.2
 * http://twitter.github.com/bootstrap/javascript.html#tooltips
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ===========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */

/*!
 * jQuery JavaScript Library v1.10.2
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-07-03T13:48Z
 */

/**
 * @license
 * Lo-Dash 1.3.1 <http://lodash.com/>
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.4.4 <http://underscorejs.org/>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud Inc.
 * Available under MIT license <http://lodash.com/license>
 */

/**
Copyright (c) Nicolas Gallagher and Jonathan Neal

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


Copyright (c) 2012-2013 Kit Cambridge.
http://kitcambridge.be/

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Chosen
- by Patrick Filler for [Harvest](http://getharvest.com)
- Copyright (c) 2011-2013 by Harvest

Available for use under the [MIT License](http://en.wikipedia.org/wiki/MIT_License)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

 */(function(exports) {
    "use strict";
    function EventEmitter() {}
    var proto = EventEmitter.prototype, nativeIndexOf = Array.prototype.indexOf ? true : false;
    function indexOfListener(listener, listeners) {
        if (nativeIndexOf) {
            return listeners.indexOf(listener);
        }
        var i = listeners.length;
        while (i--) {
            if (listeners[i] === listener) {
                return i;
            }
        }
        return -1;
    }
    proto._getEvents = function() {
        return this._events || (this._events = {});
    };
    proto.getListeners = function(evt) {
        var events = this._getEvents(), response, key;
        if (typeof evt === "object") {
            response = {};
            for (key in events) {
                if (events.hasOwnProperty(key) && evt.test(key)) {
                    response[key] = events[key];
                }
            }
        } else {
            response = events[evt] || (events[evt] = []);
        }
        return response;
    };
    proto.getListenersAsObject = function(evt) {
        var listeners = this.getListeners(evt), response;
        if (listeners instanceof Array) {
            response = {};
            response[evt] = listeners;
        }
        return response || listeners;
    };
    proto.addListener = function(evt, listener) {
        var listeners = this.getListenersAsObject(evt), key;
        for (key in listeners) {
            if (listeners.hasOwnProperty(key) && indexOfListener(listener, listeners[key]) === -1) {
                listeners[key].push(listener);
            }
        }
        return this;
    };
    proto.on = proto.addListener;
    proto.defineEvent = function(evt) {
        this.getListeners(evt);
        return this;
    };
    proto.defineEvents = function(evts) {
        for (var i = 0; i < evts.length; i += 1) {
            this.defineEvent(evts[i]);
        }
        return this;
    };
    proto.removeListener = function(evt, listener) {
        var listeners = this.getListenersAsObject(evt), index, key;
        for (key in listeners) {
            if (listeners.hasOwnProperty(key)) {
                index = indexOfListener(listener, listeners[key]);
                if (index !== -1) {
                    listeners[key].splice(index, 1);
                }
            }
        }
        return this;
    };
    proto.off = proto.removeListener;
    proto.addListeners = function(evt, listeners) {
        return this.manipulateListeners(false, evt, listeners);
    };
    proto.removeListeners = function(evt, listeners) {
        return this.manipulateListeners(true, evt, listeners);
    };
    proto.manipulateListeners = function(remove, evt, listeners) {
        var i, value, single = remove ? this.removeListener : this.addListener, multiple = remove ? this.removeListeners : this.addListeners;
        if (typeof evt === "object" && !(evt instanceof RegExp)) {
            for (i in evt) {
                if (evt.hasOwnProperty(i) && (value = evt[i])) {
                    if (typeof value === "function") {
                        single.call(this, i, value);
                    } else {
                        multiple.call(this, i, value);
                    }
                }
            }
        } else {
            i = listeners.length;
            while (i--) {
                single.call(this, evt, listeners[i]);
            }
        }
        return this;
    };
    proto.removeEvent = function(evt) {
        var type = typeof evt, events = this._getEvents(), key;
        if (type === "string") {
            delete events[evt];
        } else if (type === "object") {
            for (key in events) {
                if (events.hasOwnProperty(key) && evt.test(key)) {
                    delete events[key];
                }
            }
        } else {
            delete this._events;
        }
        return this;
    };
    proto.emitEvent = function(evt, args) {
        var listeners = this.getListenersAsObject(evt), i, key, response;
        for (key in listeners) {
            if (listeners.hasOwnProperty(key)) {
                i = listeners[key].length;
                while (i--) {
                    response = args ? listeners[key][i].apply(null, args) : listeners[key][i]();
                    if (response === true) {
                        this.removeListener(evt, listeners[key][i]);
                    }
                }
            }
        }
        return this;
    };
    proto.trigger = proto.emitEvent;
    proto.emit = function(evt) {
        var args = Array.prototype.slice.call(arguments, 1);
        return this.emitEvent(evt, args);
    };
    if (typeof define === "function" && define.amd) {
        define(function() {
            return EventEmitter;
        });
    } else {
        exports.EventEmitter = EventEmitter;
    }
})(this);

(function($) {
    var methods = {
        init: function(options, config) {
            var settings = {
                enableCheckbox: false,
                enableMenu: false
            };
            if (arguments.length > 1) {
                $.extend(settings, options);
            } else {
                config = options;
            }
            return this.each(function() {
                var $this = $(this), data = $this.data();
                if ($.isEmptyObject(data)) {
                    $this.data({
                        container: $this,
                        options: settings
                    });
                }
                return createTable(data, config);
            });
        },
        destroy: function() {
            return this.each(function() {
                $(this).removeData();
            });
        }
    };
    $.fn.TidyTable = function(method) {
        if (methods[method]) {
            return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
        } else if (typeof method === "object" || !method) {
            return methods.init.apply(this, arguments);
        } else {
            $.error("Method " + method + " does not exist on jQuery.TidyTable");
        }
    };
    function createTable(data, config, num, order) {
        var table = $("<table></table>").addClass("tidy_table");
        table.mousedown(function() {
            return false;
        });
        table.mouseover(function() {
            return false;
        });
        var thead = $("<thead></thead>"), tbody = $("<tbody></tbody>"), row = $("<tr></tr>");
        var cols = config.columnTitles;
        for (var i = 0; i < cols.length; i++) {
            var title = cols[i];
            var col = $("<th></th>").append(title).attr("title", title);
            row.append(col);
            var col_class;
            if (order == "desc" || !order) {
                col_class = "sort_desc";
                col.order = "asc";
            } else {
                col_class = "sort_asc";
                col.order = "desc";
            }
            if (num == i) {
                col.addClass(col_class);
            }
            col.bind("click", {
                col_number: i,
                sort_order: col.order
            }, function(event) {
                sortByColumn(data, config, event.data.col_number, event.data.sort_order);
            });
        }
        thead.append(row);
        var vals = config.columnValues;
        for (var j = 0; j < vals.length; j++) {
            var row = $("<tr></tr>");
            for (var k = 0; k < vals[j].length; k++) {
                var val = vals[j][k];
                var col = $("<td></td>").append(val).attr("title", val);
                row.append(col);
                if (config.postProcess && typeof config.postProcess.column === "function") {
                    config.postProcess.column(col);
                }
            }
            tbody.append(row);
        }
        table.append(thead);
        table.append(tbody);
        if (data.options && data.options.enableCheckbox) {
            var rows = table.find("tr");
            rows.each(function(index) {
                row = $(this);
                var input = $("<input></input>").attr("type", "checkbox");
                var col;
                if (index == 0) {
                    col = $("<th></th>");
                    input.click(function() {
                        toggleSelRows(rows);
                    });
                } else {
                    col = $("<td></td>");
                    input.bind("click", {
                        box_number: index
                    }, function(event) {
                        toggleSelRows(rows, event.data.box_number);
                    });
                }
                col.append(input);
                row.prepend(col);
            });
        }
        if (config.postProcess && typeof config.postProcess.table === "function") {
            config.postProcess.table(table);
        }
        var $this = data.container, block = $this.children("table.tidy_table");
        if (block[0]) {
            block.replaceWith(table);
        } else {
            if (data.options && data.options.enableMenu) {
                $this.append(createMenu($this, config, "menu1"));
            }
            $this.append(table);
            if (data.options && data.options.enableMenu) {
                $this.append(createMenu($this, config, "menu2"));
            }
        }
        return table;
    }
    function createMenu(table, config, name) {
        var opts = config.menuOptions;
        var select = $("<select></select>").addClass("menu_options " + name).change(function() {
            var $this = $(this);
            var callback = opts[$this.val()][1]["callback"];
            if (typeof callback === "function") {
                callback(getCheckedAsObj(table));
            }
            $this.val(0);
        });
        $.each(opts, function(index) {
            var option = $("<option>" + opts[index][0] + "</option>").attr("value", index);
            select.append(option);
        });
        if (config.postProcess && typeof config.postProcess.menu === "function") {
            config.postProcess.menu(select);
        }
        return select;
    }
    function getCheckedAsObj(table) {
        var rows = table.find("tbody > tr"), objs = [];
        for (var i = 0; i < rows.length; i++) {
            var cols = rows[i].childNodes;
            if (cols[0].firstChild.checked) {
                var row = [];
                for (var j = 1; j < cols.length; j++) {
                    row[j - 1] = cols[j].textContent;
                }
                objs.push(row);
            }
        }
        return objs;
    }
    function toggleSelRows(rows, num) {
        var checked = null;
        rows.each(function(index) {
            var row = $(this);
            var input = row.children().find("input");
            if (num == null) {
                if (index == 0) {
                    checked = input.is(":checked") ? true : false;
                    return;
                }
                if (checked) {
                    row.removeClass("check_off").addClass("check_on");
                    input.attr("checked", true);
                } else {
                    row.removeClass("check_on").addClass("check_off");
                    input.attr("checked", false);
                }
            } else {
                if (input.is(":checked")) {
                    row.removeClass("check_off").addClass("check_on");
                    input.attr("checked", true);
                } else {
                    row.removeClass("check_on").addClass("check_off");
                    input.attr("checked", false);
                }
            }
        });
    }
    function sortByColumn(data, config, num, order) {
        var reverse = order == "desc" ? -1 : 1;
        config.columnValues.sort(function(a, b) {
            var str1 = String(a[num]).replace(/$|%|#/g, ""), str2 = String(b[num]).replace(/$|%|#/g, "");
            if (isNaN(str1)) {
                return [ reverse * cmpAny(str1, str2) ] > [ reverse * cmpAny(str2, str1) ] ? -1 : 1;
            } else {
                return [ reverse * cmpInt(str1, str2) ];
            }
        });
        createTable(data, config, num, order);
    }
    function cmpAny(a, b) {
        return a > b ? 1 : a < b ? -1 : 0;
    }
    function cmpInt(a, b) {
        return b - a;
    }
})(jQuery);

(function($, undefined) {
    var uuid = 0, runiqueId = /^ui-id-\d+$/;
    $.ui = $.ui || {};
    $.extend($.ui, {
        version: "1.10.3",
        keyCode: {
            BACKSPACE: 8,
            COMMA: 188,
            DELETE: 46,
            DOWN: 40,
            END: 35,
            ENTER: 13,
            ESCAPE: 27,
            HOME: 36,
            LEFT: 37,
            NUMPAD_ADD: 107,
            NUMPAD_DECIMAL: 110,
            NUMPAD_DIVIDE: 111,
            NUMPAD_ENTER: 108,
            NUMPAD_MULTIPLY: 106,
            NUMPAD_SUBTRACT: 109,
            PAGE_DOWN: 34,
            PAGE_UP: 33,
            PERIOD: 190,
            RIGHT: 39,
            SPACE: 32,
            TAB: 9,
            UP: 38
        }
    });
    $.fn.extend({
        focus: function(orig) {
            return function(delay, fn) {
                return typeof delay === "number" ? this.each(function() {
                    var elem = this;
                    setTimeout(function() {
                        $(elem).focus();
                        if (fn) {
                            fn.call(elem);
                        }
                    }, delay);
                }) : orig.apply(this, arguments);
            };
        }($.fn.focus),
        scrollParent: function() {
            var scrollParent;
            if ($.ui.ie && /(static|relative)/.test(this.css("position")) || /absolute/.test(this.css("position"))) {
                scrollParent = this.parents().filter(function() {
                    return /(relative|absolute|fixed)/.test($.css(this, "position")) && /(auto|scroll)/.test($.css(this, "overflow") + $.css(this, "overflow-y") + $.css(this, "overflow-x"));
                }).eq(0);
            } else {
                scrollParent = this.parents().filter(function() {
                    return /(auto|scroll)/.test($.css(this, "overflow") + $.css(this, "overflow-y") + $.css(this, "overflow-x"));
                }).eq(0);
            }
            return /fixed/.test(this.css("position")) || !scrollParent.length ? $(document) : scrollParent;
        },
        zIndex: function(zIndex) {
            if (zIndex !== undefined) {
                return this.css("zIndex", zIndex);
            }
            if (this.length) {
                var elem = $(this[0]), position, value;
                while (elem.length && elem[0] !== document) {
                    position = elem.css("position");
                    if (position === "absolute" || position === "relative" || position === "fixed") {
                        value = parseInt(elem.css("zIndex"), 10);
                        if (!isNaN(value) && value !== 0) {
                            return value;
                        }
                    }
                    elem = elem.parent();
                }
            }
            return 0;
        },
        uniqueId: function() {
            return this.each(function() {
                if (!this.id) {
                    this.id = "ui-id-" + ++uuid;
                }
            });
        },
        removeUniqueId: function() {
            return this.each(function() {
                if (runiqueId.test(this.id)) {
                    $(this).removeAttr("id");
                }
            });
        }
    });
    function focusable(element, isTabIndexNotNaN) {
        var map, mapName, img, nodeName = element.nodeName.toLowerCase();
        if ("area" === nodeName) {
            map = element.parentNode;
            mapName = map.name;
            if (!element.href || !mapName || map.nodeName.toLowerCase() !== "map") {
                return false;
            }
            img = $("img[usemap=#" + mapName + "]")[0];
            return !!img && visible(img);
        }
        return (/input|select|textarea|button|object/.test(nodeName) ? !element.disabled : "a" === nodeName ? element.href || isTabIndexNotNaN : isTabIndexNotNaN) && visible(element);
    }
    function visible(element) {
        return $.expr.filters.visible(element) && !$(element).parents().addBack().filter(function() {
            return $.css(this, "visibility") === "hidden";
        }).length;
    }
    $.extend($.expr[":"], {
        data: $.expr.createPseudo ? $.expr.createPseudo(function(dataName) {
            return function(elem) {
                return !!$.data(elem, dataName);
            };
        }) : function(elem, i, match) {
            return !!$.data(elem, match[3]);
        },
        focusable: function(element) {
            return focusable(element, !isNaN($.attr(element, "tabindex")));
        },
        tabbable: function(element) {
            var tabIndex = $.attr(element, "tabindex"), isTabIndexNaN = isNaN(tabIndex);
            return (isTabIndexNaN || tabIndex >= 0) && focusable(element, !isTabIndexNaN);
        }
    });
    if (!$("<a>").outerWidth(1).jquery) {
        $.each([ "Width", "Height" ], function(i, name) {
            var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ], type = name.toLowerCase(), orig = {
                innerWidth: $.fn.innerWidth,
                innerHeight: $.fn.innerHeight,
                outerWidth: $.fn.outerWidth,
                outerHeight: $.fn.outerHeight
            };
            function reduce(elem, size, border, margin) {
                $.each(side, function() {
                    size -= parseFloat($.css(elem, "padding" + this)) || 0;
                    if (border) {
                        size -= parseFloat($.css(elem, "border" + this + "Width")) || 0;
                    }
                    if (margin) {
                        size -= parseFloat($.css(elem, "margin" + this)) || 0;
                    }
                });
                return size;
            }
            $.fn["inner" + name] = function(size) {
                if (size === undefined) {
                    return orig["inner" + name].call(this);
                }
                return this.each(function() {
                    $(this).css(type, reduce(this, size) + "px");
                });
            };
            $.fn["outer" + name] = function(size, margin) {
                if (typeof size !== "number") {
                    return orig["outer" + name].call(this, size);
                }
                return this.each(function() {
                    $(this).css(type, reduce(this, size, true, margin) + "px");
                });
            };
        });
    }
    if (!$.fn.addBack) {
        $.fn.addBack = function(selector) {
            return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
        };
    }
    if ($("<a>").data("a-b", "a").removeData("a-b").data("a-b")) {
        $.fn.removeData = function(removeData) {
            return function(key) {
                if (arguments.length) {
                    return removeData.call(this, $.camelCase(key));
                } else {
                    return removeData.call(this);
                }
            };
        }($.fn.removeData);
    }
    $.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase());
    $.support.selectstart = "onselectstart" in document.createElement("div");
    $.fn.extend({
        disableSelection: function() {
            return this.bind(($.support.selectstart ? "selectstart" : "mousedown") + ".ui-disableSelection", function(event) {
                event.preventDefault();
            });
        },
        enableSelection: function() {
            return this.unbind(".ui-disableSelection");
        }
    });
    $.extend($.ui, {
        plugin: {
            add: function(module, option, set) {
                var i, proto = $.ui[module].prototype;
                for (i in set) {
                    proto.plugins[i] = proto.plugins[i] || [];
                    proto.plugins[i].push([ option, set[i] ]);
                }
            },
            call: function(instance, name, args) {
                var i, set = instance.plugins[name];
                if (!set || !instance.element[0].parentNode || instance.element[0].parentNode.nodeType === 11) {
                    return;
                }
                for (i = 0; i < set.length; i++) {
                    if (instance.options[set[i][0]]) {
                        set[i][1].apply(instance.element, args);
                    }
                }
            }
        },
        hasScroll: function(el, a) {
            if ($(el).css("overflow") === "hidden") {
                return false;
            }
            var scroll = a && a === "left" ? "scrollLeft" : "scrollTop", has = false;
            if (el[scroll] > 0) {
                return true;
            }
            el[scroll] = 1;
            has = el[scroll] > 0;
            el[scroll] = 0;
            return has;
        }
    });
})(jQuery);

(function($, undefined) {
    var uuid = 0, slice = Array.prototype.slice, _cleanData = $.cleanData;
    $.cleanData = function(elems) {
        for (var i = 0, elem; (elem = elems[i]) != null; i++) {
            try {
                $(elem).triggerHandler("remove");
            } catch (e) {}
        }
        _cleanData(elems);
    };
    $.widget = function(name, base, prototype) {
        var fullName, existingConstructor, constructor, basePrototype, proxiedPrototype = {}, namespace = name.split(".")[0];
        name = name.split(".")[1];
        fullName = namespace + "-" + name;
        if (!prototype) {
            prototype = base;
            base = $.Widget;
        }
        $.expr[":"][fullName.toLowerCase()] = function(elem) {
            return !!$.data(elem, fullName);
        };
        $[namespace] = $[namespace] || {};
        existingConstructor = $[namespace][name];
        constructor = $[namespace][name] = function(options, element) {
            if (!this._createWidget) {
                return new constructor(options, element);
            }
            if (arguments.length) {
                this._createWidget(options, element);
            }
        };
        $.extend(constructor, existingConstructor, {
            version: prototype.version,
            _proto: $.extend({}, prototype),
            _childConstructors: []
        });
        basePrototype = new base();
        basePrototype.options = $.widget.extend({}, basePrototype.options);
        $.each(prototype, function(prop, value) {
            if (!$.isFunction(value)) {
                proxiedPrototype[prop] = value;
                return;
            }
            proxiedPrototype[prop] = function() {
                var _super = function() {
                    return base.prototype[prop].apply(this, arguments);
                }, _superApply = function(args) {
                    return base.prototype[prop].apply(this, args);
                };
                return function() {
                    var __super = this._super, __superApply = this._superApply, returnValue;
                    this._super = _super;
                    this._superApply = _superApply;
                    returnValue = value.apply(this, arguments);
                    this._super = __super;
                    this._superApply = __superApply;
                    return returnValue;
                };
            }();
        });
        constructor.prototype = $.widget.extend(basePrototype, {
            widgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix : name
        }, proxiedPrototype, {
            constructor: constructor,
            namespace: namespace,
            widgetName: name,
            widgetFullName: fullName
        });
        if (existingConstructor) {
            $.each(existingConstructor._childConstructors, function(i, child) {
                var childPrototype = child.prototype;
                $.widget(childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto);
            });
            delete existingConstructor._childConstructors;
        } else {
            base._childConstructors.push(constructor);
        }
        $.widget.bridge(name, constructor);
    };
    $.widget.extend = function(target) {
        var input = slice.call(arguments, 1), inputIndex = 0, inputLength = input.length, key, value;
        for (;inputIndex < inputLength; inputIndex++) {
            for (key in input[inputIndex]) {
                value = input[inputIndex][key];
                if (input[inputIndex].hasOwnProperty(key) && value !== undefined) {
                    if ($.isPlainObject(value)) {
                        target[key] = $.isPlainObject(target[key]) ? $.widget.extend({}, target[key], value) : $.widget.extend({}, value);
                    } else {
                        target[key] = value;
                    }
                }
            }
        }
        return target;
    };
    $.widget.bridge = function(name, object) {
        var fullName = object.prototype.widgetFullName || name;
        $.fn[name] = function(options) {
            var isMethodCall = typeof options === "string", args = slice.call(arguments, 1), returnValue = this;
            options = !isMethodCall && args.length ? $.widget.extend.apply(null, [ options ].concat(args)) : options;
            if (isMethodCall) {
                this.each(function() {
                    var methodValue, instance = $.data(this, fullName);
                    if (!instance) {
                        return $.error("cannot call methods on " + name + " prior to initialization; " + "attempted to call method '" + options + "'");
                    }
                    if (!$.isFunction(instance[options]) || options.charAt(0) === "_") {
                        return $.error("no such method '" + options + "' for " + name + " widget instance");
                    }
                    methodValue = instance[options].apply(instance, args);
                    if (methodValue !== instance && methodValue !== undefined) {
                        returnValue = methodValue && methodValue.jquery ? returnValue.pushStack(methodValue.get()) : methodValue;
                        return false;
                    }
                });
            } else {
                this.each(function() {
                    var instance = $.data(this, fullName);
                    if (instance) {
                        instance.option(options || {})._init();
                    } else {
                        $.data(this, fullName, new object(options, this));
                    }
                });
            }
            return returnValue;
        };
    };
    $.Widget = function() {};
    $.Widget._childConstructors = [];
    $.Widget.prototype = {
        widgetName: "widget",
        widgetEventPrefix: "",
        defaultElement: "<div>",
        options: {
            disabled: false,
            create: null
        },
        _createWidget: function(options, element) {
            element = $(element || this.defaultElement || this)[0];
            this.element = $(element);
            this.uuid = uuid++;
            this.eventNamespace = "." + this.widgetName + this.uuid;
            this.options = $.widget.extend({}, this.options, this._getCreateOptions(), options);
            this.bindings = $();
            this.hoverable = $();
            this.focusable = $();
            if (element !== this) {
                $.data(element, this.widgetFullName, this);
                this._on(true, this.element, {
                    remove: function(event) {
                        if (event.target === element) {
                            this.destroy();
                        }
                    }
                });
                this.document = $(element.style ? element.ownerDocument : element.document || element);
                this.window = $(this.document[0].defaultView || this.document[0].parentWindow);
            }
            this._create();
            this._trigger("create", null, this._getCreateEventData());
            this._init();
        },
        _getCreateOptions: $.noop,
        _getCreateEventData: $.noop,
        _create: $.noop,
        _init: $.noop,
        destroy: function() {
            this._destroy();
            this.element.unbind(this.eventNamespace).removeData(this.widgetName).removeData(this.widgetFullName).removeData($.camelCase(this.widgetFullName));
            this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName + "-disabled " + "ui-state-disabled");
            this.bindings.unbind(this.eventNamespace);
            this.hoverable.removeClass("ui-state-hover");
            this.focusable.removeClass("ui-state-focus");
        },
        _destroy: $.noop,
        widget: function() {
            return this.element;
        },
        option: function(key, value) {
            var options = key, parts, curOption, i;
            if (arguments.length === 0) {
                return $.widget.extend({}, this.options);
            }
            if (typeof key === "string") {
                options = {};
                parts = key.split(".");
                key = parts.shift();
                if (parts.length) {
                    curOption = options[key] = $.widget.extend({}, this.options[key]);
                    for (i = 0; i < parts.length - 1; i++) {
                        curOption[parts[i]] = curOption[parts[i]] || {};
                        curOption = curOption[parts[i]];
                    }
                    key = parts.pop();
                    if (value === undefined) {
                        return curOption[key] === undefined ? null : curOption[key];
                    }
                    curOption[key] = value;
                } else {
                    if (value === undefined) {
                        return this.options[key] === undefined ? null : this.options[key];
                    }
                    options[key] = value;
                }
            }
            this._setOptions(options);
            return this;
        },
        _setOptions: function(options) {
            var key;
            for (key in options) {
                this._setOption(key, options[key]);
            }
            return this;
        },
        _setOption: function(key, value) {
            this.options[key] = value;
            if (key === "disabled") {
                this.widget().toggleClass(this.widgetFullName + "-disabled ui-state-disabled", !!value).attr("aria-disabled", value);
                this.hoverable.removeClass("ui-state-hover");
                this.focusable.removeClass("ui-state-focus");
            }
            return this;
        },
        enable: function() {
            return this._setOption("disabled", false);
        },
        disable: function() {
            return this._setOption("disabled", true);
        },
        _on: function(suppressDisabledCheck, element, handlers) {
            var delegateElement, instance = this;
            if (typeof suppressDisabledCheck !== "boolean") {
                handlers = element;
                element = suppressDisabledCheck;
                suppressDisabledCheck = false;
            }
            if (!handlers) {
                handlers = element;
                element = this.element;
                delegateElement = this.widget();
            } else {
                element = delegateElement = $(element);
                this.bindings = this.bindings.add(element);
            }
            $.each(handlers, function(event, handler) {
                function handlerProxy() {
                    if (!suppressDisabledCheck && (instance.options.disabled === true || $(this).hasClass("ui-state-disabled"))) {
                        return;
                    }
                    return (typeof handler === "string" ? instance[handler] : handler).apply(instance, arguments);
                }
                if (typeof handler !== "string") {
                    handlerProxy.guid = handler.guid = handler.guid || handlerProxy.guid || $.guid++;
                }
                var match = event.match(/^(\w+)\s*(.*)$/), eventName = match[1] + instance.eventNamespace, selector = match[2];
                if (selector) {
                    delegateElement.delegate(selector, eventName, handlerProxy);
                } else {
                    element.bind(eventName, handlerProxy);
                }
            });
        },
        _off: function(element, eventName) {
            eventName = (eventName || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace;
            element.unbind(eventName).undelegate(eventName);
        },
        _delay: function(handler, delay) {
            function handlerProxy() {
                return (typeof handler === "string" ? instance[handler] : handler).apply(instance, arguments);
            }
            var instance = this;
            return setTimeout(handlerProxy, delay || 0);
        },
        _hoverable: function(element) {
            this.hoverable = this.hoverable.add(element);
            this._on(element, {
                mouseenter: function(event) {
                    $(event.currentTarget).addClass("ui-state-hover");
                },
                mouseleave: function(event) {
                    $(event.currentTarget).removeClass("ui-state-hover");
                }
            });
        },
        _focusable: function(element) {
            this.focusable = this.focusable.add(element);
            this._on(element, {
                focusin: function(event) {
                    $(event.currentTarget).addClass("ui-state-focus");
                },
                focusout: function(event) {
                    $(event.currentTarget).removeClass("ui-state-focus");
                }
            });
        },
        _trigger: function(type, event, data) {
            var prop, orig, callback = this.options[type];
            data = data || {};
            event = $.Event(event);
            event.type = (type === this.widgetEventPrefix ? type : this.widgetEventPrefix + type).toLowerCase();
            event.target = this.element[0];
            orig = event.originalEvent;
            if (orig) {
                for (prop in orig) {
                    if (!(prop in event)) {
                        event[prop] = orig[prop];
                    }
                }
            }
            this.element.trigger(event, data);
            return !($.isFunction(callback) && callback.apply(this.element[0], [ event ].concat(data)) === false || event.isDefaultPrevented());
        }
    };
    $.each({
        show: "fadeIn",
        hide: "fadeOut"
    }, function(method, defaultEffect) {
        $.Widget.prototype["_" + method] = function(element, options, callback) {
            if (typeof options === "string") {
                options = {
                    effect: options
                };
            }
            var hasOptions, effectName = !options ? method : options === true || typeof options === "number" ? defaultEffect : options.effect || defaultEffect;
            options = options || {};
            if (typeof options === "number") {
                options = {
                    duration: options
                };
            }
            hasOptions = !$.isEmptyObject(options);
            options.complete = callback;
            if (options.delay) {
                element.delay(options.delay);
            }
            if (hasOptions && $.effects && $.effects.effect[effectName]) {
                element[method](options);
            } else if (effectName !== method && element[effectName]) {
                element[effectName](options.duration, options.easing, callback);
            } else {
                element.queue(function(next) {
                    $(this)[method]();
                    if (callback) {
                        callback.call(element[0]);
                    }
                    next();
                });
            }
        };
    });
})(jQuery);

(function($, undefined) {
    var mouseHandled = false;
    $(document).mouseup(function() {
        mouseHandled = false;
    });
    $.widget("ui.mouse", {
        version: "1.10.3",
        options: {
            cancel: "input,textarea,button,select,option",
            distance: 1,
            delay: 0
        },
        _mouseInit: function() {
            var that = this;
            this.element.bind("mousedown." + this.widgetName, function(event) {
                return that._mouseDown(event);
            }).bind("click." + this.widgetName, function(event) {
                if (true === $.data(event.target, that.widgetName + ".preventClickEvent")) {
                    $.removeData(event.target, that.widgetName + ".preventClickEvent");
                    event.stopImmediatePropagation();
                    return false;
                }
            });
            this.started = false;
        },
        _mouseDestroy: function() {
            this.element.unbind("." + this.widgetName);
            if (this._mouseMoveDelegate) {
                $(document).unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate);
            }
        },
        _mouseDown: function(event) {
            if (mouseHandled) {
                return;
            }
            this._mouseStarted && this._mouseUp(event);
            this._mouseDownEvent = event;
            var that = this, btnIsLeft = event.which === 1, elIsCancel = typeof this.options.cancel === "string" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false;
            if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
                return true;
            }
            this.mouseDelayMet = !this.options.delay;
            if (!this.mouseDelayMet) {
                this._mouseDelayTimer = setTimeout(function() {
                    that.mouseDelayMet = true;
                }, this.options.delay);
            }
            if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                this._mouseStarted = this._mouseStart(event) !== false;
                if (!this._mouseStarted) {
                    event.preventDefault();
                    return true;
                }
            }
            if (true === $.data(event.target, this.widgetName + ".preventClickEvent")) {
                $.removeData(event.target, this.widgetName + ".preventClickEvent");
            }
            this._mouseMoveDelegate = function(event) {
                return that._mouseMove(event);
            };
            this._mouseUpDelegate = function(event) {
                return that._mouseUp(event);
            };
            $(document).bind("mousemove." + this.widgetName, this._mouseMoveDelegate).bind("mouseup." + this.widgetName, this._mouseUpDelegate);
            event.preventDefault();
            mouseHandled = true;
            return true;
        },
        _mouseMove: function(event) {
            if ($.ui.ie && (!document.documentMode || document.documentMode < 9) && !event.button) {
                return this._mouseUp(event);
            }
            if (this._mouseStarted) {
                this._mouseDrag(event);
                return event.preventDefault();
            }
            if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                this._mouseStarted = this._mouseStart(this._mouseDownEvent, event) !== false;
                this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event);
            }
            return !this._mouseStarted;
        },
        _mouseUp: function(event) {
            $(document).unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate);
            if (this._mouseStarted) {
                this._mouseStarted = false;
                if (event.target === this._mouseDownEvent.target) {
                    $.data(event.target, this.widgetName + ".preventClickEvent", true);
                }
                this._mouseStop(event);
            }
            return false;
        },
        _mouseDistanceMet: function(event) {
            return Math.max(Math.abs(this._mouseDownEvent.pageX - event.pageX), Math.abs(this._mouseDownEvent.pageY - event.pageY)) >= this.options.distance;
        },
        _mouseDelayMet: function() {
            return this.mouseDelayMet;
        },
        _mouseStart: function() {},
        _mouseDrag: function() {},
        _mouseStop: function() {},
        _mouseCapture: function() {
            return true;
        }
    });
})(jQuery);

(function($, undefined) {
    var numPages = 5;
    $.widget("ui.slider", $.ui.mouse, {
        version: "1.10.3",
        widgetEventPrefix: "slide",
        options: {
            animate: false,
            distance: 0,
            max: 100,
            min: 0,
            orientation: "horizontal",
            range: false,
            step: 1,
            value: 0,
            values: null,
            change: null,
            slide: null,
            start: null,
            stop: null
        },
        _create: function() {
            this._keySliding = false;
            this._mouseSliding = false;
            this._animateOff = true;
            this._handleIndex = null;
            this._detectOrientation();
            this._mouseInit();
            this.element.addClass("ui-slider" + " ui-slider-" + this.orientation + " ui-widget" + " ui-widget-content" + " ui-corner-all");
            this._refresh();
            this._setOption("disabled", this.options.disabled);
            this._animateOff = false;
        },
        _refresh: function() {
            this._createRange();
            this._createHandles();
            this._setupEvents();
            this._refreshValue();
        },
        _createHandles: function() {
            var i, handleCount, options = this.options, existingHandles = this.element.find(".ui-slider-handle").addClass("ui-state-default ui-corner-all"), handle = "<a class='ui-slider-handle ui-state-default ui-corner-all' href='#'></a>", handles = [];
            handleCount = options.values && options.values.length || 1;
            if (existingHandles.length > handleCount) {
                existingHandles.slice(handleCount).remove();
                existingHandles = existingHandles.slice(0, handleCount);
            }
            for (i = existingHandles.length; i < handleCount; i++) {
                handles.push(handle);
            }
            this.handles = existingHandles.add($(handles.join("")).appendTo(this.element));
            this.handle = this.handles.eq(0);
            this.handles.each(function(i) {
                $(this).data("ui-slider-handle-index", i);
            });
        },
        _createRange: function() {
            var options = this.options, classes = "";
            if (options.range) {
                if (options.range === true) {
                    if (!options.values) {
                        options.values = [ this._valueMin(), this._valueMin() ];
                    } else if (options.values.length && options.values.length !== 2) {
                        options.values = [ options.values[0], options.values[0] ];
                    } else if ($.isArray(options.values)) {
                        options.values = options.values.slice(0);
                    }
                }
                if (!this.range || !this.range.length) {
                    this.range = $("<div></div>").appendTo(this.element);
                    classes = "ui-slider-range" + " ui-widget-header ui-corner-all";
                } else {
                    this.range.removeClass("ui-slider-range-min ui-slider-range-max").css({
                        left: "",
                        bottom: ""
                    });
                }
                this.range.addClass(classes + (options.range === "min" || options.range === "max" ? " ui-slider-range-" + options.range : ""));
            } else {
                this.range = $([]);
            }
        },
        _setupEvents: function() {
            var elements = this.handles.add(this.range).filter("a");
            this._off(elements);
            this._on(elements, this._handleEvents);
            this._hoverable(elements);
            this._focusable(elements);
        },
        _destroy: function() {
            this.handles.remove();
            this.range.remove();
            this.element.removeClass("ui-slider" + " ui-slider-horizontal" + " ui-slider-vertical" + " ui-widget" + " ui-widget-content" + " ui-corner-all");
            this._mouseDestroy();
        },
        _mouseCapture: function(event) {
            var position, normValue, distance, closestHandle, index, allowed, offset, mouseOverHandle, that = this, o = this.options;
            if (o.disabled) {
                return false;
            }
            this.elementSize = {
                width: this.element.outerWidth(),
                height: this.element.outerHeight()
            };
            this.elementOffset = this.element.offset();
            position = {
                x: event.pageX,
                y: event.pageY
            };
            normValue = this._normValueFromMouse(position);
            distance = this._valueMax() - this._valueMin() + 1;
            this.handles.each(function(i) {
                var thisDistance = Math.abs(normValue - that.values(i));
                if (distance > thisDistance || distance === thisDistance && (i === that._lastChangedValue || that.values(i) === o.min)) {
                    distance = thisDistance;
                    closestHandle = $(this);
                    index = i;
                }
            });
            allowed = this._start(event, index);
            if (allowed === false) {
                return false;
            }
            this._mouseSliding = true;
            this._handleIndex = index;
            closestHandle.addClass("ui-state-active").focus();
            offset = closestHandle.offset();
            mouseOverHandle = !$(event.target).parents().addBack().is(".ui-slider-handle");
            this._clickOffset = mouseOverHandle ? {
                left: 0,
                top: 0
            } : {
                left: event.pageX - offset.left - closestHandle.width() / 2,
                top: event.pageY - offset.top - closestHandle.height() / 2 - (parseInt(closestHandle.css("borderTopWidth"), 10) || 0) - (parseInt(closestHandle.css("borderBottomWidth"), 10) || 0) + (parseInt(closestHandle.css("marginTop"), 10) || 0)
            };
            if (!this.handles.hasClass("ui-state-hover")) {
                this._slide(event, index, normValue);
            }
            this._animateOff = true;
            return true;
        },
        _mouseStart: function() {
            return true;
        },
        _mouseDrag: function(event) {
            var position = {
                x: event.pageX,
                y: event.pageY
            }, normValue = this._normValueFromMouse(position);
            this._slide(event, this._handleIndex, normValue);
            return false;
        },
        _mouseStop: function(event) {
            this.handles.removeClass("ui-state-active");
            this._mouseSliding = false;
            this._stop(event, this._handleIndex);
            this._change(event, this._handleIndex);
            this._handleIndex = null;
            this._clickOffset = null;
            this._animateOff = false;
            return false;
        },
        _detectOrientation: function() {
            this.orientation = this.options.orientation === "vertical" ? "vertical" : "horizontal";
        },
        _normValueFromMouse: function(position) {
            var pixelTotal, pixelMouse, percentMouse, valueTotal, valueMouse;
            if (this.orientation === "horizontal") {
                pixelTotal = this.elementSize.width;
                pixelMouse = position.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0);
            } else {
                pixelTotal = this.elementSize.height;
                pixelMouse = position.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0);
            }
            percentMouse = pixelMouse / pixelTotal;
            if (percentMouse > 1) {
                percentMouse = 1;
            }
            if (percentMouse < 0) {
                percentMouse = 0;
            }
            if (this.orientation === "vertical") {
                percentMouse = 1 - percentMouse;
            }
            valueTotal = this._valueMax() - this._valueMin();
            valueMouse = this._valueMin() + percentMouse * valueTotal;
            return this._trimAlignValue(valueMouse);
        },
        _start: function(event, index) {
            var uiHash = {
                handle: this.handles[index],
                value: this.value()
            };
            if (this.options.values && this.options.values.length) {
                uiHash.value = this.values(index);
                uiHash.values = this.values();
            }
            return this._trigger("start", event, uiHash);
        },
        _slide: function(event, index, newVal) {
            var otherVal, newValues, allowed;
            if (this.options.values && this.options.values.length) {
                otherVal = this.values(index ? 0 : 1);
                if (this.options.values.length === 2 && this.options.range === true && (index === 0 && newVal > otherVal || index === 1 && newVal < otherVal)) {
                    newVal = otherVal;
                }
                if (newVal !== this.values(index)) {
                    newValues = this.values();
                    newValues[index] = newVal;
                    allowed = this._trigger("slide", event, {
                        handle: this.handles[index],
                        value: newVal,
                        values: newValues
                    });
                    otherVal = this.values(index ? 0 : 1);
                    if (allowed !== false) {
                        this.values(index, newVal, true);
                    }
                }
            } else {
                if (newVal !== this.value()) {
                    allowed = this._trigger("slide", event, {
                        handle: this.handles[index],
                        value: newVal
                    });
                    if (allowed !== false) {
                        this.value(newVal);
                    }
                }
            }
        },
        _stop: function(event, index) {
            var uiHash = {
                handle: this.handles[index],
                value: this.value()
            };
            if (this.options.values && this.options.values.length) {
                uiHash.value = this.values(index);
                uiHash.values = this.values();
            }
            this._trigger("stop", event, uiHash);
        },
        _change: function(event, index) {
            if (!this._keySliding && !this._mouseSliding) {
                var uiHash = {
                    handle: this.handles[index],
                    value: this.value()
                };
                if (this.options.values && this.options.values.length) {
                    uiHash.value = this.values(index);
                    uiHash.values = this.values();
                }
                this._lastChangedValue = index;
                this._trigger("change", event, uiHash);
            }
        },
        value: function(newValue) {
            if (arguments.length) {
                this.options.value = this._trimAlignValue(newValue);
                this._refreshValue();
                this._change(null, 0);
                return;
            }
            return this._value();
        },
        values: function(index, newValue) {
            var vals, newValues, i;
            if (arguments.length > 1) {
                this.options.values[index] = this._trimAlignValue(newValue);
                this._refreshValue();
                this._change(null, index);
                return;
            }
            if (arguments.length) {
                if ($.isArray(arguments[0])) {
                    vals = this.options.values;
                    newValues = arguments[0];
                    for (i = 0; i < vals.length; i += 1) {
                        vals[i] = this._trimAlignValue(newValues[i]);
                        this._change(null, i);
                    }
                    this._refreshValue();
                } else {
                    if (this.options.values && this.options.values.length) {
                        return this._values(index);
                    } else {
                        return this.value();
                    }
                }
            } else {
                return this._values();
            }
        },
        _setOption: function(key, value) {
            var i, valsLength = 0;
            if (key === "range" && this.options.range === true) {
                if (value === "min") {
                    this.options.value = this._values(0);
                    this.options.values = null;
                } else if (value === "max") {
                    this.options.value = this._values(this.options.values.length - 1);
                    this.options.values = null;
                }
            }
            if ($.isArray(this.options.values)) {
                valsLength = this.options.values.length;
            }
            $.Widget.prototype._setOption.apply(this, arguments);
            switch (key) {
              case "orientation":
                this._detectOrientation();
                this.element.removeClass("ui-slider-horizontal ui-slider-vertical").addClass("ui-slider-" + this.orientation);
                this._refreshValue();
                break;

              case "value":
                this._animateOff = true;
                this._refreshValue();
                this._change(null, 0);
                this._animateOff = false;
                break;

              case "values":
                this._animateOff = true;
                this._refreshValue();
                for (i = 0; i < valsLength; i += 1) {
                    this._change(null, i);
                }
                this._animateOff = false;
                break;

              case "min":
              case "max":
                this._animateOff = true;
                this._refreshValue();
                this._animateOff = false;
                break;

              case "range":
                this._animateOff = true;
                this._refresh();
                this._animateOff = false;
                break;
            }
        },
        _value: function() {
            var val = this.options.value;
            val = this._trimAlignValue(val);
            return val;
        },
        _values: function(index) {
            var val, vals, i;
            if (arguments.length) {
                val = this.options.values[index];
                val = this._trimAlignValue(val);
                return val;
            } else if (this.options.values && this.options.values.length) {
                vals = this.options.values.slice();
                for (i = 0; i < vals.length; i += 1) {
                    vals[i] = this._trimAlignValue(vals[i]);
                }
                return vals;
            } else {
                return [];
            }
        },
        _trimAlignValue: function(val) {
            if (val <= this._valueMin()) {
                return this._valueMin();
            }
            if (val >= this._valueMax()) {
                return this._valueMax();
            }
            var step = this.options.step > 0 ? this.options.step : 1, valModStep = (val - this._valueMin()) % step, alignValue = val - valModStep;
            if (Math.abs(valModStep) * 2 >= step) {
                alignValue += valModStep > 0 ? step : -step;
            }
            return parseFloat(alignValue.toFixed(5));
        },
        _valueMin: function() {
            return this.options.min;
        },
        _valueMax: function() {
            return this.options.max;
        },
        _refreshValue: function() {
            var lastValPercent, valPercent, value, valueMin, valueMax, oRange = this.options.range, o = this.options, that = this, animate = !this._animateOff ? o.animate : false, _set = {};
            if (this.options.values && this.options.values.length) {
                this.handles.each(function(i) {
                    valPercent = (that.values(i) - that._valueMin()) / (that._valueMax() - that._valueMin()) * 100;
                    _set[that.orientation === "horizontal" ? "left" : "bottom"] = valPercent + "%";
                    $(this).stop(1, 1)[animate ? "animate" : "css"](_set, o.animate);
                    if (that.options.range === true) {
                        if (that.orientation === "horizontal") {
                            if (i === 0) {
                                that.range.stop(1, 1)[animate ? "animate" : "css"]({
                                    left: valPercent + "%"
                                }, o.animate);
                            }
                            if (i === 1) {
                                that.range[animate ? "animate" : "css"]({
                                    width: valPercent - lastValPercent + "%"
                                }, {
                                    queue: false,
                                    duration: o.animate
                                });
                            }
                        } else {
                            if (i === 0) {
                                that.range.stop(1, 1)[animate ? "animate" : "css"]({
                                    bottom: valPercent + "%"
                                }, o.animate);
                            }
                            if (i === 1) {
                                that.range[animate ? "animate" : "css"]({
                                    height: valPercent - lastValPercent + "%"
                                }, {
                                    queue: false,
                                    duration: o.animate
                                });
                            }
                        }
                    }
                    lastValPercent = valPercent;
                });
            } else {
                value = this.value();
                valueMin = this._valueMin();
                valueMax = this._valueMax();
                valPercent = valueMax !== valueMin ? (value - valueMin) / (valueMax - valueMin) * 100 : 0;
                _set[this.orientation === "horizontal" ? "left" : "bottom"] = valPercent + "%";
                this.handle.stop(1, 1)[animate ? "animate" : "css"](_set, o.animate);
                if (oRange === "min" && this.orientation === "horizontal") {
                    this.range.stop(1, 1)[animate ? "animate" : "css"]({
                        width: valPercent + "%"
                    }, o.animate);
                }
                if (oRange === "max" && this.orientation === "horizontal") {
                    this.range[animate ? "animate" : "css"]({
                        width: 100 - valPercent + "%"
                    }, {
                        queue: false,
                        duration: o.animate
                    });
                }
                if (oRange === "min" && this.orientation === "vertical") {
                    this.range.stop(1, 1)[animate ? "animate" : "css"]({
                        height: valPercent + "%"
                    }, o.animate);
                }
                if (oRange === "max" && this.orientation === "vertical") {
                    this.range[animate ? "animate" : "css"]({
                        height: 100 - valPercent + "%"
                    }, {
                        queue: false,
                        duration: o.animate
                    });
                }
            }
        },
        _handleEvents: {
            keydown: function(event) {
                var allowed, curVal, newVal, step, index = $(event.target).data("ui-slider-handle-index");
                switch (event.keyCode) {
                  case $.ui.keyCode.HOME:
                  case $.ui.keyCode.END:
                  case $.ui.keyCode.PAGE_UP:
                  case $.ui.keyCode.PAGE_DOWN:
                  case $.ui.keyCode.UP:
                  case $.ui.keyCode.RIGHT:
                  case $.ui.keyCode.DOWN:
                  case $.ui.keyCode.LEFT:
                    event.preventDefault();
                    if (!this._keySliding) {
                        this._keySliding = true;
                        $(event.target).addClass("ui-state-active");
                        allowed = this._start(event, index);
                        if (allowed === false) {
                            return;
                        }
                    }
                    break;
                }
                step = this.options.step;
                if (this.options.values && this.options.values.length) {
                    curVal = newVal = this.values(index);
                } else {
                    curVal = newVal = this.value();
                }
                switch (event.keyCode) {
                  case $.ui.keyCode.HOME:
                    newVal = this._valueMin();
                    break;

                  case $.ui.keyCode.END:
                    newVal = this._valueMax();
                    break;

                  case $.ui.keyCode.PAGE_UP:
                    newVal = this._trimAlignValue(curVal + (this._valueMax() - this._valueMin()) / numPages);
                    break;

                  case $.ui.keyCode.PAGE_DOWN:
                    newVal = this._trimAlignValue(curVal - (this._valueMax() - this._valueMin()) / numPages);
                    break;

                  case $.ui.keyCode.UP:
                  case $.ui.keyCode.RIGHT:
                    if (curVal === this._valueMax()) {
                        return;
                    }
                    newVal = this._trimAlignValue(curVal + step);
                    break;

                  case $.ui.keyCode.DOWN:
                  case $.ui.keyCode.LEFT:
                    if (curVal === this._valueMin()) {
                        return;
                    }
                    newVal = this._trimAlignValue(curVal - step);
                    break;
                }
                this._slide(event, index, newVal);
            },
            click: function(event) {
                event.preventDefault();
            },
            keyup: function(event) {
                var index = $(event.target).data("ui-slider-handle-index");
                if (this._keySliding) {
                    this._keySliding = false;
                    this._stop(event, index);
                    this._change(event, index);
                    $(event.target).removeClass("ui-state-active");
                }
            }
        }
    });
})(jQuery);

(function() {
    "use strict";
    var _camelizeCssPropName = function() {
        var matcherRegex = /\-([a-z])/g, replacerFn = function(match, group) {
            return group.toUpperCase();
        };
        return function(prop) {
            return prop.replace(matcherRegex, replacerFn);
        };
    }();
    var _getStyle = function(el, prop) {
        var value, camelProp, tagName, possiblePointers, i, len;
        if (window.getComputedStyle) {
            value = window.getComputedStyle(el, null).getPropertyValue(prop);
        } else {
            camelProp = _camelizeCssPropName(prop);
            if (el.currentStyle) {
                value = el.currentStyle[camelProp];
            } else {
                value = el.style[camelProp];
            }
        }
        if (value === "auto" && prop === "cursor") {
            tagName = el.tagName.toLowerCase();
            possiblePointers = [ "a" ];
            for (i = 0, len = possiblePointers.length; i < len; i++) {
                if (tagName === possiblePointers[i]) {
                    return "pointer";
                }
            }
        }
        return value;
    };
    var _elementMouseOver = function(event) {
        if (!ZeroClipboard.prototype._singleton) return;
        if (!event) {
            event = window.event;
        }
        var target;
        if (this !== window) {
            target = this;
        } else if (event.target) {
            target = event.target;
        } else if (event.srcElement) {
            target = event.srcElement;
        }
        ZeroClipboard.prototype._singleton.setCurrent(target);
    };
    var _addEventHandler = function(element, method, func) {
        if (element.addEventListener) {
            element.addEventListener(method, func, false);
        } else if (element.attachEvent) {
            element.attachEvent("on" + method, func);
        }
    };
    var _removeEventHandler = function(element, method, func) {
        if (element.removeEventListener) {
            element.removeEventListener(method, func, false);
        } else if (element.detachEvent) {
            element.detachEvent("on" + method, func);
        }
    };
    var _addClass = function(element, value) {
        if (element.addClass) {
            element.addClass(value);
            return element;
        }
        if (value && typeof value === "string") {
            var classNames = (value || "").split(/\s+/);
            if (element.nodeType === 1) {
                if (!element.className) {
                    element.className = value;
                } else {
                    var className = " " + element.className + " ", setClass = element.className;
                    for (var c = 0, cl = classNames.length; c < cl; c++) {
                        if (className.indexOf(" " + classNames[c] + " ") < 0) {
                            setClass += " " + classNames[c];
                        }
                    }
                    element.className = setClass.replace(/^\s+|\s+$/g, "");
                }
            }
        }
        return element;
    };
    var _removeClass = function(element, value) {
        if (element.removeClass) {
            element.removeClass(value);
            return element;
        }
        if (value && typeof value === "string" || value === undefined) {
            var classNames = (value || "").split(/\s+/);
            if (element.nodeType === 1 && element.className) {
                if (value) {
                    var className = (" " + element.className + " ").replace(/[\n\t]/g, " ");
                    for (var c = 0, cl = classNames.length; c < cl; c++) {
                        className = className.replace(" " + classNames[c] + " ", " ");
                    }
                    element.className = className.replace(/^\s+|\s+$/g, "");
                } else {
                    element.className = "";
                }
            }
        }
        return element;
    };
    var _getZoomFactor = function() {
        var rect, physicalWidth, logicalWidth, zoomFactor = 1;
        if (typeof document.body.getBoundingClientRect === "function") {
            rect = document.body.getBoundingClientRect();
            physicalWidth = rect.right - rect.left;
            logicalWidth = document.body.offsetWidth;
            zoomFactor = Math.round(physicalWidth / logicalWidth * 100) / 100;
        }
        return zoomFactor;
    };
    var _getDOMObjectPosition = function(obj) {
        var info = {
            left: 0,
            top: 0,
            width: 0,
            height: 0,
            zIndex: 999999999
        };
        var zi = _getStyle(obj, "z-index");
        if (zi && zi !== "auto") {
            info.zIndex = parseInt(zi, 10);
        }
        if (obj.getBoundingClientRect) {
            var rect = obj.getBoundingClientRect();
            var pageXOffset, pageYOffset, zoomFactor;
            if ("pageXOffset" in window && "pageYOffset" in window) {
                pageXOffset = window.pageXOffset;
                pageYOffset = window.pageYOffset;
            } else {
                zoomFactor = _getZoomFactor();
                pageXOffset = Math.round(document.documentElement.scrollLeft / zoomFactor);
                pageYOffset = Math.round(document.documentElement.scrollTop / zoomFactor);
            }
            var leftBorderWidth = document.documentElement.clientLeft || 0;
            var topBorderWidth = document.documentElement.clientTop || 0;
            info.left = rect.left + pageXOffset - leftBorderWidth;
            info.top = rect.top + pageYOffset - topBorderWidth;
            info.width = "width" in rect ? rect.width : rect.right - rect.left;
            info.height = "height" in rect ? rect.height : rect.bottom - rect.top;
        }
        return info;
    };
    var _noCache = function(path) {
        var client = ZeroClipboard.prototype._singleton;
        if (client.options.useNoCache) {
            return (path.indexOf("?") >= 0 ? "&nocache=" : "?nocache=") + new Date().getTime();
        } else {
            return "";
        }
    };
    var _vars = function(options) {
        var str = [];
        if (options.trustedDomains) {
            var domains;
            if (typeof options.trustedDomains === "string" && options.trustedDomains) {
                domains = [ options.trustedDomains ];
            } else if ("length" in options.trustedDomains) {
                domains = options.trustedDomains;
            }
            str.push("trustedDomain=" + encodeURIComponent(domains.join(",")));
        }
        if (typeof options.amdModuleId === "string" && options.amdModuleId) {
            str.push("amdModuleId=" + encodeURIComponent(options.amdModuleId));
        }
        if (typeof options.cjsModuleId === "string" && options.cjsModuleId) {
            str.push("cjsModuleId=" + encodeURIComponent(options.cjsModuleId));
        }
        return str.join("&");
    };
    var _inArray = function(elem, array) {
        if (array.indexOf) {
            return array.indexOf(elem);
        }
        for (var i = 0, length = array.length; i < length; i++) {
            if (array[i] === elem) {
                return i;
            }
        }
        return -1;
    };
    var _prepGlue = function(elements) {
        if (typeof elements === "string") throw new TypeError("ZeroClipboard doesn't accept query strings.");
        if (!elements.length) return [ elements ];
        return elements;
    };
    var _dispatchCallback = function(func, element, instance, args, async) {
        if (async) {
            window.setTimeout(function() {
                func.call(element, instance, args);
            }, 0);
        } else {
            func.call(element, instance, args);
        }
    };
    var ZeroClipboard = function(elements, options) {
        if (elements) (ZeroClipboard.prototype._singleton || this).glue(elements);
        if (ZeroClipboard.prototype._singleton) return ZeroClipboard.prototype._singleton;
        ZeroClipboard.prototype._singleton = this;
        this.options = {};
        for (var kd in _defaults) this.options[kd] = _defaults[kd];
        for (var ko in options) this.options[ko] = options[ko];
        this.handlers = {};
        if (ZeroClipboard.detectFlashSupport()) _bridge();
    };
    var currentElement, gluedElements = [];
    ZeroClipboard.prototype.setCurrent = function(element) {
        currentElement = element;
        this.reposition();
        if (element.getAttribute("title")) {
            this.setTitle(element.getAttribute("title"));
        }
        this.setHandCursor(_getStyle(element, "cursor") === "pointer");
    };
    ZeroClipboard.prototype.setText = function(newText) {
        if (newText && newText !== "") {
            this.options.text = newText;
            if (this.ready()) this.flashBridge.setText(newText);
        }
    };
    ZeroClipboard.prototype.setTitle = function(newTitle) {
        if (newTitle && newTitle !== "") this.htmlBridge.setAttribute("title", newTitle);
    };
    ZeroClipboard.prototype.setSize = function(width, height) {
        if (this.ready()) this.flashBridge.setSize(width, height);
    };
    ZeroClipboard.prototype.setHandCursor = function(enabled) {
        if (this.ready()) this.flashBridge.setHandCursor(enabled);
    };
    ZeroClipboard.version = "1.2.0-beta.3";
    var _defaults = {
        moviePath: "ZeroClipboard.swf",
        trustedDomains: null,
        text: null,
        hoverClass: "zeroclipboard-is-hover",
        activeClass: "zeroclipboard-is-active",
        allowScriptAccess: "sameDomain",
        useNoCache: true
    };
    ZeroClipboard.setDefaults = function(options) {
        for (var ko in options) _defaults[ko] = options[ko];
    };
    ZeroClipboard.destroy = function() {
        ZeroClipboard.prototype._singleton.unglue(gluedElements);
        var bridge = ZeroClipboard.prototype._singleton.htmlBridge;
        bridge.parentNode.removeChild(bridge);
        delete ZeroClipboard.prototype._singleton;
    };
    ZeroClipboard.detectFlashSupport = function() {
        var hasFlash = false;
        if (typeof ActiveXObject === "function") {
            try {
                if (new ActiveXObject("ShockwaveFlash.ShockwaveFlash")) {
                    hasFlash = true;
                }
            } catch (error) {}
        }
        if (!hasFlash && navigator.mimeTypes["application/x-shockwave-flash"]) {
            hasFlash = true;
        }
        return hasFlash;
    };
    var _amdModuleId = null;
    var _cjsModuleId = null;
    var _bridge = function() {
        var client = ZeroClipboard.prototype._singleton;
        var container = document.getElementById("global-zeroclipboard-html-bridge");
        if (!container) {
            var opts = {};
            for (var ko in client.options) opts[ko] = client.options[ko];
            opts.amdModuleId = _amdModuleId;
            opts.cjsModuleId = _cjsModuleId;
            var flashvars = _vars(opts);
            var html = '      <object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" id="global-zeroclipboard-flash-bridge" width="100%" height="100%">         <param name="movie" value="' + client.options.moviePath + _noCache(client.options.moviePath) + '"/>         <param name="allowScriptAccess" value="' + client.options.allowScriptAccess + '"/>         <param name="scale" value="exactfit"/>         <param name="loop" value="false"/>         <param name="menu" value="false"/>         <param name="quality" value="best" />         <param name="bgcolor" value="#ffffff"/>         <param name="wmode" value="transparent"/>         <param name="flashvars" value="' + flashvars + '"/>         <embed src="' + client.options.moviePath + _noCache(client.options.moviePath) + '"           loop="false" menu="false"           quality="best" bgcolor="#ffffff"           width="100%" height="100%"           name="global-zeroclipboard-flash-bridge"           allowScriptAccess="always"           allowFullScreen="false"           type="application/x-shockwave-flash"           wmode="transparent"           pluginspage="http://www.macromedia.com/go/getflashplayer"           flashvars="' + flashvars + '"           scale="exactfit">         </embed>       </object>';
            container = document.createElement("div");
            container.id = "global-zeroclipboard-html-bridge";
            container.setAttribute("class", "global-zeroclipboard-container");
            container.setAttribute("data-clipboard-ready", false);
            container.style.position = "absolute";
            container.style.left = "-9999px";
            container.style.top = "-9999px";
            container.style.width = "15px";
            container.style.height = "15px";
            container.style.zIndex = "9999";
            container.innerHTML = html;
            document.body.appendChild(container);
        }
        client.htmlBridge = container;
        client.flashBridge = document["global-zeroclipboard-flash-bridge"] || container.children[0].lastElementChild;
    };
    ZeroClipboard.prototype.resetBridge = function() {
        this.htmlBridge.style.left = "-9999px";
        this.htmlBridge.style.top = "-9999px";
        this.htmlBridge.removeAttribute("title");
        this.htmlBridge.removeAttribute("data-clipboard-text");
        _removeClass(currentElement, this.options.activeClass);
        currentElement = null;
        this.options.text = null;
    };
    ZeroClipboard.prototype.ready = function() {
        var ready = this.htmlBridge.getAttribute("data-clipboard-ready");
        return ready === "true" || ready === true;
    };
    ZeroClipboard.prototype.reposition = function() {
        if (!currentElement) return false;
        var pos = _getDOMObjectPosition(currentElement);
        this.htmlBridge.style.top = pos.top + "px";
        this.htmlBridge.style.left = pos.left + "px";
        this.htmlBridge.style.width = pos.width + "px";
        this.htmlBridge.style.height = pos.height + "px";
        this.htmlBridge.style.zIndex = pos.zIndex + 1;
        this.setSize(pos.width, pos.height);
    };
    ZeroClipboard.dispatch = function(eventName, args) {
        ZeroClipboard.prototype._singleton.receiveEvent(eventName, args);
    };
    ZeroClipboard.prototype.on = function(eventName, func) {
        var events = eventName.toString().split(/\s/g);
        for (var i = 0; i < events.length; i++) {
            eventName = events[i].toLowerCase().replace(/^on/, "");
            if (!this.handlers[eventName]) this.handlers[eventName] = func;
        }
        if (this.handlers.noflash && !ZeroClipboard.detectFlashSupport()) {
            this.receiveEvent("onNoFlash", null);
        }
    };
    ZeroClipboard.prototype.addEventListener = ZeroClipboard.prototype.on;
    ZeroClipboard.prototype.off = function(eventName, func) {
        var events = eventName.toString().split(/\s/g);
        for (var i = 0; i < events.length; i++) {
            eventName = events[i].toLowerCase().replace(/^on/, "");
            for (var event in this.handlers) {
                if (event === eventName && this.handlers[event] === func) {
                    delete this.handlers[event];
                }
            }
        }
    };
    ZeroClipboard.prototype.removeEventListener = ZeroClipboard.prototype.off;
    ZeroClipboard.prototype.receiveEvent = function(eventName, args) {
        eventName = eventName.toString().toLowerCase().replace(/^on/, "");
        var element = currentElement;
        var performCallbackAsync = true;
        switch (eventName) {
          case "load":
            if (args && parseFloat(args.flashVersion.replace(",", ".").replace(/[^0-9\.]/gi, "")) < 10) {
                this.receiveEvent("onWrongFlash", {
                    flashVersion: args.flashVersion
                });
                return;
            }
            this.htmlBridge.setAttribute("data-clipboard-ready", true);
            break;

          case "mouseover":
            _addClass(element, this.options.hoverClass);
            break;

          case "mouseout":
            _removeClass(element, this.options.hoverClass);
            this.resetBridge();
            break;

          case "mousedown":
            _addClass(element, this.options.activeClass);
            break;

          case "mouseup":
            _removeClass(element, this.options.activeClass);
            break;

          case "datarequested":
            var targetId = element.getAttribute("data-clipboard-target"), targetEl = !targetId ? null : document.getElementById(targetId);
            if (targetEl) {
                var textContent = targetEl.value || targetEl.textContent || targetEl.innerText;
                if (textContent) this.setText(textContent);
            } else {
                var defaultText = element.getAttribute("data-clipboard-text");
                if (defaultText) this.setText(defaultText);
            }
            performCallbackAsync = false;
            break;

          case "complete":
            this.options.text = null;
            break;
        }
        if (this.handlers[eventName]) {
            var func = this.handlers[eventName];
            if (typeof func === "string" && typeof window[func] === "function") {
                func = window[func];
            }
            if (typeof func === "function") {
                _dispatchCallback(func, element, this, args, performCallbackAsync);
            }
        }
    };
    ZeroClipboard.prototype.glue = function(elements) {
        elements = _prepGlue(elements);
        for (var i = 0; i < elements.length; i++) {
            if (_inArray(elements[i], gluedElements) == -1) {
                gluedElements.push(elements[i]);
                _addEventHandler(elements[i], "mouseover", _elementMouseOver);
            }
        }
    };
    ZeroClipboard.prototype.unglue = function(elements) {
        elements = _prepGlue(elements);
        for (var i = 0; i < elements.length; i++) {
            _removeEventHandler(elements[i], "mouseover", _elementMouseOver);
            var arrayIndex = _inArray(elements[i], gluedElements);
            if (arrayIndex != -1) gluedElements.splice(arrayIndex, 1);
        }
    };
    if (typeof define === "function" && define.amd) {
        define([ "require", "exports", "module" ], function(require, exports, module) {
            _amdModuleId = module && module.id || null;
            return ZeroClipboard;
        });
    } else if (typeof module !== "undefined" && module) {
        _cjsModuleId = module.id || null;
        module.exports = ZeroClipboard;
    } else {
        window.ZeroClipboard = ZeroClipboard;
    }
})();

this["PDP"] = this["PDP"] || {};

this["PDP"]["templates"] = this["PDP"]["templates"] || {};

this["PDP"]["templates"]["location"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<ul class="fields location-set location-set-' + ((__t = num) == null ? "" : __t) + '" data-location-num="' + ((__t = num) == null ? "" : __t) + '">\n\n  <!-- filter field -->\n  <li class="field state_code state_code-' + ((__t = num) == null ? "" : __t) + '">\n    <label for="state_code-' + ((__t = num) == null ? "" : __t) + '">State:</label>\n    <div class="widget select">\n      <select class="param" name="state_code-' + ((__t = num) == null ? "" : __t) + '" id="state_code-' + ((__t = num) == null ? "" : __t) + '" data-dependent="county_code-' + ((__t = num) == null ? "" : __t) + " census_tract_number-" + ((__t = num) == null ? "" : __t) + '" data-toggle="msamd-' + ((__t = num) == null ? "" : __t) + '" data-placeholder="Select a state">\n        <option value=""></option>\n        <option value="1">Alabama</option>\n        <option value="2">Alaska</option>\n        <option value="4">Arizona</option>\n        <option value="5">Arkansas</option>\n        <option value="6">California</option>\n        <option value="8">Colorado</option>\n        <option value="9">Connecticut</option>\n        <option value="10">Delaware</option>\n        <option value="11">District of Columbia</option>\n        <option value="12">Florida</option>\n        <option value="13">Georgia</option>\n        <option value="15">Hawaii</option>\n        <option value="16">Idaho</option>\n        <option value="17">Illinois</option>\n        <option value="18">Indiana</option>\n        <option value="19">Iowa</option>\n        <option value="20">Kansas</option>\n        <option value="21">Kentucky</option>\n        <option value="22">Louisiana</option>\n        <option value="23">Maine</option>\n        <option value="24">Maryland</option>\n        <option value="25">Massachusetts</option>\n        <option value="26">Michigan</option>\n        <option value="27">Minnesota</option>\n        <option value="28">Mississippi</option>\n        <option value="29">Missouri</option>\n        <option value="30">Montana</option>\n        <option value="31">Nebraska</option>\n        <option value="32">Nevada</option>\n        <option value="33">New Hampshire</option>\n        <option value="34">New Jersey</option>\n        <option value="35">New Mexico</option>\n        <option value="36">New York</option>\n        <option value="37">North Carolina</option>\n        <option value="38">North Dakota</option>\n        <option value="39">Ohio</option>\n        <option value="40">Oklahoma</option>\n        <option value="41">Oregon</option>\n        <option value="42">Pennsylvania</option>\n        <option value="44">Rhode Island</option>\n        <option value="45">South Carolina</option>\n        <option value="46">South Dakota</option>\n        <option value="47">Tennessee</option>\n        <option value="48">Texas</option>\n        <option value="49">Utah</option>\n        <option value="50">Vermont</option>\n        <option value="51">Virginia</option>\n        <option value="53">Washington</option>\n        <option value="54">West Virginia</option>\n        <option value="55">Wisconsin</option>\n        <option value="56">Wyoming</option>\n        <option value="72">Puerto Rico</option>\n      </select>\n    </div>\n  </li>\n  <!-- /filter field -->\n\n  <li class="location-separator">\n      <span>- or -</span>\n  </li>\n\n  <!-- filter field -->\n  <li class="field msamd msamd-' + ((__t = num) == null ? "" : __t) + '">\n    <label for="msamd-' + ((__t = num) == null ? "" : __t) + '">Metropolitan Statistical Area (MSA)</label>\n    <div class="widget select">\n      <select class="param" name="msamd-' + ((__t = num) == null ? "" : __t) + '" id="msamd-' + ((__t = num) == null ? "" : __t) + '" data-toggle="state_code-' + ((__t = num) == null ? "" : __t) + '" data-placeholder="Select an MSA">\n        <option value=""></option>\n        <option value="10180">Abilene - TX</option>\n        <option value="10380">Aguadilla, Isabela - PR</option>\n        <option value="10420">Akron - OH</option>\n        <option value="10500">Albany - GA</option>\n        <option value="10540">Albany - OR</option>\n        <option value="10580">Albany, Schenectady, Troy - NY</option>\n        <option value="10740">Albuquerque - NM</option>\n        <option value="10780">Alexandria - LA</option>\n        <option value="10900">Allentown, Bethlehem, Easton - PA, NJ</option>\n        <option value="11020">Altoona - PA</option>\n        <option value="11100">Amarillo - TX</option>\n        <option value="11180">Ames - IA</option>\n        <option value="11260">Anchorage - AK</option>\n        <option value="11460">Ann Arbor - MI</option>\n        <option value="11500">Anniston, Oxford, Jacksonville - AL</option>\n        <option value="11540">Appleton - WI</option>\n        <option value="11640">Arecibo - PR</option>\n        <option value="11700">Asheville - NC</option>\n        <option value="12020">Athens, Clarke County - GA</option>\n        <option value="12060">Atlanta, Sandy Springs, Roswell - GA</option>\n        <option value="12100">Atlantic City, Hammonton - NJ</option>\n        <option value="12220">Auburn, Opelika - AL</option>\n        <option value="12260">Augusta, Richmond County - GA, SC</option>\n        <option value="12420">Austin, Round Rock - TX</option>\n        <option value="12540">Bakersfield - CA</option>\n        <option value="12580">Baltimore, Columbia, Towson - MD</option>\n        <option value="12620">Bangor - ME</option>\n        <option value="12700">Barnstable Town - MA</option>\n        <option value="12940">Baton Rouge - LA</option>\n        <option value="12980">Battle Creek - MI</option>\n        <option value="13020">Bay City - MI</option>\n        <option value="13140">Beaumont, Port Arthur - TX</option>\n        <option value="13220">Beckley - WV</option>\n        <option value="13380">Bellingham - WA</option>\n        <option value="13460">Bend, Redmond - OR</option>\n        <option value="13740">Billings - MT</option>\n        <option value="13780">Binghamton - NY</option>\n        <option value="13820">Birmingham, Hoover - AL</option>\n        <option value="13900">Bismarck - ND</option>\n        <option value="13980">Blacksburg, Christiansburg, Radford - VA</option>\n        <option value="14010">Bloomington - IL</option>\n        <option value="14020">Bloomington - IN</option>\n        <option value="14100">Bloomsburg, Berwick - PA</option>\n        <option value="14260">Boise City - ID</option>\n        <option value="14460">Boston, Cambridge, Newton - MA, NH</option>\n        <option value="71654">Boston, Cambridge, Quincy - MA</option>\n        <option value="72104">Brockton, Bridgewater, Easton - MA</option>\n        <option value="73104">Framingham, MA</option>\n        <option value="73604">Haverhill, North Andover, Amesbury - MA, NH</option>\n        <option value="74204">Lawrence, Methuen, Salem - MA, NH</option>\n        <option value="74804">Lowell, Billerica, Chelmsford - MA, NH</option>\n        <option value="75404">Nashua - NH</option>\n        <option value="76524">Peabody - MA</option>\n        <option value="78254">Taunton, Norton, Raynham - MA</option>\n        <option value="14500">Boulder - CO</option>\n        <option value="14540">Bowling Green - KY</option>\n        <option value="14740">Bremerton, Silverdale - WA</option>\n        <option value="14860">Bridgeport, Stamford, Norwalk - CT</option>\n        <option value="15180">Brownsville, Harlingen - TX</option>\n        <option value="15260">Brunswick - GA</option>\n        <option value="15380">Buffalo, Cheektowaga, Niagara Falls - NY</option>\n        <option value="15500">Burlington - NC</option>\n        <option value="15540">Burlington, South Burlington - VT</option>\n        <option value="15680">California, Lexington Park - MD</option>\n        <option value="15940">Canton, Massillon - OH</option>\n        <option value="15980">Cape Coral, Fort Myers - FL</option>\n        <option value="16020">Cape Girardeau - MO, IL</option>\n        <option value="16060">Carbondale, Marion - IL</option>\n        <option value="16180">Carson City - NV</option>\n        <option value="16220">Casper - WY</option>\n        <option value="16300">Cedar Rapids - IA</option>\n        <option value="16540">Chambersburg, Waynesboro - PA</option>\n        <option value="16580">Champaign, Urbana - IL</option>\n        <option value="16620">Charleston - WV</option>\n        <option value="16700">Charleston, North Charleston - SC</option>\n        <option value="16740">Charlotte, Concord, Gastonia - NC, SC</option>\n        <option value="16820">Charlottesville - VA</option>\n        <option value="16860">Chattanooga - TN, GA</option>\n        <option value="16940">Cheyenne - WY</option>\n        <option value="16974">Chicago, Joliet, Naperville - IL</option>\n        <option value="23844">Gary - IN</option>\n        <option value="29404">Lake County, Kenosha County - IL</option>\n        <option value="17020">Chico - CA</option>\n        <option value="17140">Cincinnati - OH, KY, IN</option>\n        <option value="17300">Clarksville - TN, KY</option>\n        <option value="17420">Cleveland - TN</option>\n        <option value="17460">Cleveland, Elyria - OH</option>\n        <option value="17660">Coeur d\'Alene - ID</option>\n        <option value="17780">College Station, Bryan - TX</option>\n        <option value="17820">Colorado Springs - CO</option>\n        <option value="17860">Columbia - MO</option>\n        <option value="17900">Columbia - SC</option>\n        <option value="17980">Columbus - GA, AL</option>\n        <option value="18020">Columbus - IN</option>\n        <option value="18140">Columbus - OH</option>\n        <option value="18580">Corpus Christi - TX</option>\n        <option value="18700">Corvallis - OR</option>\n        <option value="18880">Crestview, Fort Walton Beach, Destin - FL</option>\n        <option value="19060">Cumberland - MD, WV</option>\n        <option value="19124">Dallas, Plano, Irving - TX</option>\n        <option value="23104">Fort Worth, Arlington - TX</option>\n        <option value="19140">Dalton - GA</option>\n        <option value="19180">Danville - IL</option>\n        <option value="19300">Daphne, Fairhope, Foley - AL</option>\n        <option value="19340">Davenport, Moline, Rock Island - IA, IL</option>\n        <option value="19380">Dayton - OH</option>\n        <option value="19460">Decatur - AL</option>\n        <option value="19500">Decatur - IL</option>\n        <option value="19660">Deltona, Daytona Beach, Ormond Beach - FL</option>\n        <option value="19740">Denver, Aurora, Lakewood - CO</option>\n        <option value="19780">Des Moines, West Des Moines - IA</option>\n        <option value="19804">Detroit, Livonia, Dearborn - MI</option>\n        <option value="47644">Warren, Farmington Hills, Troy - MI</option>\n        <option value="20020">Dothan - AL</option>\n        <option value="20100">Dover - DE</option>\n        <option value="20220">Dubuque - IA</option>\n        <option value="20260">Duluth - MN, WI</option>\n        <option value="20500">Durham, Chapel Hill - NC</option>\n        <option value="20700">East Stroudsburg - PA</option>\n        <option value="20740">Eau Claire - WI</option>\n        <option value="20940">El Centro - CA</option>\n        <option value="21060">Elizabethtown, Fort Knox - KY</option>\n        <option value="21140">Elkhart, Goshen - IN</option>\n        <option value="21300">Elmira - NY</option>\n        <option value="21340">El Paso - TX</option>\n        <option value="21500">Erie - PA</option>\n        <option value="21660">Eugene - OR</option>\n        <option value="21780">Evansville - IN, KY</option>\n        <option value="21820">Fairbanks - AK</option>\n        <option value="22020">Fargo - ND, MN</option>\n        <option value="22140">Farmington - NM</option>\n        <option value="22180">Fayetteville - NC</option>\n        <option value="22220">Fayetteville, Springdale, Rogers - AR, MO</option>\n        <option value="22380">Flagstaff - AZ</option>\n        <option value="22420">Flint - MI</option>\n        <option value="22500">Florence - SC</option>\n        <option value="22520">Florence, Muscle Shoals - AL</option>\n        <option value="22540">Fond du Lac - WI</option>\n        <option value="22660">Fort Collins - CO</option>\n        <option value="22900">Fort Smith - AR, OK</option>\n        <option value="23060">Fort Wayne - IN</option>\n        <option value="23420">Fresno - CA</option>\n        <option value="23460">Gadsden - AL</option>\n        <option value="23540">Gainesville - FL</option>\n        <option value="23580">Gainesville - GA</option>\n        <option value="23900">Gettysburg - PA</option>\n        <option value="24020">Glens Falls - NY</option>\n        <option value="24140">Goldsboro - NC</option>\n        <option value="24220">Grand Forks - ND, MN</option>\n        <option value="24260">Grand Island - NE</option>\n        <option value="24300">Grand Junction - CO</option>\n        <option value="24340">Grand Rapids, Wyoming - MI</option>\n        <option value="24420">Grants Pass - OR</option>\n        <option value="24500">Great Falls - MT</option>\n        <option value="24540">Greeley - CO</option>\n        <option value="24580">Green Bay - WI</option>\n        <option value="24660">Greensboro, High Point - NC</option>\n        <option value="24780">Greenville - NC</option>\n        <option value="24860">Greenville, Anderson, Mauldin - SC</option>\n        <option value="25020">Guayama - PR</option>\n        <option value="25060">Gulfport, Biloxi, Pascagoula - MS</option>\n        <option value="25180">Hagerstown, Martinsburg - MD, WV</option>\n        <option value="25220">Hammond - LA</option>\n        <option value="25260">Hanford, Corcoran - CA</option>\n        <option value="25420">Harrisburg, Carlisle - PA</option>\n        <option value="25500">Harrisonburg - VA</option>\n        <option value="25540">Hartford, West Hartford, East Hartford - CT</option>\n        <option value="25620">Hattiesburg - MS</option>\n        <option value="25860">Hickory, Lenoir, Morganton - NC</option>\n        <option value="25940">Hilton Head Island, Bluffton, Beaufort - SC</option>\n        <option value="25980">Hinesville - GA</option>\n        <option value="26140">Homosassa Springs - FL</option>\n        <option value="26300">Hot Springs - AR</option>\n        <option value="26380">Houma, Thibodaux - LA</option>\n        <option value="26420">Houston, The Woodlands, Sugar Land - TX</option>\n        <option value="26580">Huntington, Ashland - WV, KY, OH</option>\n        <option value="26620">Huntsville - AL</option>\n        <option value="26820">Idaho Falls - ID</option>\n        <option value="26900">Indianapolis, Carmel, Anderson - IN</option>\n        <option value="26980">Iowa City - IA</option>\n        <option value="27060">Ithaca - NY</option>\n        <option value="27100">Jackson - MI</option>\n        <option value="27140">Jackson - MS</option>\n        <option value="27180">Jackson - TN</option>\n        <option value="27260">Jacksonville - FL</option>\n        <option value="27340">Jacksonville - NC</option>\n        <option value="27500">Janesville, Beloit - WI</option>\n        <option value="27620">Jefferson City - MO</option>\n        <option value="27740">Johnson City - TN</option>\n        <option value="27780">Johnstown - PA</option>\n        <option value="27860">Jonesboro - AR</option>\n        <option value="27900">Joplin - MO</option>\n        <option value="27980">Kahului, Wailuku, Lahaina - HI</option>\n        <option value="28020">Kalamazoo, Portage - MI</option>\n        <option value="28100">Kankakee - IL</option>\n        <option value="28140">Kansas City - MO, KS</option>\n        <option value="28420">Kennewick, Richland - WA</option>\n        <option value="28660">Killeen, Temple - TX</option>\n        <option value="28700">Kingsport, Bristol, Bristol - TN, VA</option>\n        <option value="28740">Kingston - NY</option>\n        <option value="28940">Knoxville - TN</option>\n        <option value="29020">Kokomo - IN</option>\n        <option value="29100">La Crosse, Onalaska - WI, MN</option>\n        <option value="29180">Lafayette - LA</option>\n        <option value="29200">Lafayette, West Lafayette - IN</option>\n        <option value="29340">Lake Charles - LA</option>\n        <option value="29420">Lake Havasu City, Kingman - AZ</option>\n        <option value="29460">Lakeland, Winter Haven - FL</option>\n        <option value="29540">Lancaster - PA</option>\n        <option value="29620">Lansing, East Lansing - MI</option>\n        <option value="29700">Laredo - TX</option>\n        <option value="29740">Las Cruces - NM</option>\n        <option value="29820">Las Vegas, Henderson, Paradise - NV</option>\n        <option value="29940">Lawrence - KS</option>\n        <option value="30020">Lawton - OK</option>\n        <option value="30140">Lebanon - PA</option>\n        <option value="30300">Lewiston - ID, WA</option>\n        <option value="30340">Lewiston, Auburn - ME</option>\n        <option value="30460">Lexington, Fayette - KY</option>\n        <option value="30620">Lima - OH</option>\n        <option value="30700">Lincoln - NE</option>\n        <option value="30780">Little Rock, North Little Rock, Conway - AR</option>\n        <option value="30860">Logan - UT, ID</option>\n        <option value="30980">Longview - TX</option>\n        <option value="31020">Longview - WA</option>\n        <option value="31084">Los Angeles, Long Beach, Glendale - CA</option>\n        <option value="42044">Santa Ana, Anaheim, Irvine - CA</option>\n        <option value="31140">Louisville/Jefferson County - KY, IN</option>\n        <option value="31180">Lubbock - TX</option>\n        <option value="31340">Lynchburg - VA</option>\n        <option value="31420">Macon - GA</option>\n        <option value="31460">Madera - CA</option>\n        <option value="31540">Madison - WI</option>\n        <option value="31700">Manchester, Nashua - NH</option>\n        <option value="31740">Manhattan - KS</option>\n        <option value="31860">Mankato, North Mankato - MN</option>\n        <option value="31900">Mansfield - OH</option>\n        <option value="32420">Mayagüez - PR</option>\n        <option value="32580">McAllen, Edinburg, Mission - TX</option>\n        <option value="32780">Medford - OR</option>\n        <option value="32820">Memphis - TN, MS, AR</option>\n        <option value="32900">Merced - CA</option>\n        <option value="22744">Fort Lauderdale, Pompano Beach, Deerfield Beach - FL</option>\n        <option value="33124">Miami, Miami Beach, Kendall - FL</option>\n        <option value="48424">West Palm Beach, Boca Raton, Boynton Beach - FL</option>\n        <option value="33140">Michigan City, La Porte - IN</option>\n        <option value="33220">Midland - MI</option>\n        <option value="33260">Midland - TX</option>\n        <option value="33340">Milwaukee, Waukesha, West Allis - WI</option>\n        <option value="33460">Minneapolis, St. Paul, Bloomington - MN, WI</option>\n        <option value="33540">Missoula - MT</option>\n        <option value="33660">Mobile - AL</option>\n        <option value="33700">Modesto - CA</option>\n        <option value="33740">Monroe - LA</option>\n        <option value="33780">Monroe - MI</option>\n        <option value="33860">Montgomery - AL</option>\n        <option value="34060">Morgantown - WV</option>\n        <option value="34100">Morristown - TN</option>\n        <option value="34580">Mount Vernon, Anacortes - WA</option>\n        <option value="34620">Muncie - IN</option>\n        <option value="34740">Muskegon - MI</option>\n        <option value="34820">Myrtle Beach, Conway, North Myrtle Beach - SC, NC</option>\n        <option value="34900">Napa - CA</option>\n        <option value="34940">Naples, Immokalee, Marco Island - FL</option>\n        <option value="34980">Nashville, Davidson--Murfreesboro--Franklin - TN</option>\n        <option value="35100">New Bern - NC</option>\n        <option value="35300">New Haven, Milford - CT</option>\n        <option value="35380">New Orleans, Metairie - LA</option>\n        <option value="20764">Edison, New Brunswick - NJ</option>\n        <option value="35004">Nassau, Suffolk - NY</option>\n        <option value="35644">New York, White Plains, Wayne - NJ, NY</option>\n        <option value="35084">Newark, Union - NJ, PA</option>\n        <option value="35660">Niles, Benton Harbor - MI</option>\n        <option value="35840">North Port, Sarasota, Bradenton - FL</option>\n        <option value="35980">Norwich, New London - CT</option>\n        <option value="36100">Ocala - FL</option>\n        <option value="36140">Ocean City - NJ</option>\n        <option value="36220">Odessa - TX</option>\n        <option value="36260">Ogden, Clearfield - UT</option>\n        <option value="36420">Oklahoma City - OK</option>\n        <option value="36500">Olympia, Tumwater - WA</option>\n        <option value="36540">Omaha, Council Bluffs - NE, IA</option>\n        <option value="36740">Orlando, Kissimmee, Sanford - FL</option>\n        <option value="36780">Oshkosh, Neenah - WI</option>\n        <option value="36980">Owensboro - KY</option>\n        <option value="37100">Oxnard, Thousand Oaks, Ventura - CA</option>\n        <option value="37340">Palm Bay, Melbourne, Titusville - FL</option>\n        <option value="37460">Panama City - FL</option>\n        <option value="37620">Parkersburg, Vienna - WV</option>\n        <option value="37860">Pensacola, Ferry Pass, Brent - FL</option>\n        <option value="37900">Peoria - IL</option>\n        <option value="15804">Camden - NJ</option>\n        <option value="37964">Philadelphia - PA</option>\n        <option value="48864">Wilmington - DE</option>\n        <option value="38060">Phoenix, Mesa, Scottsdale - AZ</option>\n        <option value="38220">Pine Bluff - AR</option>\n        <option value="38300">Pittsburgh - PA</option>\n        <option value="38340">Pittsfield - MA</option>\n        <option value="38540">Pocatello - ID</option>\n        <option value="38660">Ponce - PR</option>\n        <option value="38860">Portland, South Portland - ME</option>\n        <option value="38900">Portland, Vancouver, Hillsboro - OR, WA</option>\n        <option value="38940">Port St. Lucie - FL</option>\n        <option value="39140">Prescott - AZ</option>\n        <option value="39300">Providence, Warwick - RI, MA</option>\n        <option value="39340">Provo, Orem - UT</option>\n        <option value="39380">Pueblo - CO</option>\n        <option value="39460">Punta Gorda - FL</option>\n        <option value="39540">Racine - WI</option>\n        <option value="39580">Raleigh - NC</option>\n        <option value="39660">Rapid City - SD</option>\n        <option value="39740">Reading - PA</option>\n        <option value="39820">Redding - CA</option>\n        <option value="39900">Reno - NV</option>\n        <option value="40060">Richmond - VA</option>\n        <option value="40140">Riverside, San Bernardino, Ontario - CA</option>\n        <option value="40220">Roanoke - VA</option>\n        <option value="40340">Rochester - MN</option>\n        <option value="40380">Rochester - NY</option>\n        <option value="40420">Rockford - IL</option>\n        <option value="40580">Rocky Mount - NC</option>\n        <option value="40660">Rome - GA</option>\n        <option value="40900">Sacramento--Roseville--Arden, Arcade - CA</option>\n        <option value="40980">Saginaw - MI</option>\n        <option value="41060">St. Cloud - MN</option>\n        <option value="41100">St. George - UT</option>\n        <option value="41140">St. Joseph - MO, KS</option>\n        <option value="41180">St. Louis - MO, IL</option>\n        <option value="41420">Salem - OR</option>\n        <option value="41500">Salinas - CA</option>\n        <option value="41540">Salisbury - MD, DE</option>\n        <option value="41620">Salt Lake City - UT</option>\n        <option value="41660">San Angelo - TX</option>\n        <option value="41700">San Antonio, New Braunfels - TX</option>\n        <option value="41740">San Diego, Carlsbad - CA</option>\n        <option value="36084">Oakland, Fremont, Hayward - CA</option>\n        <option value="41884">San Francisco, San Mateo, Redwood City - CA</option>\n        <option value="41900">San Germán - PR</option>\n        <option value="41940">San Jose, Sunnyvale, Santa Clara - CA</option>\n        <option value="41980">San Juan, Carolina, Caguas - PR</option>\n        <option value="42020">San Luis Obispo, Paso Robles, Arroyo Grande - CA</option>\n        <option value="42100">Santa Cruz, Watsonville - CA</option>\n        <option value="42140">Santa Fe - NM</option>\n        <option value="42200">Santa Maria, Santa Barbara - CA</option>\n        <option value="42220">Santa Rosa - CA</option>\n        <option value="42340">Savannah - GA</option>\n        <option value="42540">Scranton--Wilkes, Barre--Hazleton - PA</option>\n        <option value="42644">Seattle, Bellevue, Everett - WA</option>\n        <option value="45104">Tacoma - WA</option>\n        <option value="42680">Sebastian, Vero Beach - FL</option>\n        <option value="42700">Sebring - FL</option>\n        <option value="43100">Sheboygan - WI</option>\n        <option value="43300">Sherman, Denison - TX</option>\n        <option value="43340">Shreveport, Bossier City - LA</option>\n        <option value="43420">Sierra Vista, Douglas - AZ</option>\n        <option value="43580">Sioux City - IA, NE, SD</option>\n        <option value="43620">Sioux Falls - SD</option>\n        <option value="43780">South Bend, Mishawaka - IN, MI</option>\n        <option value="43900">Spartanburg - SC</option>\n        <option value="44060">Spokane, Spokane Valley - WA</option>\n        <option value="44100">Springfield - IL</option>\n        <option value="44140">Springfield - MA</option>\n        <option value="44180">Springfield - MO</option>\n        <option value="44220">Springfield - OH</option>\n        <option value="44300">State College - PA</option>\n        <option value="44420">Staunton, Waynesboro - VA</option>\n        <option value="44700">Stockton, Lodi - CA</option>\n        <option value="44940">Sumter - SC</option>\n        <option value="45060">Syracuse - NY</option>\n        <option value="45220">Tallahassee - FL</option>\n        <option value="45300">Tampa, St. Petersburg, Clearwater - FL</option>\n        <option value="45460">Terre Haute - IN</option>\n        <option value="45500">Texarkana - TX, AR</option>\n        <option value="45540">The Villages - FL</option>\n        <option value="45780">Toledo - OH</option>\n        <option value="45820">Topeka - KS</option>\n        <option value="45940">Trenton - NJ</option>\n        <option value="46060">Tucson - AZ</option>\n        <option value="46140">Tulsa - OK</option>\n        <option value="46220">Tuscaloosa - AL</option>\n        <option value="46340">Tyler - TX</option>\n        <option value="46520">Urban Honolulu - HI</option>\n        <option value="46540">Utica, Rome - NY</option>\n        <option value="46660">Valdosta - GA</option>\n        <option value="46700">Vallejo, Fairfield - CA</option>\n        <option value="47020">Victoria - TX</option>\n        <option value="47220">Vineland, Bridgeton - NJ</option>\n        <option value="47260">Virginia Beach, Norfolk, Newport News - VA, NC</option>\n        <option value="47300">Visalia, Porterville - CA</option>\n        <option value="47380">Waco - TX</option>\n        <option value="47460">Walla Walla - WA</option>\n        <option value="47580">Warner Robins - GA</option>\n        <option value="13644">Bethesda, Rockville, Frederick - MD</option>\n        <option value="47894">Washington, Arlington, Alexandria - DC, VA, MD</option>\n        <option value="47940">Waterloo, Cedar Falls - IA</option>\n        <option value="48060">Watertown, Fort Drum - NY</option>\n        <option value="48140">Wausau - WI</option>\n        <option value="48260">Weirton, Steubenville - WV, OH</option>\n        <option value="48300">Wenatchee - WA</option>\n        <option value="48540">Wheeling - WV, OH</option>\n        <option value="48620">Wichita - KS</option>\n        <option value="48660">Wichita Falls - TX</option>\n        <option value="48700">Williamsport - PA</option>\n        <option value="48900">Wilmington - NC</option>\n        <option value="49020">Winchester - VA, WV</option>\n        <option value="49180">Winston, Salem - NC</option>\n        <option value="49340">Worcester - MA, CT</option>\n        <option value="49420">Yakima - WA</option>\n        <option value="49620">York, Hanover - PA</option>\n        <option value="49660">Youngstown, Warren, Boardman - OH, PA</option>\n        <option value="49700">Yuba City - CA</option>\n        <option value="49740">Yuma - AZ</option>\n      </select>\n    </div>\n    <div class="help" title="A Metropolitan Statistical Area (MSA) is a region with relatively high population density at its core (usually a single large city) and close economic ties throughout. Larger MSAs, including multiple cities, are divided into Metropolitan Divisions (MDs)."><i class="icon-help-alt"></i></div>\n  </li>\n  <!-- /filter field -->\n\n  <!-- filter field -->\n  <li class="field county_code county_code-' + ((__t = num) == null ? "" : __t) + ' disabled hidden">\n    <label for="county_code-' + ((__t = num) == null ? "" : __t) + '">County:</label>\n    <div class="widget select">\n      <select class="param" name="county_code-' + ((__t = num) == null ? "" : __t) + '" id="county_code-' + ((__t = num) == null ? "" : __t) + '" multiple data-concept="fips" data-concept-property="county_name" data-placeholder="Select a state above" data-pre-placeholder="Select a state above" data-post-placeholder="Select a county" disabled>\n      </select>\n    </div>\n  </li>\n  <!-- /filter field -->\n\n  <!-- filter field -->\n  <li class="field census_tract_number census_tract_number-' + ((__t = num) == null ? "" : __t) + ' disabled hidden">\n    <label for="census_tract_number-' + ((__t = num) == null ? "" : __t) + '">Census tract:</label>\n    <div class="widget select">\n      <select class="param" name="census_tract_number-' + ((__t = num) == null ? "" : __t) + '" id="census_tract_number-' + ((__t = num) == null ? "" : __t) + '" multiple data-concept="census_tract_number" data-placeholder="Select a state above" data-pre-placeholder="Select a state above" data-post-placeholder="Select a census" disabled>\n      </select>\n    </div>\n  </li>\n  <!-- /filter field -->\n\n<ul>';
    }
    return __p;
};

this["PDP"]["templates"]["option"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<option value="' + ((__t = value) == null ? "" : __t) + '">' + ((__t = label) == null ? "" : __t) + "</option>";
    }
    return __p;
};

this["PDP"]["templates"]["spinner"] = function(obj) {
    obj || (obj = {});
    var __t, __p = "", __e = _.escape;
    with (obj) {
        __p += '<div class="spinning"></div>';
    }
    return __p;
};

var PDP = function(pdp) {
    "use strict";
    var observer = new EventEmitter();
    pdp.observer = observer;
    return pdp;
}(PDP || {});

var PDP = function(pdp) {
    "use strict";
    var utils = {};
    utils.showError = function(errorText) {
        $("#error").text(errorText).delay(2e4).fadeOut();
    };
    utils.varToTitle = function(varName) {
        var nameParts = varName.split("_"), varTitle;
        nameParts = nameParts.reverse();
        if (isNaN(nameParts[0]) === false) {
            nameParts.splice(0, 1);
        }
        if (nameParts[0] === "name") {
            nameParts.splice(0, 1);
        }
        if (nameParts[0] === "year") {
            nameParts.splice(1, 2);
        }
        varTitle = nameParts.reverse().join(" ");
        varTitle = varTitle.charAt(0).toUpperCase() + varTitle.slice(1);
        return varTitle;
    };
    utils.getPrettyFilesize = function(bytes) {
        if (bytes >= 1073741824) {
            bytes = (bytes / 1073741824).toFixed(2) + " GB";
        } else if (bytes >= 1048576) {
            bytes = (bytes / 1048576).toFixed(1) + " MB";
        } else if (bytes >= 1024) {
            bytes = (bytes / 1024).toFixed(0) + " KB";
        } else if (bytes > 1) {
            bytes = bytes + " bytes";
        } else if (bytes == 1) {
            bytes = bytes + " byte";
        } else {
            bytes = "0 byte";
        }
        return bytes;
    };
    utils.getHashParams = function() {
        var hashParams = {};
        var e, a = /\+/g, r = /([^&;=<>]+)([=><]?)([^&;]*)/g, d = function(s) {
            return decodeURIComponent(s.replace(a, " "));
        }, q = window.location.hash.substring(1).replace(/^!\/?/, "");
        while (e = r.exec(q)) {
            hashParams[d(e[1])] = {
                values: d(e[3]),
                comparator: d(e[2])
            };
        }
        return hashParams;
    };
    utils.commify = function(num) {
        return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    };
    utils.isBlank = function(str) {
        return !str || /^\s*$/.test(str);
    };
    utils.emptyObject = function(obj) {
        if (_.isObject(obj)) {
            return !_.some(obj, function(val, key) {
                return !pdp.utils.isBlank(val);
            });
        }
    };
    utils.nonEmptyValues = function(obj) {
        if (!_.isObject(obj)) {
            return [];
        }
        return _.filter(obj, function(val, key) {
            return !pdp.utils.isBlank(val);
        });
    };
    if (!("localStorage" in window)) {
        window.localStorage = {
            _data: {},
            setItem: function(id, val) {
                return this._data[id] = String(val);
            },
            getItem: function(id) {
                return this._data.hasOwnProperty(id) ? this._data[id] : undefined;
            },
            removeItem: function(id) {
                return delete this._data[id];
            },
            clear: function() {
                return this._data = {};
            }
        };
    }
    utils.getJSON = function(url) {
        var supportsLocalStorage = "localStorage" in window, storageKey = "cfpb:" + url.substring(url.indexOf("?") + 1);
        function getJSON(url) {
            var deferred = $.getJSON(url);
            deferred.done(function(data) {
                if (data && data.computing) {
                    return;
                }
                try {
                    localStorage.setItem(storageKey, JSON.stringify(data));
                } catch (e) {
                    window.localStorage.clear();
                }
                if (window.localStorage.length > 100) {
                    window.localStorage.clear();
                }
            });
            return deferred;
        }
        function getStorage(url) {
            var storageDfd = new $.Deferred(), storedData = localStorage.getItem(storageKey), promise;
            if (!storedData) {
                return getJSON(url);
            }
            setTimeout(function() {
                storageDfd.resolveWith(null, [ JSON.parse(storedData) ]);
            });
            promise = storageDfd.promise();
            promise.status = 200;
            promise.statusText = "success";
            return promise;
        }
        return supportsLocalStorage ? getStorage(url) : getJSON(url);
    };
    utils.requireNumeric = function(e) {
        var key = e.which, allowedKeys = [ 8, 9, 16, 17, 18, 37, 38, 39, 40, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 86, 91, 93, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 188, 224 ];
        if (allowedKeys.indexOf(key) === -1) {
            e.preventDefault();
            $(this).tooltip({
                title: "Numbers only, please!",
                trigger: "manual"
            });
            $(this).tooltip("show");
            setTimeout(function() {
                $(this).tooltip("destroy");
            }.bind(this), 3e3);
        }
    };
    if (!Function.prototype.bind) {
        Function.prototype.bind = function(oThis) {
            if (typeof this !== "function") {
                throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
            }
            var aArgs = Array.prototype.slice.call(arguments, 1), fToBind = this, FNOP = function() {}, fBound = function() {
                return fToBind.apply(this instanceof FNOP && oThis ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
            };
            FNOP.prototype = this.prototype;
            fBound.prototype = new FNOP();
            return fBound;
        };
    }
    String.prototype.splice = function(idx, rem, s) {
        return this.slice(0, idx) + s + this.slice(idx + Math.abs(rem));
    };
    if (!Array.prototype.indexOf) {
        Array.prototype.indexOf = function(searchElement) {
            if (this === null) {
                throw new TypeError();
            }
            var n, k, t = Object(this), len = t.length >>> 0;
            if (len === 0) {
                return -1;
            }
            n = 0;
            if (arguments.length > 1) {
                n = Number(arguments[1]);
                if (n != n) {
                    n = 0;
                } else if (n !== 0 && n != Infinity && n != -Infinity) {
                    n = (n > 0 || -1) * Math.floor(Math.abs(n));
                }
            }
            if (n >= len) {
                return -1;
            }
            for (k = n >= 0 ? n : Math.max(len - Math.abs(n), 0); k < len; k++) {
                if (k in t && t[k] === searchElement) {
                    return k;
                }
            }
            return -1;
        };
    }
    pdp.utils = utils;
    return pdp;
}(PDP || {});

var PDP = function(pdp) {
    "use strict";
    $("a.section-toggle").on("click", function(ev) {
        var targetSection = $(this).attr("href").replace("#", "");
        ev.preventDefault();
        pdp.observer.emitEvent("navigation:clicked", [ targetSection ]);
    });
    $(".filter").on("change", '.field select, .field:not(".optional-toggle") input', _.debounce(function() {
        pdp.observer.emitEvent("field:changed", [ $(this).attr("id") ]);
    }, 300));
    $("a#add-state").on("click", function(ev) {
        var numLocations = $("#location-sets .location-set").last().data("location-num");
        ev.preventDefault();
        pdp.form.addState(++numLocations);
        if (numLocations > pdp.form.maxNumLocations) {
            $("a#add-state").hide();
        }
    });
    $(".optional-toggle input").on("change", function() {
        var section = $(this).parents(".optional-toggle").data("optional");
        if (+$(this).val()) {
            pdp.form.toggleOptional(section, "show");
        } else {
            pdp.form.toggleOptional(section, "hide");
        }
    });
    $("form#explore").on("submit", function(ev) {
        var format = $("#format").val(), showCodes = !!parseInt($(".codes input[type=radio]:checked").val(), 10), url = pdp.query.generateApiUrl(format, showCodes);
        ev.preventDefault();
        pdp.app.redirect(url);
    });
    $("#download-raw-button").on("click", function(ev) {
        var format = $("#raw-format").val(), showCodes = !!parseInt($(".raw-codes input[type=radio]:checked").val(), 10), url = pdp.query.generateApiUrl(format, showCodes);
        ev.preventDefault();
        pdp.app.redirect(url);
    });
    $("#download-summary-button").on("click", function(ev) {
        var format = $("#summary-table-format").val(), showCodes = true, url = pdp.query.generateApiUrl(format, showCodes, pdp.summaryTable.queryParams);
        ev.preventDefault();
        pdp.app.redirect(url);
    });
    $(".filter .title").on("click", function(ev) {
        var id = $(this).parents(".filter").attr("id"), $el = $("#" + id);
        ev.preventDefault();
        if ($el.hasClass("closed")) {
            pdp.form.showFilter($el);
        } else {
            pdp.form.hideFilter($el);
        }
    });
    $(".preview .title").on("click", function(ev) {
        var $container = $(".preview");
        ev.preventDefault();
        if (!$(this).hasClass("disabled")) {
            if ($container.hasClass("closed")) {
                pdp.preview.showTable();
            } else {
                pdp.preview.hideTable();
            }
        }
    });
    $("#format").on("change", function() {
        pdp.query.format = $(this).val();
    });
    $("a[href=#download]").on("click", function(ev) {
        ev.preventDefault();
        $("html, body").animate({
            scrollTop: $(document).height()
        }, 100);
    });
    $("a.reset").on("click", function(ev) {
        ev.preventDefault();
        pdp.form.resetFields();
        pdp.query.reset({
            empty: true
        });
        pdp.form.updateShareLink();
        var parents = _.map($("select[data-dependent], input[data-dependent]"), function(el) {
            return $(el).attr("id");
        });
        pdp.form.checkDeps(parents);
        pdp.preview.update();
        $("html, body").animate({
            scrollTop: $("#filters").position().top
        }, 200);
    });
    $(".require-numeric").on("keydown", pdp.utils.requireNumeric);
    $(".share_url").on("click", function() {
        $(this).select();
    });
    $(function() {
        pdp.observer.emitEvent("dom:loaded");
    });
    return pdp;
}(PDP || {});

var PDP = function(pdp) {
    "use strict";
    var query = {};
    query.debug = false;
    query.format = query.debug ? "json" : "jsonp?$callback=";
    query.endpoint = query.debug ? "static/js/static_data/" : "https://qu2.demo.cfpb.gov/data/hmda/";
    query.secondsToWait = 600;
    query.codes = false;
    query.params = {};
    query.reset = function(options) {
        options = options || {};
        if (options.defaults) {
            this.params = {
                as_of_year: {
                    values: [ 2012 ],
                    comparator: "="
                },
                property_type: {
                    values: [ 1, 2 ],
                    comparator: "="
                },
                owner_occupancy: {
                    values: [ 1 ],
                    comparator: "="
                },
                lien_status: {
                    values: [ 1 ],
                    comparator: "="
                },
                action_taken: {
                    values: [ 1 ],
                    comparator: "="
                }
            };
        } else {
            this.params = {};
        }
        return this;
    };
    query.updateAll = function(options) {
        var fields, opts = options || {};
        if (opts.source === "url") {
            fields = pdp.app.getUrlValues();
        } else {
            fields = pdp.form.getFields();
        }
        this.reset();
        function _processField(field) {
            if (field.name && field.values) {
                if (typeof query.params[field.name] === "undefined") {
                    query.params[field.name] = {
                        values: [],
                        comparator: "="
                    };
                }
                if (field.type === "text") {
                    query.params[field.name].values = [ field.values ];
                } else {
                    _.forEach(field.values, function(val, name) {
                        var values = query.params[field.name].values;
                        if (!_.contains(values, val)) {
                            values.push(val);
                        }
                    });
                }
                query.params[field.name].comparator = field.comparator;
            }
        }
        _.forEach(fields, _processField);
        pdp.observer.emitEvent("params:updated");
    };
    query.generateUrlHash = function() {
        var hash, hashParams = [];
        function buildHashParam(param, name) {
            if (!param.values[0]) {
                return;
            }
            hashParams.push(name + param.comparator + param.values.join(","));
        }
        _.forEach(query.params, buildHashParam);
        hash = "!/" + hashParams.join("&") + "&section=" + pdp.app.currentSection;
        return hash;
    };
    query.removeSelectParam = function(params) {
        var paramsCopy = $.extend(true, {}, params);
        try {
            delete paramsCopy.clauses.where.select;
        } catch (e) {}
        delete paramsCopy.select;
        return paramsCopy;
    };
    query.generateApiUrl = function(format, codes, params) {
        var url, apiCallParams = params || this.params, showCodes = codes || this.codes, downloadFormat = format || this.format;
        apiCallParams = query.removeSelectParam(apiCallParams);
        url = this.endpoint + "slice/hmda_lar." + downloadFormat + "?";
        if (!showCodes) {
            apiCallParams = {
                clauses: {
                    where: apiCallParams,
                    select: [ "action_taken_name", "agency_abbr", "agency_name", "applicant_ethnicity_name", "applicant_race_name_1", "applicant_race_name_2", "applicant_race_name_3", "applicant_race_name_4", "applicant_race_name_5", "applicant_sex_name", "application_date_indicator", "as_of_year", "census_tract_number", "co_applicant_ethnicity_name", "co_applicant_race_name_1", "co_applicant_race_name_2", "co_applicant_race_name_3", "co_applicant_race_name_4", "co_applicant_race_name_5", "co_applicant_sex_name", "county_name", "denial_reason_name_1", "denial_reason_name_2", "denial_reason_name_3", "edit_status_name", "hoepa_status_name", "lien_status_name", "loan_purpose_name", "loan_type_name", "msamd_name", "owner_occupancy_name", "preapproval_name", "property_type_name", "purchaser_type_name", "respondent_id", "sequence_number", "state_abbr", "state_name", "applicant_income_000s", "co_applicant_income_000s", "hud_median_family_income", "loan_amount_000s", "number_of_1_to_4_family_units", "number_of_owner_occupied_units", "minority_population", "population", "rate_spread", "tract_to_msamd_income" ]
                }
            };
        }
        url += this._buildApiQuery(apiCallParams);
        return url;
    };
    query._buildApiQuery = function(params) {
        var url = "", key;
        if (params.hasOwnProperty("clauses")) {
            for (key in params.clauses) {
                if (params.clauses.hasOwnProperty(key)) {
                    url += this._buildClause[key](params.clauses[key]);
                }
            }
        } else {
            url = this._buildClause.where(params);
        }
        return url;
    };
    query._buildClause = {
        where: function(params) {
            var _params = {}, queryVals = [];
            _.forEach(params, function(param, paramName) {
                if (!param.values || !param.values[0]) {
                    return;
                }
                var consolidatedName;
                if (paramName.match(/\-\d+$/)) {
                    consolidatedName = paramName.replace(/\-\d+$/, "");
                    if (typeof _params[consolidatedName] === "undefined") {
                        _params[consolidatedName] = {
                            values: [],
                            comparator: "="
                        };
                    }
                    _.forEach(param.values, function(value) {
                        _params[consolidatedName].values.push(value);
                    });
                } else {
                    _params[paramName] = param;
                }
            });
            _.forEach(_params, function(param, paramName) {
                var paramVals;
                paramName = paramName.replace(/\-(min|max)$/, "");
                paramVals = this._formatComparisonValues(param, paramName);
                queryVals.push(paramVals);
            }.bind(this));
            return "&$where=" + encodeURI(queryVals.join(" AND ")).replace(/%20/g, "+");
        },
        select: function(param) {
            return "&$select=" + this._listVals(param);
        },
        group: function(param) {
            return "&$group=" + this._listVals(param) + "&$orderBy=" + this._listVals(_.clone(param).reverse());
        },
        _listVals: function(param) {
            var i = param.length, str = "";
            while (i--) {
                if (typeof param[i] !== "undefined") {
                    str += param[i];
                    if (i > 0) {
                        str += ",";
                    }
                }
            }
            return str;
        },
        _formatComparisonValues: function(param, paramName) {
            var paramVal, paramVals = [];
            if (param.values.length === 1) {
                if (isNaN(param.values[0]) || paramName === "msamd" || paramName === "respondent_id" || paramName === "census_tract_number") {
                    paramVal = paramName + param.comparator + '"' + param.values[0] + '"';
                } else {
                    paramVal = paramName + param.comparator + param.values[0];
                }
                return paramVal;
            } else {
                _.forEach(param.values, function(val, key) {
                    if (isNaN(val) || paramName === "msamd" || paramName === "respondent_id" || paramName === "census_tract_number") {
                        paramVals.push(paramName + param.comparator + '"' + val + '"');
                    } else {
                        paramVals.push(paramName + param.comparator + val);
                    }
                });
                return "(" + paramVals.join(" OR ") + ")";
            }
        }
    };
    query.fetch = function() {};
    pdp.query = query;
    return pdp;
}(PDP || {});

var PDP = function(pdp) {
    "use strict";
    var preview = {};
    preview.$el = $("#preview");
    preview.$downloadSize = $(".download-size");
    preview._updating = false;
    preview.nlw = {
        $el: $(".nlw"),
        count: "many"
    };
    preview.startLoading = function() {
        this.$el.addClass("loading");
        this.nlw.$el.addClass("loading");
        this.nlw.$el.find(".calculating").show();
        this.nlw.$el.find(".count").hide();
        preview.$downloadSize.addClass("hidden");
    };
    preview.stopLoading = function() {
        this.$el.removeClass("loading");
        this.nlw.$el.removeClass("loading");
        this.nlw.$el.find(".calculating").hide();
        this.nlw.$el.find(".count").show();
    };
    preview.showTable = function() {
        this.$el.slideDown(250);
        this.enableTable();
        $(".preview").removeClass("closed");
    };
    preview.hideTable = function() {
        this.$el.slideUp(250);
        $(".preview").addClass("closed");
    };
    preview.enableTable = function() {
        $(".preview .title").removeClass("disabled");
        $(".ajax-error").remove();
    };
    preview.disableTable = function() {
        var $title = $(".preview .title");
        $title.addClass("disabled");
        $("body").append('<h3 class="ajax-error">The API timed out after ' + pdp.query.secondsToWait + " seconds. :(</h3>");
        $(".ajax-error").fadeOut(5e3);
    };
    preview._lastRequestTime = new Date().getTime();
    preview._fetchPreviewJSON = function() {
        var url = pdp.query.generateApiUrl(null, true) + "&$limit=100", promise = pdp.utils.getJSON(url);
        preview._lastRequestTime = new Date().getTime();
        promise._timestamp = preview._lastRequestTime;
        return promise;
    };
    preview.update = function() {
        var promise = this._fetchPreviewJSON(), check, aborted;
        aborted = false;
        function _abort(data, textStatus) {
            aborted = true;
            preview.stopLoading();
            preview.disableTable();
        }
        preview.startLoading();
        preview.enableTable();
        preview.updateNLW();
        promise.done(function(data) {
            if (promise._timestamp < preview._lastRequestTime || aborted) {
                return;
            }
            preview.nlw.count = data.total;
            preview.updateTable(data.results);
            preview.updateNLW(0);
            preview.updateDownloadSize();
            preview.stopLoading();
        });
        promise.fail(_abort);
        check = setTimeout(function() {
            if (promise.state() !== "resolved" && promise._timestamp == preview._lastRequestTime) {
                _abort(null, "time out");
            }
        }, pdp.query.secondsToWait * 1e3);
    };
    preview.updateNLW = function(count) {
        var years = typeof pdp.query.params.as_of_year !== "undefined" ? _.clone(pdp.query.params.as_of_year.values).sort() : [ 2007, 2008, 2009, 2010, 2011, 2012 ], countFormatted = pdp.utils.commify(preview.nlw.count), areConsecutive;
        if (years.length > 1) {
            areConsecutive = _.every(years, function(val, i, arr) {
                if (i > 0) {
                    return val == +arr[i - 1] + 1;
                }
                return true;
            });
            years = areConsecutive ? years[0] + " - " + _.last(years) : years.join(", ");
        }
        preview.nlw.$el.find(".count").html(countFormatted);
        preview.nlw.$el.find(".years").html(years);
    };
    preview.updateDownloadSize = function() {
        var count = preview.nlw.count, filesize;
        if (isNaN(count) || !count) {
            preview.$downloadSize.addClass("hidden");
            return;
        }
        preview.$downloadSize.removeClass("hidden");
        filesize = pdp.utils.getPrettyFilesize(count / 100 * 6e3);
        preview.$downloadSize.find(".bytes").html(filesize);
    };
    preview.updateTable = function(data) {
        var _fields = {
            action_taken_name: "Action taken",
            agency_name: "Agency name",
            applicant_ethnicity_name: "Applicant ethnicity",
            applicant_race_name_1: "Applicant race",
            applicant_sex_name: "Applicant sex",
            census_tract_number: "Census tract",
            co_applicant_ethnicity_name: "Co-applicant ethnicity",
            co_applicant_race_name_1: "Co-applicant race",
            co_applicant_sex_name: "Co-applicant sex",
            county_name: "County",
            denial_reason_name_1: "Denial reason",
            edit_status_name: "Status",
            hoepa_status_name: "HOEPA status",
            lien_status_name: "Lien status",
            loan_purpose_name: "Loan purpose",
            loan_type_name: "Loan type",
            msamd_name: "MSA",
            owner_occupancy_name: "Owner occupancy",
            preapproval_name: "Preapproval",
            property_type_name: "Property type",
            purchaser_type_name: "Purchaser type",
            respondent_id: "Respondent ID",
            sequence_number: "Sequence number",
            state_name: "State",
            as_of_year: "Year"
        }, _keys = _.keys(_fields), _rows = [], _rowConstructor = {};
        _(_keys).forEach(function(key) {
            _rowConstructor[key] = "<em>N/A</em>";
        });
        _(data).forEach(function(row) {
            var _row = _.clone(_rowConstructor), _flattenedRow = [];
            _(row).forEach(function(entry, key) {
                if (_.include(_keys, key)) {
                    _row[key] = entry;
                }
            });
            _(_row).forEach(function(entry) {
                _flattenedRow.push(entry);
            });
            _rows.push(_flattenedRow);
        });
        preview.$el.TidyTable({}, {
            columnTitles: _.toArray(_fields),
            columnValues: _rows
        });
    };
    pdp.preview = preview;
    return pdp;
}(PDP || {});

var PDP = function(pdp) {
    "use strict";
    var table = {};
    table.$el = $("#summary-table-form");
    table.$page = $("#summary");
    table._inputs = {};
    table._inputs.all = $("*[data-summary-table-input]");
    table._inputs.varFields = [ $("#variable0"), $("#variable1"), $("#variable2") ];
    table._inputs.calculate = $("#calculate-by");
    table.genericError = "Sorry, something went awry when we tried to load your data. Please try again?";
    table.fields = [ "action_taken_name", "agency_name", "applicant_ethnicity_name", "applicant_sex_name", "applicant_race_name_1", "census_tract_number", "co_applicant_ethnicity_name", "co_applicant_race_name_1", "co_applicant_sex_name", "county_name", "denial_reason_name_1", "hoepa_status_name", "lien_status_name", "loan_purpose_name", "loan_type_name", "msamd_name", "owner_occupancy_name", "preapproval_name", "property_type_name", "purchaser_type_name", "respondent_id", "state_name", "as_of_year" ];
    table.metrics = {
        count: {
            api: "COUNT()",
            human: "Number of records"
        },
        min_applicant_income_000s: {
            api: "MIN(applicant_income_000s)",
            human: "Applicant Income Minimum"
        },
        max_applicant_income_000s: {
            api: "MAX(applicant_income_000s)",
            human: "Applicant Income Maximum"
        },
        avg_applicant_income_000s: {
            api: "AVG(applicant_income_000s)",
            human: "Applicant Income Average"
        },
        min_loan_amount_000s: {
            api: "MIN(loan_amount_000s)",
            human: "Loan Amount Minimum"
        },
        max_loan_amount_000s: {
            api: "MAX(loan_amount_000s)",
            human: "Loan Amount Maximum"
        },
        avg_loan_amount_000s: {
            api: "AVG(loan_amount_000s)",
            human: "Loan Amount Average"
        },
        sum_loan_amount_000s: {
            api: "SUM(loan_amount_000s)",
            human: "Loan Amount Sum"
        }
    };
    table.fieldVals = {
        variables: [],
        calculate: ""
    };
    table.queryParams = {};
    table.queryParams.clauses = {};
    table._lastRequestTime = "";
    table._lastTimeout = "";
    table.optionTmpl = function(field, defaultOp) {
        var def = defaultOp ? "selected" : "";
        return '<option value="' + field + '"' + def + ">" + pdp.utils.varToTitle(field) + "</option>";
    };
    table._populateOptions = function() {
        table._populateFields(table._inputs.varFields, table.fields, table.optionTmpl);
    };
    table._populateFields = function(inputs, fields, tmpl) {
        var inputsLen = inputs.length, fieldsLen = fields.length - 1, i, domField, first = true;
        while (inputsLen--) {
            domField = inputs[inputsLen];
            for (i = 0; i <= fieldsLen; i++) {
                domField.append(tmpl(fields[i]), first);
                first = false;
            }
        }
    };
    table._chosenInit = function() {
        this.$el.find("select").chosen({
            width: "100%",
            disable_search_threshold: 10
        });
    };
    table.updateFieldVals = function(e) {
        var value = e.target.value, position = e.target.id.substr(-1, 1), removedVal;
        if ($(e.target).find("option[value=" + value + "]").attr("placeholder")) {
            value = "";
        }
        if (e.target.id === "calculate-by") {
            this.fieldVals.calculate = value;
        } else {
            removedVal = this.fieldVals.variables[position];
            this.fieldVals.variables[position] = value;
            this._updateFields(value);
            if (_.indexOf(this.fieldVals.variables, removedVal) === -1) {
                this._updateFields(removedVal);
            }
        }
    };
    table._updateFields = function(value) {
        var i;
        for (i = 0; i <= 2; i++) {
            $("#variable" + i).find("option[value=" + value + "]").toggleClass("hidden").trigger("liszt:updated");
        }
    };
    table._showSpinner = function() {
        this.$page.addClass("loading");
    };
    table._removeSpinner = function() {
        this.$page.removeClass("loading");
    };
    table._requestData = function() {
        var check, responseJSON, itvl = 15;
        this._lastRequestTime = new Date().getTime();
        responseJSON = pdp.utils.getJSON(pdp.query.generateApiUrl("jsonp?$callback=", true, this.queryParams));
        responseJSON.timestamp = this._lastRequestTime;
        responseJSON.done(function(response) {
            table.cancelTimeout();
            if (responseJSON.timestamp === table._lastRequestTime) {
                if (response.computing) {
                    table._lastTimeout = setTimeout(function() {
                        table._requestData();
                    }, itvl * 1e3);
                } else {
                    table._handleApiResponse(response);
                    table._removeSpinner();
                }
            }
        });
    };
    table._mungeDollarAmts = function(respData) {
        var record, column, variable, amount, addCommas, dotIndex, amtParts, num;
        for (record in respData.results) {
            if (respData.results.hasOwnProperty(record)) {
                for (column in respData.results[record]) {
                    if (this.metrics.hasOwnProperty(column)) {
                        num = respData.results[record][column];
                        if (num === null || num === "" || isNaN(num)) {
                            respData.results[record][column] = "Data not available";
                        } else if (num < 0) {
                            respData.results[record][column] = "Data format error. A negative number was found in original data: " + num;
                        } else if (column === "count") {
                            respData.results[record][column] = pdp.utils.commify(num);
                        } else {
                            respData.results[record][column] = "$" + Math.round(num * 1e3).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                        }
                    }
                }
            }
        }
        return respData;
    };
    table._handleApiResponse = function(response) {
        this.resetTable();
        this.updateTableHeaders();
        this.populateTable(this._prepData(response));
    };
    table._prepData = function(respData) {
        respData = this._mungeDollarAmts(respData);
        return respData;
    };
    table.resetTable = function() {
        var $table = $("table#summary-table");
        $table.empty();
    };
    table.queryToVal = function(qstr) {
        var val, i;
        val = qstr.split(/\(|\)/);
        i = val.length;
        while (i--) {
            if (val[i] === "") {
                val.splice(i, 1);
            }
        }
        val = val.join("_").toLowerCase();
        return val;
    };
    table.populateTable = function(responseData) {
        var total, result, column, i, $tr, cellValue, $table = $("table#summary-table"), len = responseData.results.length - 1, clauses, clauseLen = this.queryParams.clauses.select.length;
        this._removeSpinner();
        if (!_.isEmpty(responseData.errors)) {
            this._throwFetchError();
            return;
        }
        for (i = 0; i <= len; i++) {
            $tr = $("<tr></tr>");
            for (column = 0; column < clauseLen; column++) {
                if (typeof this.queryParams.clauses.select[column] !== "undefined") {
                    cellValue = responseData.results[i][this.queryParams.clauses.select[column]];
                    if (typeof cellValue === "undefined") {
                        cellValue = responseData.results[i][this.queryToVal(this.queryParams.clauses.select[column])];
                        if (typeof cellValue === "undefined") {
                            cellValue = '<em class="not-reported">not reported</em>';
                        }
                    }
                    $tr.append("<td>" + cellValue + "</td>");
                }
            }
            $table.append($tr);
        }
    };
    table._throwFetchError = function() {
        pdp.utils.showError(this.genericError);
    };
    table.resetColumn = function(clause, position) {
        var removedVal = this.fieldVals.variables[position];
        this.fieldVals.variables[position] = null;
        this._updateFields(removedVal);
    };
    table.createTable = function() {
        $("#summary-table-container").append('<table id="summary-table"></table>');
        this.$table = $("table#summary-table");
        return this.$table;
    };
    table.updateTableHeaders = function() {
        var $table = $("table#summary-table"), $headerRow = $('<tr class="header"></tr>'), columns = this.queryParams.clauses.select.slice(0), i, val, fieldVal, len = columns.length;
        for (i = 0; i <= len; i++) {
            if (typeof columns[i] !== "undefined") {
                if (i === len - 1) {
                    fieldVal = this.queryToVal(columns[i]);
                    if (this.metrics.hasOwnProperty(fieldVal)) {
                        columns[i] = this.metrics[fieldVal].human;
                    }
                }
                $headerRow.append('<td id="' + fieldVal + '">' + pdp.utils.varToTitle(columns[i]) + "</td>");
            }
        }
        $table.prepend($headerRow);
    };
    table.cancelTimeout = function() {
        clearTimeout(this._lastTimeout);
    };
    table._buildQueryArrays = function(vals) {
        this.queryParams.clauses = {
            group: vals.variables,
            select: vals.variables.concat([ this.metrics[vals.calculate].api ]),
            where: pdp.query.params
        };
    };
    table._updateShareLink = function(vals) {
        vals = vals.variables.concat(vals.calculate);
        pdp.query.params.select = {
            comparator: "=",
            values: vals
        };
        pdp.form.updateShareLink();
    };
    table._prepFieldVals = function() {
        return {
            variables: pdp.utils.nonEmptyValues(this.fieldVals.variables),
            calculate: this.fieldVals.calculate || "count"
        };
    };
    table.setupTable = function() {
        var queryVals = this._prepFieldVals();
        this.cancelTimeout();
        this.resetTable();
        if (queryVals.variables.length > 0) {
            this._showSpinner();
            this._buildQueryArrays(queryVals);
            this._updateShareLink(queryVals);
            this._requestData();
            this.enableDownload();
        }
    };
    table._extractValuesFromUrlParams = function(vals) {
        _.each(vals, function(param, ind) {
            if (table.metrics[param]) {
                table.fieldVals.calculate = param;
            } else {
                if (_.indexOf(table.fields, param) !== -1 && _.indexOf(table.fieldVals.variables, param) === -1 && table.fieldVals.variables.length < 3) {
                    table.fieldVals.variables.push(param);
                }
            }
        });
    };
    table._updateSummaryFields = function() {
        var i, val;
        for (i = 0; i < 3; i++) {
            if (table.fieldVals.variables[i]) {
                val = table.fieldVals.variables[i];
                table._inputs.varFields[i].val(val).trigger("liszt:updated");
                table._updateFields(val);
            }
        }
        if (table.fieldVals.calculate) {
            table._inputs.calculate.val(table.fieldVals.calculate).trigger("liszt:updated");
        }
    };
    table._updateSummaryFieldsUI = function() {
        var reset_fields, num = table.fieldVals.variables.length;
        if (num > 1) {
            reset_fields = num === 2 ? $("#reset-variable1") : $("#reset-variable1, #reset-variable2");
            reset_fields.removeClass("hidden");
        } else {
            $("#variable2").attr("disabled", "disabled").trigger("liszt:updated");
        }
    };
    table.showTableFromUrlParams = function(params) {
        this._extractValuesFromUrlParams(params);
        this._updateSummaryFields();
        this._updateSummaryFieldsUI();
        this.setupTable();
    };
    table.init = function() {
        var selectParams;
        table._populateOptions();
        table._chosenInit();
        table.createTable();
        table.disableDownload();
        selectParams = (pdp.query.params.select || {}).values || [];
        if (selectParams.length > 0) {
            table.showTableFromUrlParams(selectParams);
        } else {
            $("#variable1, #variable2, #calculate-by").attr("disabled", "disabled").trigger("liszt:updated");
        }
        this._inputs.all.on("change", function(e) {
            this.updateFieldVals(e);
            if (e.target.id !== "calculate-by") {
                var position = e.target.id.substr(-1, 1);
                $("#calculate-by, #variable".concat(++position)).removeAttr("disabled").trigger("liszt:updated");
                if (position > 0) {
                    $("#reset-" + e.target.id).removeClass("hidden");
                }
            }
        }.bind(this));
        $(".reset-field").on("click", function(e) {
            e.preventDefault();
            var position = e.target.id.substr(-1, 1), clause = e.target.getAttribute("data-summary-table-input");
            this.resetColumn(clause, position);
            $(e.target).addClass("hidden");
            $("#variable" + position).find("option:first-child").prop("selected", true).end().trigger("liszt:updated");
            $("#variable".concat(++position)).attr("disabled", "disabled").trigger("liszt:updated");
        }.bind(this));
        $("#summary-submit").on("click", function(e) {
            e.preventDefault();
            this.setupTable();
        }.bind(this));
    };
    table.disableDownload = function() {
        var $el = $("#download-summary");
        $el.addClass("disabled").find("select, input").attr("disabled", "disabled");
    };
    table.enableDownload = function() {
        var $el = $("#download-summary");
        $el.removeClass("disabled").find("select, input").removeAttr("disabled");
    };
    pdp.summaryTable = table;
    return pdp;
}(PDP || {});

var PDP = function(pdp) {
    "use strict";
    var form = {};
    form.$el = $("form");
    form.maxNumLocations = 15;
    form.init = function() {
        this.$fields = form.$el.find(".field");
    };
    form.clip = new ZeroClipboard($(".share.btn"), {
        moviePath: "static/js/zeroclipboard/ZeroClipboard.swf"
    });
    form.clip.on("complete", function(client, args) {
        $(".share_url").tooltip("show");
        $(".share_url").select();
        setTimeout(function() {
            $(".share_url").tooltip("hide");
        }, 3e3);
    });
    form.hideIntroExplanation = function() {
        $(".intro .explanation").hide();
    };
    form.showFilter = function(el) {
        var $el = $(el), $fields = $el.find(".fields"), height = Math.max($fields.show().height(), 10);
        $fields.hide().css("height", 0);
        $fields.show().animate({
            height: height
        }, 150, "swing", function() {
            $(this).css("height", "auto");
        });
        $el.removeClass("closed").attr("title", "");
        pdp.observer.emitEvent("filter:shown", el);
    };
    form.hideFilter = function(el) {
        $(el).addClass("closed").attr("title", "Show this filter section").find(".fields").slideUp(200);
        pdp.observer.emitEvent("filter:hidden", el);
    };
    form.checkFilters = function() {
        pdp.form.$fields.each(function() {
            var $el = $(this), $parentFilter = $(this).parents(".filter.closed");
            if (pdp.form.hasValue($el) && $parentFilter.length > 0) {
                pdp.form.showFilter($parentFilter);
            }
        });
        $(".field.optional").each(function() {
            if (pdp.form.hasValue($(this))) {
                pdp.form.toggleOptional($(this).data("optional"), "show");
            }
        });
    };
    form.checkLocations = function() {
        var currentLocations = 0, totalLocations = 1, currentNum = [];
        _.forEach(_.keys(pdp.query.params), function(param) {
            currentNum = param.match(/(state_code|msamd)\-(\d+)$/);
            if (currentNum && currentNum.length > 0) {
                totalLocations = Math.max(currentNum[2], totalLocations);
            }
        });
        while (currentLocations < totalLocations) {
            currentLocations++;
            form.addState(currentLocations);
        }
    };
    form.hasValue = function($el) {
        var $els = $el.find("select, input");
        if ($els.prop("tagName").toLowerCase() === "select" || $els.attr("type") === "text") {
            if ($els.val()) {
                return $els.val().length > 0;
            }
        } else if ($els.attr("type") === ("checkbox" || "radio")) {
            var any = _.some($els, function(e) {
                return $(e).prop("checked");
            });
            return any;
        }
        return false;
    };
    form.getField = function($el) {
        var tagName = $el.prop("tagName").toLowerCase(), type = $el.attr("type"), name = $el.attr("name") || undefined, value = $el.val() && $el.val().indexOf(",") !== -1 ? $el.val().replace(",", "") : $el.val(), field = {}, comparator = "=";
        if (!(tagName || type) || !value) {
            return false;
        }
        if (type === "radio" || type === "checkbox") {
            if (!$el.is(":checked")) {
                return false;
            } else {
                name = name.replace("[]", "");
            }
        }
        field = {
            name: name,
            tagName: tagName,
            type: type,
            values: value instanceof Array ? value : [ value ],
            comparator: _.isEmpty($el.data("comparator")) ? "=" : $el.data("comparator")
        };
        return field;
    };
    form.getFields = function() {
        var fields = [], $fields = pdp.app.$el.find(".param");
        $fields.each(function() {
            var $this = $(this), field = pdp.form.getField($this);
            if (field) {
                fields.push(field);
            }
        });
        return fields;
    };
    form.setField = function(name) {
        var params = pdp.query.params, field = params[name];
        _.forEach(field.values, function(val) {
            $("input[name=" + name + '][value="' + val + '"]').prop("checked", true);
            $("input[name=" + name + '\\[\\]][value="' + val + '"]').prop("checked", true);
        });
        $("select[name=" + name + "]").val(field.values).trigger("liszt:updated");
        if (params[name].comparator !== "=") {
            $("input[type=text][name=" + name + '][data-comparator="' + params[name].comparator + '"]').val(field.values[0]);
        } else {
            $("input[type=text][name=" + name + "]").val(field.values[0]);
        }
    };
    form.setFields = function(options) {
        var opts = options || {}, params = _.keys(pdp.query.params);
        function emptyOptions(field, param) {
            $("input").prop("checked", false);
            $("select").val("").trigger("liszt:updated");
        }
        _.forEach(params, opts.empty ? emptyOptions : this.setField);
    };
    form.updateFieldOptions = function(el, dependencies) {
        if ($(el).find("select").length < 1) {
            return false;
        }
        if ($(el).find(".spinning").length < 1) {
            $(el).append(PDP.templates.spinner);
        }
        $(el).find(".spinning").show();
        pdp.observer.emitEvent("update:started");
        this.resetField(el);
        var concept = $(el).find("select").data("concept") || $(el).find("select").attr("id"), id = $(el).find("select").attr("id"), conceptProperty = $(el).find("select").data("concept-property") || $(el).find("select").attr("id"), conceptFetch = this.fetchFieldOptions(concept, dependencies);
        conceptFetch.done(function(data) {
            var options, dependency = $("[data-dependent~=" + id + "]").attr("id").replace(/\-[\w^_]+$/, "");
            function filterDeps(obj) {
                return _.contains(dependencies, obj[dependency]);
            }
            function mapDeps(obj) {
                return {
                    label: obj[conceptProperty.replace(/\-[\w^_]+$/, "")],
                    value: obj._id
                };
            }
            function mapCensus(obj) {
                return {
                    label: obj.census_tract_number,
                    value: obj.census_tract_number
                };
            }
            function sortDeps(obj) {
                return obj.label;
            }
            function cleanCounties(obj) {
                if (concept === "fips") {
                    return {
                        label: obj.label,
                        value: obj.value.toString().substr(2, 100)
                    };
                }
                return obj;
            }
            if (typeof data.table !== "undefined") {
                options = _(data.table.data).filter(filterDeps).map(mapDeps).map(cleanCounties).sortBy(sortDeps).value();
                this.setFieldOptions(el, options);
                pdp.observer.emitEvent("field:updated");
            }
            if (typeof data.results !== "undefined") {
                options = _(data.results).map(mapCensus).sortBy(sortDeps).uniq(true, "value").value();
                this.setFieldOptions(el, options);
                pdp.observer.emitEvent("field:updated");
            }
            pdp.observer.emitEvent("update:stopped");
            $(el).find(".spinning").hide();
        }.bind(this));
    };
    form.setFieldOptions = function(el, options) {
        var dropdown = $(el).find("select"), template = PDP.templates.option;
        _.forEach(options, function(option) {
            dropdown.append(template(option));
        });
        dropdown.trigger("liszt:updated");
    };
    form.fetchFieldOptions = function(concept, dependencies) {
        var promise;
        switch (concept) {
          case "fips":
            promise = pdp.utils.getJSON("static/js/static_data/concept/fips.json");
            break;

          case "census_tract_number":
            promise = pdp.utils.getJSON(pdp.query.endpoint + "slice/census_tracts." + pdp.query.format + "?&$where=state_code=" + dependencies[0] + "&$limit=1000");
            break;

          default:
            promise = pdp.utils.getJSON(pdp.query.endpoint + "concept/" + concept + "." + pdp.query.format + "?");
        }
        return promise;
    };
    form.resetField = function(el) {
        $(el).find("option").remove();
        $(el).find("select").trigger("liszt:updated");
    };
    form.resetFields = function() {
        var $fields = pdp.app.$el.find(".param");
        $fields.each(function() {
            var param = $(this).attr("name").replace(/\[\]/g, "\\[\\]");
            $("input[type=radio][name=" + param + "]").prop("checked", false);
            $("input[type=checkbox][name=" + param + "]").prop("checked", false);
            $("input[type=text][name=" + param + "]").val("");
            $("select[name=" + param + "]").val("").trigger("liszt:updated");
            form.checkMutuallyExclusive(param);
        });
    };
    form.disableField = function(el) {
        var $el = $(el), $select = $el.find("select"), placeholder;
        $el.addClass("disabled").find("select, input").attr("disabled", "disabled");
        if (!_.isEmpty($select)) {
            placeholder = $select.data("pre-placeholder");
            $select.attr("data-placeholder", placeholder).trigger("liszt:updated");
        }
        return el;
    };
    form.enableField = function(el) {
        var $el = $(el), $select = $el.find("select"), placeholder;
        $el.removeClass("disabled").find("select, input").removeAttr("disabled").trigger("liszt:updated");
        if (!_.isEmpty($select)) {
            placeholder = $select.data("post-placeholder");
            $select.attr("data-placeholder", placeholder).trigger("liszt:updated");
        }
        return el;
    };
    form.hideField = function(el) {
        $(el).addClass("hidden");
        return el;
    };
    form.showField = function(el) {
        $(el).removeClass("hidden");
        return el;
    };
    form.checkDeps = function(names) {
        names = names instanceof Array ? names : [ names ];
        function emit(activity, el, dependencies) {
            pdp.observer.emitEvent("field:" + activity, [ el, dependencies ]);
        }
        _.forEach(names, function(name) {
            var $el = $("#" + name), dependents = $el.attr("data-dependent"), $dependents;
            if (dependents) {
                dependents = dependents.split(" ").join(", #");
                $dependents = $("#" + dependents).parents(".field");
                if ($el.val()) {
                    _.forEach($dependents, function($dependent) {
                        var dependencies = form.getField($el).values;
                        emit("shown", $dependent, dependencies);
                    });
                } else {
                    _.forEach($dependents, function($dependent) {
                        emit("hidden", $dependent, $el.attr("id"));
                    });
                }
            }
        });
    };
    form.checkMutuallyExclusive = function(names) {
        names = names instanceof Array ? names : [ names ];
        _.forEach(names, function(name) {
            var $el = $("#" + name), $partner = $(".field." + $el.data("toggle"));
            if ($partner.length > 0 && $el.val() && $el.val().length > 0) {
                form.disableField($partner);
            } else {
                form.enableField($partner);
            }
        });
    };
    form.addState = function(num) {
        var template = PDP.templates.location;
        $("#location-sets").append(template({
            num: num
        })).find(".help").tooltip({
            placement: "left"
        });
        $(".location-set-" + num).find("select").chosen({
            width: "100%",
            disable_search_threshold: 10,
            allow_single_deselect: true
        });
    };
    form.toggleOptional = function(name, action) {
        if (action === "hide") {
            $("." + name).addClass("hidden");
        } else {
            $("." + name).removeClass("hidden");
            $(".include_" + name + " input[value=1]").prop("checked", true);
        }
    };
    form.updateShareLink = function() {
        var hash = pdp.query.generateUrlHash(), baseUrl = window.location.href.replace(/#.*/, "");
        $(".share_url").val(baseUrl + "#" + hash);
    };
    pdp.form = form;
    return pdp;
}(PDP || {});

var PDP = function(pdp) {
    "use strict";
    var app = {};
    window.onhashchange = function() {
        app.changeSection(app.getUrlValue("section"), false);
    };
    app.$el = $("#filters");
    app.currentSection = "filters";
    app.init = function() {
        var hashParams = pdp.utils.getHashParams();
        app.$el.find("select").chosen({
            width: "100%",
            disable_search_threshold: 10,
            allow_single_deselect: true
        });
        $(".chzn-container .search-field input").css("width", "105%");
        app.$el.find(".help").tooltip({
            placement: "left"
        });
        app.$el.find(".share_url").tooltip({
            title: "Copied to clipboard!",
            trigger: "manual"
        });
        if (!_.isEmpty(hashParams)) {
            pdp.query.updateAll({
                source: "url"
            });
            pdp.form.hideIntroExplanation();
        } else {
            pdp.query.reset({
                defaults: true
            });
        }
        this.$el.addClass("ready");
        pdp.observer.emitEvent("app:ready");
    };
    app.start = function() {
        var parents, toggles;
        pdp.form.checkLocations();
        pdp.form.init();
        pdp.form.setFields();
        parents = _.map($("select[data-dependent], input[data-dependent]"), function(el) {
            return $(el).attr("id");
        });
        pdp.form.checkDeps(parents);
        toggles = _.map($("select[data-toggle], input[data-toggle]"), function(el) {
            return $(el).attr("id");
        });
        pdp.form.checkMutuallyExclusive(toggles);
        pdp.form.checkFilters();
        $("#preview").hide();
        app.changeSection(app.currentSection, false);
        pdp.observer.emitEvent("app:started");
    };
    app.startLoading = function() {
        this.$el.addClass("loading");
    };
    app.stopLoading = function() {
        this.$el.removeClass("loading");
    };
    app.redirect = function(url) {
        window.location.href = url;
    };
    app.getUrlValue = function(name) {
        var param, params = pdp.utils.getHashParams();
        if (name === "section") {
            return typeof params.section !== "undefined" ? params.section.values : "filters";
        }
        param = {
            name: name,
            value: params[name].values,
            comparator: params[name].comparator
        };
        return param;
    };
    app.getUrlValues = function() {
        var _params = [], params = pdp.utils.getHashParams();
        function buildParam(val, name) {
            var _param = {}, _values = [], values = val.values.split(",");
            if (name === "section") {
                app.currentSection = values;
                return;
            }
            _.forEach(values, function(value) {
                _values.push(value);
            });
            _param = {
                name: name,
                values: _values,
                comparator: val.comparator
            };
            _params.push(_param);
        }
        _.forEach(params, buildParam);
        return _params;
    };
    app.changeSection = function(section, changeUrl) {
        section = section || this.currentSection;
        changeUrl = typeof changeUrl === "undefined" ? true : changeUrl;
        if (!$("#" + section).length) {
            return;
        }
        $(".app-section").addClass("hidden");
        $("nav a.section-toggle ").removeClass("active");
        $("#" + section).removeClass("hidden");
        $("nav a[href=#" + section + "].section-toggle").addClass("active");
        this.currentSection = section;
        pdp.form.setFields();
        pdp.form.checkFilters();
        if (changeUrl) {
            window.location.hash = PDP.query.generateUrlHash();
        }
        if (this.currentSection === "summary") {
            pdp.summaryTable.setupTable();
        } else {
            pdp.summaryTable.cancelTimeout();
        }
    };
    pdp.app = app;
    return pdp;
}(PDP || {});

var PDP = function(pdp) {
    "use strict";
    pdp.observer.addListeners({
        "dom:loaded": [ pdp.app.init.bind(pdp.app) ],
        "app:ready": [ pdp.app.start.bind(pdp.app), pdp.app.stopLoading.bind(pdp.app), pdp.summaryTable.init.bind(pdp.summaryTable) ],
        "app:started": [ pdp.form.updateShareLink.bind(pdp.form), pdp.preview.update.bind(pdp.preview), pdp.form.updateFieldOptions.bind(pdp.form) ],
        "field:changed": [ pdp.query.updateAll.bind(pdp.query), pdp.form.checkDeps.bind(pdp.form), pdp.form.checkMutuallyExclusive.bind(pdp.form), pdp.form.updateShareLink.bind(pdp.form) ],
        "navigation:clicked": [ pdp.app.changeSection.bind(pdp.app), pdp.form.updateShareLink.bind(pdp.form) ],
        "params:updated": [ pdp.preview.update.bind(pdp.preview) ],
        "field:shown": [ pdp.form.showField.bind(pdp.form), pdp.form.enableField.bind(pdp.form), pdp.form.updateFieldOptions.bind(pdp.form) ],
        "field:hidden": [ pdp.form.resetField.bind(pdp.form), pdp.form.disableField.bind(pdp.form), pdp.form.hideField.bind(pdp.form) ],
        "field:updated": [ pdp.form.setFields.bind(pdp.form) ],
        "update:started": pdp.app.startLoading.bind(pdp.app),
        "update:stopped": pdp.app.stopLoading.bind(pdp.app),
        download: pdp.app.redirect.bind(pdp.app)
    });
    return pdp;
}(PDP || {});
