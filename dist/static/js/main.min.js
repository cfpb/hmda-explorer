/*!                                      
            /$$$$$$          /$$        
           /$$__  $$        | $$        
  /$$$$$$$| $$  \__//$$$$$$ | $$$$$$$  
 /$$_____/| $$$$   /$$__  $$| $$__  $$  
| $$      | $$_/  | $$  \ $$| $$  \ $$
| $$      | $$    | $$  | $$| $$  | $$  
|  $$$$$$$| $$    | $$$$$$$/| $$$$$$$/  
 \_______/|__/    | $$____/ |_______/  
                  | $$                  
                  | $$                  
                  |__/                  

* public-data-platform-static - v0.13.0 - 2013-09-06
* http://consumerfinance.gov
* Copyright (c) 2013 Consumer Financial Protection Bureau; Licensed Public, Domain */

 /* ===========================================================
 * bootstrap-tooltip.js v2.3.2
 * http://twitter.github.com/bootstrap/javascript.html#tooltips
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ===========================================================
 * Copyright 2012 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================== */

/*!
 * jQuery JavaScript Library v1.10.2
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-07-03T13:48Z
 */

/**
 * @license
 * Lo-Dash 1.3.1 <http://lodash.com/>
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.4.4 <http://underscorejs.org/>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud Inc.
 * Available under MIT license <http://lodash.com/license>
 */

/**
Copyright (c) Nicolas Gallagher and Jonathan Neal

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


Copyright (c) 2012-2013 Kit Cambridge.
http://kitcambridge.be/

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

Chosen
- by Patrick Filler for [Harvest](http://getharvest.com)
- Copyright (c) 2011-2013 by Harvest

Available for use under the [MIT License](http://en.wikipedia.org/wiki/MIT_License)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

 */(function(window) {
    var getClass = {}.toString, isProperty, forEach, undef;
    var isLoader = typeof define === "function" && define.amd, JSON3 = typeof exports == "object" && exports;
    if (JSON3 || isLoader) {
        if (typeof JSON == "object" && JSON) {
            if (JSON3) {
                JSON3.stringify = JSON.stringify;
                JSON3.parse = JSON.parse;
            } else {
                JSON3 = JSON;
            }
        } else if (isLoader) {
            JSON3 = window.JSON = {};
        }
    } else {
        JSON3 = window.JSON || (window.JSON = {});
    }
    var isExtended = new Date(-0xc782b5b800cec);
    try {
        isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 && isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
    } catch (exception) {}
    function has(name) {
        if (name == "bug-string-char-index") {
            return "a"[0] != "a";
        }
        var value, serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}', isAll = name == "json";
        if (isAll || name == "json-stringify" || name == "json-parse") {
            if (name == "json-stringify" || isAll) {
                var stringify = JSON3.stringify, stringifySupported = typeof stringify == "function" && isExtended;
                if (stringifySupported) {
                    (value = function() {
                        return 1;
                    }).toJSON = value;
                    try {
                        stringifySupported = stringify(0) === "0" && stringify(new Number()) === "0" && stringify(new String()) == '""' && stringify(getClass) === undef && stringify(undef) === undef && stringify() === undef && stringify(value) === "1" && stringify([ value ]) == "[1]" && stringify([ undef ]) == "[null]" && stringify(null) == "null" && stringify([ undef, getClass, null ]) == "[null,null,null]" && stringify({
                            a: [ value, true, false, null, "\0\b\n\f\r	" ]
                        }) == serialized && stringify(null, value) === "1" && stringify([ 1, 2 ], null, 1) == "[\n 1,\n 2\n]" && stringify(new Date(-864e13)) == '"-271821-04-20T00:00:00.000Z"' && stringify(new Date(864e13)) == '"+275760-09-13T00:00:00.000Z"' && stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' && stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
                    } catch (exception) {
                        stringifySupported = false;
                    }
                }
                if (!isAll) {
                    return stringifySupported;
                }
            }
            if (name == "json-parse" || isAll) {
                var parse = JSON3.parse;
                if (typeof parse == "function") {
                    try {
                        if (parse("0") === 0 && !parse(false)) {
                            value = parse(serialized);
                            var parseSupported = value["a"].length == 5 && value["a"][0] === 1;
                            if (parseSupported) {
                                try {
                                    parseSupported = !parse('"	"');
                                } catch (exception) {}
                                if (parseSupported) {
                                    try {
                                        parseSupported = parse("01") !== 1;
                                    } catch (exception) {}
                                }
                            }
                        }
                    } catch (exception) {
                        parseSupported = false;
                    }
                }
                if (!isAll) {
                    return parseSupported;
                }
            }
            return stringifySupported && parseSupported;
        }
    }
    if (!has("json")) {
        var functionClass = "[object Function]";
        var dateClass = "[object Date]";
        var numberClass = "[object Number]";
        var stringClass = "[object String]";
        var arrayClass = "[object Array]";
        var booleanClass = "[object Boolean]";
        var charIndexBuggy = has("bug-string-char-index");
        if (!isExtended) {
            var floor = Math.floor;
            var Months = [ 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334 ];
            var getDay = function(year, month) {
                return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
            };
        }
        if (!(isProperty = {}.hasOwnProperty)) {
            isProperty = function(property) {
                var members = {}, constructor;
                if ((members.__proto__ = null, members.__proto__ = {
                    toString: 1
                }, members).toString != getClass) {
                    isProperty = function(property) {
                        var original = this.__proto__, result = property in (this.__proto__ = null, this);
                        this.__proto__ = original;
                        return result;
                    };
                } else {
                    constructor = members.constructor;
                    isProperty = function(property) {
                        var parent = (this.constructor || constructor).prototype;
                        return property in this && !(property in parent && this[property] === parent[property]);
                    };
                }
                members = null;
                return isProperty.call(this, property);
            };
        }
        forEach = function(object, callback) {
            var size = 0, Properties, members, property, forEach;
            (Properties = function() {
                this.valueOf = 0;
            }).prototype.valueOf = 0;
            members = new Properties();
            for (property in members) {
                if (isProperty.call(members, property)) {
                    size++;
                }
            }
            Properties = members = null;
            if (!size) {
                members = [ "valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor" ];
                forEach = function(object, callback) {
                    var isFunction = getClass.call(object) == functionClass, property, length;
                    for (property in object) {
                        if (!(isFunction && property == "prototype") && isProperty.call(object, property)) {
                            callback(property);
                        }
                    }
                    for (length = members.length; property = members[--length]; isProperty.call(object, property) && callback(property)) ;
                };
            } else if (size == 2) {
                forEach = function(object, callback) {
                    var members = {}, isFunction = getClass.call(object) == functionClass, property;
                    for (property in object) {
                        if (!(isFunction && property == "prototype") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
                            callback(property);
                        }
                    }
                };
            } else {
                forEach = function(object, callback) {
                    var isFunction = getClass.call(object) == functionClass, property, isConstructor;
                    for (property in object) {
                        if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
                            callback(property);
                        }
                    }
                    if (isConstructor || isProperty.call(object, property = "constructor")) {
                        callback(property);
                    }
                };
            }
            return forEach(object, callback);
        };
        if (!has("json-stringify")) {
            var Escapes = {
                92: "\\\\",
                34: '\\"',
                8: "\\b",
                12: "\\f",
                10: "\\n",
                13: "\\r",
                9: "\\t"
            };
            var leadingZeroes = "000000";
            var toPaddedString = function(width, value) {
                return (leadingZeroes + (value || 0)).slice(-width);
            };
            var unicodePrefix = "\\u00";
            var quote = function(value) {
                var result = '"', index = 0, length = value.length, isLarge = length > 10 && charIndexBuggy, symbols;
                if (isLarge) {
                    symbols = value.split("");
                }
                for (;index < length; index++) {
                    var charCode = value.charCodeAt(index);
                    switch (charCode) {
                      case 8:
                      case 9:
                      case 10:
                      case 12:
                      case 13:
                      case 34:
                      case 92:
                        result += Escapes[charCode];
                        break;

                      default:
                        if (charCode < 32) {
                            result += unicodePrefix + toPaddedString(2, charCode.toString(16));
                            break;
                        }
                        result += isLarge ? symbols[index] : charIndexBuggy ? value.charAt(index) : value[index];
                    }
                }
                return result + '"';
            };
            var serialize = function(property, object, callback, properties, whitespace, indentation, stack) {
                var value = object[property], className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, hasMembers, result;
                try {
                    value = object[property];
                } catch (exception) {}
                if (typeof value == "object" && value) {
                    className = getClass.call(value);
                    if (className == dateClass && !isProperty.call(value, "toJSON")) {
                        if (value > -1 / 0 && value < 1 / 0) {
                            if (getDay) {
                                date = floor(value / 864e5);
                                for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++) ;
                                for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++) ;
                                date = 1 + date - getDay(year, month);
                                time = (value % 864e5 + 864e5) % 864e5;
                                hours = floor(time / 36e5) % 24;
                                minutes = floor(time / 6e4) % 60;
                                seconds = floor(time / 1e3) % 60;
                                milliseconds = time % 1e3;
                            } else {
                                year = value.getUTCFullYear();
                                month = value.getUTCMonth();
                                date = value.getUTCDate();
                                hours = value.getUTCHours();
                                minutes = value.getUTCMinutes();
                                seconds = value.getUTCSeconds();
                                milliseconds = value.getUTCMilliseconds();
                            }
                            value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) + "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) + "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) + "." + toPaddedString(3, milliseconds) + "Z";
                        } else {
                            value = null;
                        }
                    } else if (typeof value.toJSON == "function" && (className != numberClass && className != stringClass && className != arrayClass || isProperty.call(value, "toJSON"))) {
                        value = value.toJSON(property);
                    }
                }
                if (callback) {
                    value = callback.call(object, property, value);
                }
                if (value === null) {
                    return "null";
                }
                className = getClass.call(value);
                if (className == booleanClass) {
                    return "" + value;
                } else if (className == numberClass) {
                    return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
                } else if (className == stringClass) {
                    return quote(value);
                }
                if (typeof value == "object") {
                    for (length = stack.length; length--; ) {
                        if (stack[length] === value) {
                            throw TypeError();
                        }
                    }
                    stack.push(value);
                    results = [];
                    prefix = indentation;
                    indentation += whitespace;
                    if (className == arrayClass) {
                        for (index = 0, length = value.length; index < length; hasMembers || (hasMembers = true), 
                        index++) {
                            element = serialize(index, value, callback, properties, whitespace, indentation, stack);
                            results.push(element === undef ? "null" : element);
                        }
                        result = hasMembers ? whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : "[" + results.join(",") + "]" : "[]";
                    } else {
                        forEach(properties || value, function(property) {
                            var element = serialize(property, value, callback, properties, whitespace, indentation, stack);
                            if (element !== undef) {
                                results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
                            }
                            hasMembers || (hasMembers = true);
                        });
                        result = hasMembers ? whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : "{" + results.join(",") + "}" : "{}";
                    }
                    stack.pop();
                    return result;
                }
            };
            JSON3.stringify = function(source, filter, width) {
                var whitespace, callback, properties;
                if (typeof filter == "function" || typeof filter == "object" && filter) {
                    if (getClass.call(filter) == functionClass) {
                        callback = filter;
                    } else if (getClass.call(filter) == arrayClass) {
                        properties = {};
                        for (var index = 0, length = filter.length, value; index < length; value = filter[index++], 
                        (getClass.call(value) == stringClass || getClass.call(value) == numberClass) && (properties[value] = 1)) ;
                    }
                }
                if (width) {
                    if (getClass.call(width) == numberClass) {
                        if ((width -= width % 1) > 0) {
                            for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ") ;
                        }
                    } else if (getClass.call(width) == stringClass) {
                        whitespace = width.length <= 10 ? width : width.slice(0, 10);
                    }
                }
                return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
            };
        }
        if (!has("json-parse")) {
            var fromCharCode = String.fromCharCode;
            var Unescapes = {
                92: "\\",
                34: '"',
                47: "/",
                98: "\b",
                116: "	",
                110: "\n",
                102: "\f",
                114: "\r"
            };
            var Index, Source;
            var abort = function() {
                Index = Source = null;
                throw SyntaxError();
            };
            var lex = function() {
                var source = Source, length = source.length, value, begin, position, isSigned, charCode;
                while (Index < length) {
                    charCode = source.charCodeAt(Index);
                    switch (charCode) {
                      case 9:
                      case 10:
                      case 13:
                      case 32:
                        Index++;
                        break;

                      case 123:
                      case 125:
                      case 91:
                      case 93:
                      case 58:
                      case 44:
                        value = charIndexBuggy ? source.charAt(Index) : source[Index];
                        Index++;
                        return value;

                      case 34:
                        for (value = "@", Index++; Index < length; ) {
                            charCode = source.charCodeAt(Index);
                            if (charCode < 32) {
                                abort();
                            } else if (charCode == 92) {
                                charCode = source.charCodeAt(++Index);
                                switch (charCode) {
                                  case 92:
                                  case 34:
                                  case 47:
                                  case 98:
                                  case 116:
                                  case 110:
                                  case 102:
                                  case 114:
                                    value += Unescapes[charCode];
                                    Index++;
                                    break;

                                  case 117:
                                    begin = ++Index;
                                    for (position = Index + 4; Index < position; Index++) {
                                        charCode = source.charCodeAt(Index);
                                        if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
                                            abort();
                                        }
                                    }
                                    value += fromCharCode("0x" + source.slice(begin, Index));
                                    break;

                                  default:
                                    abort();
                                }
                            } else {
                                if (charCode == 34) {
                                    break;
                                }
                                charCode = source.charCodeAt(Index);
                                begin = Index;
                                while (charCode >= 32 && charCode != 92 && charCode != 34) {
                                    charCode = source.charCodeAt(++Index);
                                }
                                value += source.slice(begin, Index);
                            }
                        }
                        if (source.charCodeAt(Index) == 34) {
                            Index++;
                            return value;
                        }
                        abort();

                      default:
                        begin = Index;
                        if (charCode == 45) {
                            isSigned = true;
                            charCode = source.charCodeAt(++Index);
                        }
                        if (charCode >= 48 && charCode <= 57) {
                            if (charCode == 48 && (charCode = source.charCodeAt(Index + 1), charCode >= 48 && charCode <= 57)) {
                                abort();
                            }
                            isSigned = false;
                            for (;Index < length && (charCode = source.charCodeAt(Index), charCode >= 48 && charCode <= 57); Index++) ;
                            if (source.charCodeAt(Index) == 46) {
                                position = ++Index;
                                for (;position < length && (charCode = source.charCodeAt(position), charCode >= 48 && charCode <= 57); position++) ;
                                if (position == Index) {
                                    abort();
                                }
                                Index = position;
                            }
                            charCode = source.charCodeAt(Index);
                            if (charCode == 101 || charCode == 69) {
                                charCode = source.charCodeAt(++Index);
                                if (charCode == 43 || charCode == 45) {
                                    Index++;
                                }
                                for (position = Index; position < length && (charCode = source.charCodeAt(position), 
                                charCode >= 48 && charCode <= 57); position++) ;
                                if (position == Index) {
                                    abort();
                                }
                                Index = position;
                            }
                            return +source.slice(begin, Index);
                        }
                        if (isSigned) {
                            abort();
                        }
                        if (source.slice(Index, Index + 4) == "true") {
                            Index += 4;
                            return true;
                        } else if (source.slice(Index, Index + 5) == "false") {
                            Index += 5;
                            return false;
                        } else if (source.slice(Index, Index + 4) == "null") {
                            Index += 4;
                            return null;
                        }
                        abort();
                    }
                }
                return "$";
            };
            var get = function(value) {
                var results, hasMembers;
                if (value == "$") {
                    abort();
                }
                if (typeof value == "string") {
                    if (value[0] == "@") {
                        return value.slice(1);
                    }
                    if (value == "[") {
                        results = [];
                        for (;;hasMembers || (hasMembers = true)) {
                            value = lex();
                            if (value == "]") {
                                break;
                            }
                            if (hasMembers) {
                                if (value == ",") {
                                    value = lex();
                                    if (value == "]") {
                                        abort();
                                    }
                                } else {
                                    abort();
                                }
                            }
                            if (value == ",") {
                                abort();
                            }
                            results.push(get(value));
                        }
                        return results;
                    } else if (value == "{") {
                        results = {};
                        for (;;hasMembers || (hasMembers = true)) {
                            value = lex();
                            if (value == "}") {
                                break;
                            }
                            if (hasMembers) {
                                if (value == ",") {
                                    value = lex();
                                    if (value == "}") {
                                        abort();
                                    }
                                } else {
                                    abort();
                                }
                            }
                            if (value == "," || typeof value != "string" || value[0] != "@" || lex() != ":") {
                                abort();
                            }
                            results[value.slice(1)] = get(lex());
                        }
                        return results;
                    }
                    abort();
                }
                return value;
            };
            var update = function(source, property, callback) {
                var element = walk(source, property, callback);
                if (element === undef) {
                    delete source[property];
                } else {
                    source[property] = element;
                }
            };
            var walk = function(source, property, callback) {
                var value = source[property], length;
                if (typeof value == "object" && value) {
                    if (getClass.call(value) == arrayClass) {
                        for (length = value.length; length--; ) {
                            update(value, length, callback);
                        }
                    } else {
                        forEach(value, function(property) {
                            update(value, property, callback);
                        });
                    }
                }
                return callback.call(source, property, value);
            };
            JSON3.parse = function(source, callback) {
                var result, value;
                Index = 0;
                Source = "" + source;
                result = get(lex());
                if (lex() != "$") {
                    abort();
                }
                Index = Source = null;
                return callback && getClass.call(callback) == functionClass ? walk((value = {}, 
                value[""] = result, value), "", callback) : result;
            };
        }
    }
    if (isLoader) {
        define(function() {
            return JSON3;
        });
    }
})(this);

(function(window) {
    var undefined;
    var arrayPool = [], objectPool = [];
    var idCounter = 0;
    var indicatorObject = {};
    var keyPrefix = +new Date() + "";
    var largeArraySize = 75;
    var maxPoolSize = 40;
    var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g;
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    var reFlags = /\w*$/;
    var reInterpolate = /<%=([\s\S]+?)%>/g;
    var reThis = (reThis = /\bthis\b/) && reThis.test(runInContext) && reThis;
    var whitespace = " 	\f ﻿" + "\n\r\u2028\u2029" + " ᠎             　";
    var reLeadingSpacesAndZeros = RegExp("^[" + whitespace + "]*0+(?=.$)");
    var reNoMatch = /($^)/;
    var reUnescapedHtml = /[&<>"']/g;
    var reUnescapedString = /['\n\r\t\u2028\u2029\\]/g;
    var contextProps = [ "Array", "Boolean", "Date", "Error", "Function", "Math", "Number", "Object", "RegExp", "String", "_", "attachEvent", "clearTimeout", "isFinite", "isNaN", "parseInt", "setImmediate", "setTimeout" ];
    var shadowedProps = [ "constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf" ];
    var templateCounter = 0;
    var argsClass = "[object Arguments]", arrayClass = "[object Array]", boolClass = "[object Boolean]", dateClass = "[object Date]", errorClass = "[object Error]", funcClass = "[object Function]", numberClass = "[object Number]", objectClass = "[object Object]", regexpClass = "[object RegExp]", stringClass = "[object String]";
    var cloneableClasses = {};
    cloneableClasses[funcClass] = false;
    cloneableClasses[argsClass] = cloneableClasses[arrayClass] = cloneableClasses[boolClass] = cloneableClasses[dateClass] = cloneableClasses[numberClass] = cloneableClasses[objectClass] = cloneableClasses[regexpClass] = cloneableClasses[stringClass] = true;
    var objectTypes = {
        "boolean": false,
        "function": true,
        object: true,
        number: false,
        string: false,
        undefined: false
    };
    var stringEscapes = {
        "\\": "\\",
        "'": "'",
        "\n": "n",
        "\r": "r",
        "	": "t",
        "\u2028": "u2028",
        "\u2029": "u2029"
    };
    var freeExports = objectTypes[typeof exports] && exports;
    var freeModule = objectTypes[typeof module] && module && module.exports == freeExports && module;
    var freeGlobal = objectTypes[typeof global] && global;
    if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
        window = freeGlobal;
    }
    function basicIndexOf(array, value, fromIndex) {
        var index = (fromIndex || 0) - 1, length = array.length;
        while (++index < length) {
            if (array[index] === value) {
                return index;
            }
        }
        return -1;
    }
    function cacheIndexOf(cache, value) {
        var type = typeof value;
        cache = cache.cache;
        if (type == "boolean" || value == null) {
            return cache[value];
        }
        if (type != "number" && type != "string") {
            type = "object";
        }
        var key = type == "number" ? value : keyPrefix + value;
        cache = cache[type] || (cache[type] = {});
        return type == "object" ? cache[key] && basicIndexOf(cache[key], value) > -1 ? 0 : -1 : cache[key] ? 0 : -1;
    }
    function cachePush(value) {
        var cache = this.cache, type = typeof value;
        if (type == "boolean" || value == null) {
            cache[value] = true;
        } else {
            if (type != "number" && type != "string") {
                type = "object";
            }
            var key = type == "number" ? value : keyPrefix + value, typeCache = cache[type] || (cache[type] = {});
            if (type == "object") {
                if ((typeCache[key] || (typeCache[key] = [])).push(value) == this.array.length) {
                    cache[type] = false;
                }
            } else {
                typeCache[key] = true;
            }
        }
    }
    function charAtCallback(value) {
        return value.charCodeAt(0);
    }
    function compareAscending(a, b) {
        var ai = a.index, bi = b.index;
        a = a.criteria;
        b = b.criteria;
        if (a !== b) {
            if (a > b || typeof a == "undefined") {
                return 1;
            }
            if (a < b || typeof b == "undefined") {
                return -1;
            }
        }
        return ai < bi ? -1 : 1;
    }
    function createCache(array) {
        var index = -1, length = array.length;
        var cache = getObject();
        cache["false"] = cache["null"] = cache["true"] = cache["undefined"] = false;
        var result = getObject();
        result.array = array;
        result.cache = cache;
        result.push = cachePush;
        while (++index < length) {
            result.push(array[index]);
        }
        return cache.object === false ? (releaseObject(result), null) : result;
    }
    function escapeStringChar(match) {
        return "\\" + stringEscapes[match];
    }
    function getArray() {
        return arrayPool.pop() || [];
    }
    function getObject() {
        return objectPool.pop() || {
            args: "",
            array: null,
            bottom: "",
            cache: null,
            criteria: null,
            "false": false,
            firstArg: "",
            index: 0,
            init: "",
            leading: false,
            loop: "",
            maxWait: 0,
            "null": false,
            number: null,
            object: null,
            push: null,
            shadowedProps: null,
            string: null,
            support: null,
            top: "",
            trailing: false,
            "true": false,
            undefined: false,
            useHas: false,
            useKeys: false,
            value: null
        };
    }
    function isNode(value) {
        return typeof value.toString != "function" && typeof (value + "") == "string";
    }
    function noop() {}
    function releaseArray(array) {
        array.length = 0;
        if (arrayPool.length < maxPoolSize) {
            arrayPool.push(array);
        }
    }
    function releaseObject(object) {
        var cache = object.cache;
        if (cache) {
            releaseObject(cache);
        }
        object.array = object.cache = object.criteria = object.object = object.number = object.string = object.value = null;
        if (objectPool.length < maxPoolSize) {
            objectPool.push(object);
        }
    }
    function slice(array, start, end) {
        start || (start = 0);
        if (typeof end == "undefined") {
            end = array ? array.length : 0;
        }
        var index = -1, length = end - start || 0, result = Array(length < 0 ? 0 : length);
        while (++index < length) {
            result[index] = array[start + index];
        }
        return result;
    }
    function runInContext(context) {
        context = context ? _.defaults(window.Object(), context, _.pick(window, contextProps)) : window;
        var Array = context.Array, Boolean = context.Boolean, Date = context.Date, Error = context.Error, Function = context.Function, Math = context.Math, Number = context.Number, Object = context.Object, RegExp = context.RegExp, String = context.String, TypeError = context.TypeError;
        var arrayRef = [];
        var errorProto = Error.prototype, objectProto = Object.prototype, stringProto = String.prototype;
        var oldDash = context._;
        var reNative = RegExp("^" + String(objectProto.valueOf).replace(/[.*+?^${}()|[\]\\]/g, "\\$&").replace(/valueOf|for [^\]]+/g, ".+?") + "$");
        var ceil = Math.ceil, clearTimeout = context.clearTimeout, concat = arrayRef.concat, floor = Math.floor, fnToString = Function.prototype.toString, getPrototypeOf = reNative.test(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf, hasOwnProperty = objectProto.hasOwnProperty, push = arrayRef.push, propertyIsEnumerable = objectProto.propertyIsEnumerable, setImmediate = context.setImmediate, setTimeout = context.setTimeout, toString = objectProto.toString;
        var nativeBind = reNative.test(nativeBind = toString.bind) && nativeBind, nativeCreate = reNative.test(nativeCreate = Object.create) && nativeCreate, nativeIsArray = reNative.test(nativeIsArray = Array.isArray) && nativeIsArray, nativeIsFinite = context.isFinite, nativeIsNaN = context.isNaN, nativeKeys = reNative.test(nativeKeys = Object.keys) && nativeKeys, nativeMax = Math.max, nativeMin = Math.min, nativeParseInt = context.parseInt, nativeRandom = Math.random, nativeSlice = arrayRef.slice;
        var isIeOpera = reNative.test(context.attachEvent), isV8 = nativeBind && !/\n|true/.test(nativeBind + isIeOpera);
        var ctorByClass = {};
        ctorByClass[arrayClass] = Array;
        ctorByClass[boolClass] = Boolean;
        ctorByClass[dateClass] = Date;
        ctorByClass[funcClass] = Function;
        ctorByClass[objectClass] = Object;
        ctorByClass[numberClass] = Number;
        ctorByClass[regexpClass] = RegExp;
        ctorByClass[stringClass] = String;
        var nonEnumProps = {};
        nonEnumProps[arrayClass] = nonEnumProps[dateClass] = nonEnumProps[numberClass] = {
            constructor: true,
            toLocaleString: true,
            toString: true,
            valueOf: true
        };
        nonEnumProps[boolClass] = nonEnumProps[stringClass] = {
            constructor: true,
            toString: true,
            valueOf: true
        };
        nonEnumProps[errorClass] = nonEnumProps[funcClass] = nonEnumProps[regexpClass] = {
            constructor: true,
            toString: true
        };
        nonEnumProps[objectClass] = {
            constructor: true
        };
        (function() {
            var length = shadowedProps.length;
            while (length--) {
                var prop = shadowedProps[length];
                for (var className in nonEnumProps) {
                    if (hasOwnProperty.call(nonEnumProps, className) && !hasOwnProperty.call(nonEnumProps[className], prop)) {
                        nonEnumProps[className][prop] = false;
                    }
                }
            }
        })();
        function lodash(value) {
            return value && typeof value == "object" && !isArray(value) && hasOwnProperty.call(value, "__wrapped__") ? value : new lodashWrapper(value);
        }
        function lodashWrapper(value) {
            this.__wrapped__ = value;
        }
        lodashWrapper.prototype = lodash.prototype;
        var support = lodash.support = {};
        (function() {
            var ctor = function() {
                this.x = 1;
            }, object = {
                "0": 1,
                length: 1
            }, props = [];
            ctor.prototype = {
                valueOf: 1,
                y: 1
            };
            for (var prop in new ctor()) {
                props.push(prop);
            }
            for (prop in arguments) {}
            support.argsObject = arguments.constructor == Object && !(arguments instanceof Array);
            support.argsClass = isArguments(arguments);
            support.enumErrorProps = propertyIsEnumerable.call(errorProto, "message") || propertyIsEnumerable.call(errorProto, "name");
            support.enumPrototypes = propertyIsEnumerable.call(ctor, "prototype");
            support.fastBind = nativeBind && !isV8;
            support.ownLast = props[0] != "x";
            support.nonEnumArgs = prop != 0;
            support.nonEnumShadows = !/valueOf/.test(props);
            support.spliceObjects = (arrayRef.splice.call(object, 0, 1), !object[0]);
            support.unindexedChars = "x"[0] + Object("x")[0] != "xx";
            try {
                support.nodeClass = !(toString.call(document) == objectClass && !({
                    toString: 0
                } + ""));
            } catch (e) {
                support.nodeClass = true;
            }
        })(1);
        lodash.templateSettings = {
            escape: /<%-([\s\S]+?)%>/g,
            evaluate: /<%([\s\S]+?)%>/g,
            interpolate: reInterpolate,
            variable: "",
            imports: {
                _: lodash
            }
        };
        var iteratorTemplate = template("var index, iterable = <%= firstArg %>, " + "result = <%= init %>;\n" + "if (!iterable) return result;\n" + "<%= top %>;" + "<% if (array) { %>\n" + "var length = iterable.length; index = -1;\n" + "if (<%= array %>) {" + "  <% if (support.unindexedChars) { %>\n" + "  if (isString(iterable)) {\n" + "    iterable = iterable.split('')\n" + "  }" + "  <% } %>\n" + "  while (++index < length) {\n" + "    <%= loop %>;\n" + "  }\n" + "}\n" + "else {" + "  <% } else if (support.nonEnumArgs) { %>\n" + "  var length = iterable.length; index = -1;\n" + "  if (length && isArguments(iterable)) {\n" + "    while (++index < length) {\n" + "      index += '';\n" + "      <%= loop %>;\n" + "    }\n" + "  } else {" + "  <% } %>" + "  <% if (support.enumPrototypes) { %>\n" + "  var skipProto = typeof iterable == 'function';\n" + "  <% } %>" + "  <% if (support.enumErrorProps) { %>\n" + "  var skipErrorProps = iterable === errorProto || iterable instanceof Error;\n" + "  <% } %>" + "  <%" + "    var conditions = [];" + "    if (support.enumPrototypes) { conditions.push('!(skipProto && index == \"prototype\")'); }" + '    if (support.enumErrorProps)  { conditions.push(\'!(skipErrorProps && (index == "message" || index == "name"))\'); }' + "  %>" + "  <% if (useHas && useKeys) { %>\n" + "  var ownIndex = -1,\n" + "      ownProps = objectTypes[typeof iterable] && keys(iterable),\n" + "      length = ownProps ? ownProps.length : 0;\n\n" + "  while (++ownIndex < length) {\n" + "    index = ownProps[ownIndex];\n<%" + "    if (conditions.length) { %>    if (<%= conditions.join(' && ') %>) {\n  <% } %>" + "    <%= loop %>;" + "    <% if (conditions.length) { %>\n    }<% } %>\n" + "  }" + "  <% } else { %>\n" + "  for (index in iterable) {\n<%" + '    if (useHas) { conditions.push("hasOwnProperty.call(iterable, index)"); }' + "    if (conditions.length) { %>    if (<%= conditions.join(' && ') %>) {\n  <% } %>" + "    <%= loop %>;" + "    <% if (conditions.length) { %>\n    }<% } %>\n" + "  }" + "    <% if (support.nonEnumShadows) { %>\n\n" + "  if (iterable !== objectProto) {\n" + "    var ctor = iterable.constructor,\n" + "        isProto = iterable === (ctor && ctor.prototype),\n" + "        className = iterable === stringProto ? stringClass : iterable === errorProto ? errorClass : toString.call(iterable),\n" + "        nonEnum = nonEnumProps[className];\n" + "      <% for (k = 0; k < 7; k++) { %>\n" + "    index = '<%= shadowedProps[k] %>';\n" + "    if ((!(isProto && nonEnum[index]) && hasOwnProperty.call(iterable, index))<%" + "        if (!useHas) { %> || (!nonEnum[index] && iterable[index] !== objectProto[index])<% }" + "      %>) {\n" + "      <%= loop %>;\n" + "    }" + "      <% } %>\n" + "  }" + "    <% } %>" + "  <% } %>" + "  <% if (array || support.nonEnumArgs) { %>\n}<% } %>\n" + "<%= bottom %>;\n" + "return result");
        var defaultsIteratorOptions = {
            args: "object, source, guard",
            top: "var args = arguments,\n" + "    argsIndex = 0,\n" + "    argsLength = typeof guard == 'number' ? 2 : args.length;\n" + "while (++argsIndex < argsLength) {\n" + "  iterable = args[argsIndex];\n" + "  if (iterable && objectTypes[typeof iterable]) {",
            loop: "if (typeof result[index] == 'undefined') result[index] = iterable[index]",
            bottom: "  }\n}"
        };
        var eachIteratorOptions = {
            args: "collection, callback, thisArg",
            top: "callback = callback && typeof thisArg == 'undefined' ? callback : lodash.createCallback(callback, thisArg)",
            array: "typeof length == 'number'",
            loop: "if (callback(iterable[index], index, collection) === false) return result"
        };
        var forOwnIteratorOptions = {
            top: "if (!objectTypes[typeof iterable]) return result;\n" + eachIteratorOptions.top,
            array: false
        };
        function createBound(func, thisArg, partialArgs, indicator) {
            var isFunc = isFunction(func), isPartial = !partialArgs, key = thisArg;
            if (isPartial) {
                var rightIndicator = indicator;
                partialArgs = thisArg;
            } else if (!isFunc) {
                if (!indicator) {
                    throw new TypeError();
                }
                thisArg = func;
            }
            function bound() {
                var args = arguments, thisBinding = isPartial ? this : thisArg;
                if (!isFunc) {
                    func = thisArg[key];
                }
                if (partialArgs.length) {
                    args = args.length ? (args = nativeSlice.call(args), rightIndicator ? args.concat(partialArgs) : partialArgs.concat(args)) : partialArgs;
                }
                if (this instanceof bound) {
                    thisBinding = createObject(func.prototype);
                    var result = func.apply(thisBinding, args);
                    return isObject(result) ? result : thisBinding;
                }
                return func.apply(thisBinding, args);
            }
            return bound;
        }
        function createIterator() {
            var data = getObject();
            data.shadowedProps = shadowedProps;
            data.support = support;
            data.array = data.bottom = data.loop = data.top = "";
            data.init = "iterable";
            data.useHas = true;
            data.useKeys = !!keys;
            for (var object, index = 0; object = arguments[index]; index++) {
                for (var key in object) {
                    data[key] = object[key];
                }
            }
            var args = data.args;
            data.firstArg = /^[^,]+/.exec(args)[0];
            var factory = Function("errorClass, errorProto, hasOwnProperty, isArguments, isArray, " + "isString, keys, lodash, objectProto, objectTypes, nonEnumProps, " + "stringClass, stringProto, toString", "return function(" + args + ") {\n" + iteratorTemplate(data) + "\n}");
            releaseObject(data);
            return factory(errorClass, errorProto, hasOwnProperty, isArguments, isArray, isString, keys, lodash, objectProto, objectTypes, nonEnumProps, stringClass, stringProto, toString);
        }
        function createObject(prototype) {
            return isObject(prototype) ? nativeCreate(prototype) : {};
        }
        if (!nativeCreate) {
            var createObject = function(prototype) {
                if (isObject(prototype)) {
                    noop.prototype = prototype;
                    var result = new noop();
                    noop.prototype = null;
                }
                return result || {};
            };
        }
        function escapeHtmlChar(match) {
            return htmlEscapes[match];
        }
        function getIndexOf(array, value, fromIndex) {
            var result = (result = lodash.indexOf) === indexOf ? basicIndexOf : result;
            return result;
        }
        function overloadWrapper(func) {
            return function(array, flag, callback, thisArg) {
                if (typeof flag != "boolean" && flag != null) {
                    thisArg = callback;
                    callback = !(thisArg && thisArg[flag] === array) ? flag : undefined;
                    flag = false;
                }
                if (callback != null) {
                    callback = lodash.createCallback(callback, thisArg);
                }
                return func(array, flag, callback, thisArg);
            };
        }
        function shimIsPlainObject(value) {
            var ctor, result;
            if (!(value && toString.call(value) == objectClass) || (ctor = value.constructor, 
            isFunction(ctor) && !(ctor instanceof ctor)) || !support.argsClass && isArguments(value) || !support.nodeClass && isNode(value)) {
                return false;
            }
            if (support.ownLast) {
                forIn(value, function(value, key, object) {
                    result = hasOwnProperty.call(object, key);
                    return false;
                });
                return result !== false;
            }
            forIn(value, function(value, key) {
                result = key;
            });
            return result === undefined || hasOwnProperty.call(value, result);
        }
        function unescapeHtmlChar(match) {
            return htmlUnescapes[match];
        }
        function isArguments(value) {
            return toString.call(value) == argsClass;
        }
        if (!support.argsClass) {
            isArguments = function(value) {
                return value ? hasOwnProperty.call(value, "callee") : false;
            };
        }
        var isArray = nativeIsArray || function(value) {
            return value ? typeof value == "object" && toString.call(value) == arrayClass : false;
        };
        var shimKeys = createIterator({
            args: "object",
            init: "[]",
            top: "if (!(objectTypes[typeof object])) return result",
            loop: "result.push(index)"
        });
        var keys = !nativeKeys ? shimKeys : function(object) {
            if (!isObject(object)) {
                return [];
            }
            if (support.enumPrototypes && typeof object == "function" || support.nonEnumArgs && object.length && isArguments(object)) {
                return shimKeys(object);
            }
            return nativeKeys(object);
        };
        var basicEach = createIterator(eachIteratorOptions);
        var htmlEscapes = {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#39;"
        };
        var htmlUnescapes = invert(htmlEscapes);
        var assign = createIterator(defaultsIteratorOptions, {
            top: defaultsIteratorOptions.top.replace(";", ";\n" + "if (argsLength > 3 && typeof args[argsLength - 2] == 'function') {\n" + "  var callback = lodash.createCallback(args[--argsLength - 1], args[argsLength--], 2);\n" + "} else if (argsLength > 2 && typeof args[argsLength - 1] == 'function') {\n" + "  callback = args[--argsLength];\n" + "}"),
            loop: "result[index] = callback ? callback(result[index], iterable[index]) : iterable[index]"
        });
        function clone(value, deep, callback, thisArg, stackA, stackB) {
            var result = value;
            if (typeof deep != "boolean" && deep != null) {
                thisArg = callback;
                callback = deep;
                deep = false;
            }
            if (typeof callback == "function") {
                callback = typeof thisArg == "undefined" ? callback : lodash.createCallback(callback, thisArg, 1);
                result = callback(result);
                if (typeof result != "undefined") {
                    return result;
                }
                result = value;
            }
            var isObj = isObject(result);
            if (isObj) {
                var className = toString.call(result);
                if (!cloneableClasses[className] || !support.nodeClass && isNode(result)) {
                    return result;
                }
                var isArr = isArray(result);
            }
            if (!isObj || !deep) {
                return isObj ? isArr ? slice(result) : assign({}, result) : result;
            }
            var ctor = ctorByClass[className];
            switch (className) {
              case boolClass:
              case dateClass:
                return new ctor(+result);

              case numberClass:
              case stringClass:
                return new ctor(result);

              case regexpClass:
                return ctor(result.source, reFlags.exec(result));
            }
            var initedStack = !stackA;
            stackA || (stackA = getArray());
            stackB || (stackB = getArray());
            var length = stackA.length;
            while (length--) {
                if (stackA[length] == value) {
                    return stackB[length];
                }
            }
            result = isArr ? ctor(result.length) : {};
            if (isArr) {
                if (hasOwnProperty.call(value, "index")) {
                    result.index = value.index;
                }
                if (hasOwnProperty.call(value, "input")) {
                    result.input = value.input;
                }
            }
            stackA.push(value);
            stackB.push(result);
            (isArr ? basicEach : forOwn)(value, function(objValue, key) {
                result[key] = clone(objValue, deep, callback, undefined, stackA, stackB);
            });
            if (initedStack) {
                releaseArray(stackA);
                releaseArray(stackB);
            }
            return result;
        }
        function cloneDeep(value, callback, thisArg) {
            return clone(value, true, callback, thisArg);
        }
        var defaults = createIterator(defaultsIteratorOptions);
        function findKey(object, callback, thisArg) {
            var result;
            callback = lodash.createCallback(callback, thisArg);
            forOwn(object, function(value, key, object) {
                if (callback(value, key, object)) {
                    result = key;
                    return false;
                }
            });
            return result;
        }
        var forIn = createIterator(eachIteratorOptions, forOwnIteratorOptions, {
            useHas: false
        });
        var forOwn = createIterator(eachIteratorOptions, forOwnIteratorOptions);
        function functions(object) {
            var result = [];
            forIn(object, function(value, key) {
                if (isFunction(value)) {
                    result.push(key);
                }
            });
            return result.sort();
        }
        function has(object, property) {
            return object ? hasOwnProperty.call(object, property) : false;
        }
        function invert(object) {
            var index = -1, props = keys(object), length = props.length, result = {};
            while (++index < length) {
                var key = props[index];
                result[object[key]] = key;
            }
            return result;
        }
        function isBoolean(value) {
            return value === true || value === false || toString.call(value) == boolClass;
        }
        function isDate(value) {
            return value ? typeof value == "object" && toString.call(value) == dateClass : false;
        }
        function isElement(value) {
            return value ? value.nodeType === 1 : false;
        }
        function isEmpty(value) {
            var result = true;
            if (!value) {
                return result;
            }
            var className = toString.call(value), length = value.length;
            if (className == arrayClass || className == stringClass || (support.argsClass ? className == argsClass : isArguments(value)) || className == objectClass && typeof length == "number" && isFunction(value.splice)) {
                return !length;
            }
            forOwn(value, function() {
                return result = false;
            });
            return result;
        }
        function isEqual(a, b, callback, thisArg, stackA, stackB) {
            var whereIndicator = callback === indicatorObject;
            if (typeof callback == "function" && !whereIndicator) {
                callback = lodash.createCallback(callback, thisArg, 2);
                var result = callback(a, b);
                if (typeof result != "undefined") {
                    return !!result;
                }
            }
            if (a === b) {
                return a !== 0 || 1 / a == 1 / b;
            }
            var type = typeof a, otherType = typeof b;
            if (a === a && (!a || type != "function" && type != "object") && (!b || otherType != "function" && otherType != "object")) {
                return false;
            }
            if (a == null || b == null) {
                return a === b;
            }
            var className = toString.call(a), otherClass = toString.call(b);
            if (className == argsClass) {
                className = objectClass;
            }
            if (otherClass == argsClass) {
                otherClass = objectClass;
            }
            if (className != otherClass) {
                return false;
            }
            switch (className) {
              case boolClass:
              case dateClass:
                return +a == +b;

              case numberClass:
                return a != +a ? b != +b : a == 0 ? 1 / a == 1 / b : a == +b;

              case regexpClass:
              case stringClass:
                return a == String(b);
            }
            var isArr = className == arrayClass;
            if (!isArr) {
                if (hasOwnProperty.call(a, "__wrapped__ ") || hasOwnProperty.call(b, "__wrapped__")) {
                    return isEqual(a.__wrapped__ || a, b.__wrapped__ || b, callback, thisArg, stackA, stackB);
                }
                if (className != objectClass || !support.nodeClass && (isNode(a) || isNode(b))) {
                    return false;
                }
                var ctorA = !support.argsObject && isArguments(a) ? Object : a.constructor, ctorB = !support.argsObject && isArguments(b) ? Object : b.constructor;
                if (ctorA != ctorB && !(isFunction(ctorA) && ctorA instanceof ctorA && isFunction(ctorB) && ctorB instanceof ctorB)) {
                    return false;
                }
            }
            var initedStack = !stackA;
            stackA || (stackA = getArray());
            stackB || (stackB = getArray());
            var length = stackA.length;
            while (length--) {
                if (stackA[length] == a) {
                    return stackB[length] == b;
                }
            }
            var size = 0;
            result = true;
            stackA.push(a);
            stackB.push(b);
            if (isArr) {
                length = a.length;
                size = b.length;
                result = size == a.length;
                if (!result && !whereIndicator) {
                    return result;
                }
                while (size--) {
                    var index = length, value = b[size];
                    if (whereIndicator) {
                        while (index--) {
                            if (result = isEqual(a[index], value, callback, thisArg, stackA, stackB)) {
                                break;
                            }
                        }
                    } else if (!(result = isEqual(a[size], value, callback, thisArg, stackA, stackB))) {
                        break;
                    }
                }
                return result;
            }
            forIn(b, function(value, key, b) {
                if (hasOwnProperty.call(b, key)) {
                    size++;
                    return result = hasOwnProperty.call(a, key) && isEqual(a[key], value, callback, thisArg, stackA, stackB);
                }
            });
            if (result && !whereIndicator) {
                forIn(a, function(value, key, a) {
                    if (hasOwnProperty.call(a, key)) {
                        return result = --size > -1;
                    }
                });
            }
            if (initedStack) {
                releaseArray(stackA);
                releaseArray(stackB);
            }
            return result;
        }
        function isFinite(value) {
            return nativeIsFinite(value) && !nativeIsNaN(parseFloat(value));
        }
        function isFunction(value) {
            return typeof value == "function";
        }
        if (isFunction(/x/)) {
            isFunction = function(value) {
                return typeof value == "function" && toString.call(value) == funcClass;
            };
        }
        function isObject(value) {
            return !!(value && objectTypes[typeof value]);
        }
        function isNaN(value) {
            return isNumber(value) && value != +value;
        }
        function isNull(value) {
            return value === null;
        }
        function isNumber(value) {
            return typeof value == "number" || toString.call(value) == numberClass;
        }
        var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {
            if (!(value && toString.call(value) == objectClass) || !support.argsClass && isArguments(value)) {
                return false;
            }
            var valueOf = value.valueOf, objProto = typeof valueOf == "function" && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);
            return objProto ? value == objProto || getPrototypeOf(value) == objProto : shimIsPlainObject(value);
        };
        function isRegExp(value) {
            return !!(value && objectTypes[typeof value]) && toString.call(value) == regexpClass;
        }
        function isString(value) {
            return typeof value == "string" || toString.call(value) == stringClass;
        }
        function isUndefined(value) {
            return typeof value == "undefined";
        }
        function merge(object, source, deepIndicator) {
            var args = arguments, index = 0, length = 2;
            if (!isObject(object)) {
                return object;
            }
            if (deepIndicator === indicatorObject) {
                var callback = args[3], stackA = args[4], stackB = args[5];
            } else {
                var initedStack = true;
                stackA = getArray();
                stackB = getArray();
                if (typeof deepIndicator != "number") {
                    length = args.length;
                }
                if (length > 3 && typeof args[length - 2] == "function") {
                    callback = lodash.createCallback(args[--length - 1], args[length--], 2);
                } else if (length > 2 && typeof args[length - 1] == "function") {
                    callback = args[--length];
                }
            }
            while (++index < length) {
                (isArray(args[index]) ? forEach : forOwn)(args[index], function(source, key) {
                    var found, isArr, result = source, value = object[key];
                    if (source && ((isArr = isArray(source)) || isPlainObject(source))) {
                        var stackLength = stackA.length;
                        while (stackLength--) {
                            if (found = stackA[stackLength] == source) {
                                value = stackB[stackLength];
                                break;
                            }
                        }
                        if (!found) {
                            var isShallow;
                            if (callback) {
                                result = callback(value, source);
                                if (isShallow = typeof result != "undefined") {
                                    value = result;
                                }
                            }
                            if (!isShallow) {
                                value = isArr ? isArray(value) ? value : [] : isPlainObject(value) ? value : {};
                            }
                            stackA.push(source);
                            stackB.push(value);
                            if (!isShallow) {
                                value = merge(value, source, indicatorObject, callback, stackA, stackB);
                            }
                        }
                    } else {
                        if (callback) {
                            result = callback(value, source);
                            if (typeof result == "undefined") {
                                result = source;
                            }
                        }
                        if (typeof result != "undefined") {
                            value = result;
                        }
                    }
                    object[key] = value;
                });
            }
            if (initedStack) {
                releaseArray(stackA);
                releaseArray(stackB);
            }
            return object;
        }
        function omit(object, callback, thisArg) {
            var indexOf = getIndexOf(), isFunc = typeof callback == "function", result = {};
            if (isFunc) {
                callback = lodash.createCallback(callback, thisArg);
            } else {
                var props = concat.apply(arrayRef, nativeSlice.call(arguments, 1));
            }
            forIn(object, function(value, key, object) {
                if (isFunc ? !callback(value, key, object) : indexOf(props, key) < 0) {
                    result[key] = value;
                }
            });
            return result;
        }
        function pairs(object) {
            var index = -1, props = keys(object), length = props.length, result = Array(length);
            while (++index < length) {
                var key = props[index];
                result[index] = [ key, object[key] ];
            }
            return result;
        }
        function pick(object, callback, thisArg) {
            var result = {};
            if (typeof callback != "function") {
                var index = -1, props = concat.apply(arrayRef, nativeSlice.call(arguments, 1)), length = isObject(object) ? props.length : 0;
                while (++index < length) {
                    var key = props[index];
                    if (key in object) {
                        result[key] = object[key];
                    }
                }
            } else {
                callback = lodash.createCallback(callback, thisArg);
                forIn(object, function(value, key, object) {
                    if (callback(value, key, object)) {
                        result[key] = value;
                    }
                });
            }
            return result;
        }
        function transform(object, callback, accumulator, thisArg) {
            var isArr = isArray(object);
            callback = lodash.createCallback(callback, thisArg, 4);
            if (accumulator == null) {
                if (isArr) {
                    accumulator = [];
                } else {
                    var ctor = object && object.constructor, proto = ctor && ctor.prototype;
                    accumulator = createObject(proto);
                }
            }
            (isArr ? basicEach : forOwn)(object, function(value, index, object) {
                return callback(accumulator, value, index, object);
            });
            return accumulator;
        }
        function values(object) {
            var index = -1, props = keys(object), length = props.length, result = Array(length);
            while (++index < length) {
                result[index] = object[props[index]];
            }
            return result;
        }
        function at(collection) {
            var index = -1, props = concat.apply(arrayRef, nativeSlice.call(arguments, 1)), length = props.length, result = Array(length);
            if (support.unindexedChars && isString(collection)) {
                collection = collection.split("");
            }
            while (++index < length) {
                result[index] = collection[props[index]];
            }
            return result;
        }
        function contains(collection, target, fromIndex) {
            var index = -1, indexOf = getIndexOf(), length = collection ? collection.length : 0, result = false;
            fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex) || 0;
            if (length && typeof length == "number") {
                result = (isString(collection) ? collection.indexOf(target, fromIndex) : indexOf(collection, target, fromIndex)) > -1;
            } else {
                basicEach(collection, function(value) {
                    if (++index >= fromIndex) {
                        return !(result = value === target);
                    }
                });
            }
            return result;
        }
        function countBy(collection, callback, thisArg) {
            var result = {};
            callback = lodash.createCallback(callback, thisArg);
            forEach(collection, function(value, key, collection) {
                key = String(callback(value, key, collection));
                hasOwnProperty.call(result, key) ? result[key]++ : result[key] = 1;
            });
            return result;
        }
        function every(collection, callback, thisArg) {
            var result = true;
            callback = lodash.createCallback(callback, thisArg);
            if (isArray(collection)) {
                var index = -1, length = collection.length;
                while (++index < length) {
                    if (!(result = !!callback(collection[index], index, collection))) {
                        break;
                    }
                }
            } else {
                basicEach(collection, function(value, index, collection) {
                    return result = !!callback(value, index, collection);
                });
            }
            return result;
        }
        function filter(collection, callback, thisArg) {
            var result = [];
            callback = lodash.createCallback(callback, thisArg);
            if (isArray(collection)) {
                var index = -1, length = collection.length;
                while (++index < length) {
                    var value = collection[index];
                    if (callback(value, index, collection)) {
                        result.push(value);
                    }
                }
            } else {
                basicEach(collection, function(value, index, collection) {
                    if (callback(value, index, collection)) {
                        result.push(value);
                    }
                });
            }
            return result;
        }
        function find(collection, callback, thisArg) {
            callback = lodash.createCallback(callback, thisArg);
            if (isArray(collection)) {
                var index = -1, length = collection.length;
                while (++index < length) {
                    var value = collection[index];
                    if (callback(value, index, collection)) {
                        return value;
                    }
                }
            } else {
                var result;
                basicEach(collection, function(value, index, collection) {
                    if (callback(value, index, collection)) {
                        result = value;
                        return false;
                    }
                });
                return result;
            }
        }
        function forEach(collection, callback, thisArg) {
            if (callback && typeof thisArg == "undefined" && isArray(collection)) {
                var index = -1, length = collection.length;
                while (++index < length) {
                    if (callback(collection[index], index, collection) === false) {
                        break;
                    }
                }
            } else {
                basicEach(collection, callback, thisArg);
            }
            return collection;
        }
        function groupBy(collection, callback, thisArg) {
            var result = {};
            callback = lodash.createCallback(callback, thisArg);
            forEach(collection, function(value, key, collection) {
                key = String(callback(value, key, collection));
                (hasOwnProperty.call(result, key) ? result[key] : result[key] = []).push(value);
            });
            return result;
        }
        function invoke(collection, methodName) {
            var args = nativeSlice.call(arguments, 2), index = -1, isFunc = typeof methodName == "function", length = collection ? collection.length : 0, result = Array(typeof length == "number" ? length : 0);
            forEach(collection, function(value) {
                result[++index] = (isFunc ? methodName : value[methodName]).apply(value, args);
            });
            return result;
        }
        function map(collection, callback, thisArg) {
            var index = -1, length = collection ? collection.length : 0, result = Array(typeof length == "number" ? length : 0);
            callback = lodash.createCallback(callback, thisArg);
            if (isArray(collection)) {
                while (++index < length) {
                    result[index] = callback(collection[index], index, collection);
                }
            } else {
                basicEach(collection, function(value, key, collection) {
                    result[++index] = callback(value, key, collection);
                });
            }
            return result;
        }
        function max(collection, callback, thisArg) {
            var computed = -Infinity, result = computed;
            if (!callback && isArray(collection)) {
                var index = -1, length = collection.length;
                while (++index < length) {
                    var value = collection[index];
                    if (value > result) {
                        result = value;
                    }
                }
            } else {
                callback = !callback && isString(collection) ? charAtCallback : lodash.createCallback(callback, thisArg);
                basicEach(collection, function(value, index, collection) {
                    var current = callback(value, index, collection);
                    if (current > computed) {
                        computed = current;
                        result = value;
                    }
                });
            }
            return result;
        }
        function min(collection, callback, thisArg) {
            var computed = Infinity, result = computed;
            if (!callback && isArray(collection)) {
                var index = -1, length = collection.length;
                while (++index < length) {
                    var value = collection[index];
                    if (value < result) {
                        result = value;
                    }
                }
            } else {
                callback = !callback && isString(collection) ? charAtCallback : lodash.createCallback(callback, thisArg);
                basicEach(collection, function(value, index, collection) {
                    var current = callback(value, index, collection);
                    if (current < computed) {
                        computed = current;
                        result = value;
                    }
                });
            }
            return result;
        }
        var pluck = map;
        function reduce(collection, callback, accumulator, thisArg) {
            var noaccum = arguments.length < 3;
            callback = lodash.createCallback(callback, thisArg, 4);
            if (isArray(collection)) {
                var index = -1, length = collection.length;
                if (noaccum) {
                    accumulator = collection[++index];
                }
                while (++index < length) {
                    accumulator = callback(accumulator, collection[index], index, collection);
                }
            } else {
                basicEach(collection, function(value, index, collection) {
                    accumulator = noaccum ? (noaccum = false, value) : callback(accumulator, value, index, collection);
                });
            }
            return accumulator;
        }
        function reduceRight(collection, callback, accumulator, thisArg) {
            var iterable = collection, length = collection ? collection.length : 0, noaccum = arguments.length < 3;
            if (typeof length != "number") {
                var props = keys(collection);
                length = props.length;
            } else if (support.unindexedChars && isString(collection)) {
                iterable = collection.split("");
            }
            callback = lodash.createCallback(callback, thisArg, 4);
            forEach(collection, function(value, index, collection) {
                index = props ? props[--length] : --length;
                accumulator = noaccum ? (noaccum = false, iterable[index]) : callback(accumulator, iterable[index], index, collection);
            });
            return accumulator;
        }
        function reject(collection, callback, thisArg) {
            callback = lodash.createCallback(callback, thisArg);
            return filter(collection, function(value, index, collection) {
                return !callback(value, index, collection);
            });
        }
        function shuffle(collection) {
            var index = -1, length = collection ? collection.length : 0, result = Array(typeof length == "number" ? length : 0);
            forEach(collection, function(value) {
                var rand = floor(nativeRandom() * (++index + 1));
                result[index] = result[rand];
                result[rand] = value;
            });
            return result;
        }
        function size(collection) {
            var length = collection ? collection.length : 0;
            return typeof length == "number" ? length : keys(collection).length;
        }
        function some(collection, callback, thisArg) {
            var result;
            callback = lodash.createCallback(callback, thisArg);
            if (isArray(collection)) {
                var index = -1, length = collection.length;
                while (++index < length) {
                    if (result = callback(collection[index], index, collection)) {
                        break;
                    }
                }
            } else {
                basicEach(collection, function(value, index, collection) {
                    return !(result = callback(value, index, collection));
                });
            }
            return !!result;
        }
        function sortBy(collection, callback, thisArg) {
            var index = -1, length = collection ? collection.length : 0, result = Array(typeof length == "number" ? length : 0);
            callback = lodash.createCallback(callback, thisArg);
            forEach(collection, function(value, key, collection) {
                var object = result[++index] = getObject();
                object.criteria = callback(value, key, collection);
                object.index = index;
                object.value = value;
            });
            length = result.length;
            result.sort(compareAscending);
            while (length--) {
                var object = result[length];
                result[length] = object.value;
                releaseObject(object);
            }
            return result;
        }
        function toArray(collection) {
            if (collection && typeof collection.length == "number") {
                return support.unindexedChars && isString(collection) ? collection.split("") : slice(collection);
            }
            return values(collection);
        }
        var where = filter;
        function compact(array) {
            var index = -1, length = array ? array.length : 0, result = [];
            while (++index < length) {
                var value = array[index];
                if (value) {
                    result.push(value);
                }
            }
            return result;
        }
        function difference(array) {
            var index = -1, indexOf = getIndexOf(), length = array ? array.length : 0, seen = concat.apply(arrayRef, nativeSlice.call(arguments, 1)), result = [];
            var isLarge = length >= largeArraySize && indexOf === basicIndexOf;
            if (isLarge) {
                var cache = createCache(seen);
                if (cache) {
                    indexOf = cacheIndexOf;
                    seen = cache;
                } else {
                    isLarge = false;
                }
            }
            while (++index < length) {
                var value = array[index];
                if (indexOf(seen, value) < 0) {
                    result.push(value);
                }
            }
            if (isLarge) {
                releaseObject(seen);
            }
            return result;
        }
        function findIndex(array, callback, thisArg) {
            var index = -1, length = array ? array.length : 0;
            callback = lodash.createCallback(callback, thisArg);
            while (++index < length) {
                if (callback(array[index], index, array)) {
                    return index;
                }
            }
            return -1;
        }
        function first(array, callback, thisArg) {
            if (array) {
                var n = 0, length = array.length;
                if (typeof callback != "number" && callback != null) {
                    var index = -1;
                    callback = lodash.createCallback(callback, thisArg);
                    while (++index < length && callback(array[index], index, array)) {
                        n++;
                    }
                } else {
                    n = callback;
                    if (n == null || thisArg) {
                        return array[0];
                    }
                }
                return slice(array, 0, nativeMin(nativeMax(0, n), length));
            }
        }
        var flatten = overloadWrapper(function flatten(array, isShallow, callback) {
            var index = -1, length = array ? array.length : 0, result = [];
            while (++index < length) {
                var value = array[index];
                if (callback) {
                    value = callback(value, index, array);
                }
                if (isArray(value)) {
                    push.apply(result, isShallow ? value : flatten(value));
                } else {
                    result.push(value);
                }
            }
            return result;
        });
        function indexOf(array, value, fromIndex) {
            if (typeof fromIndex == "number") {
                var length = array ? array.length : 0;
                fromIndex = fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex || 0;
            } else if (fromIndex) {
                var index = sortedIndex(array, value);
                return array[index] === value ? index : -1;
            }
            return array ? basicIndexOf(array, value, fromIndex) : -1;
        }
        function initial(array, callback, thisArg) {
            if (!array) {
                return [];
            }
            var n = 0, length = array.length;
            if (typeof callback != "number" && callback != null) {
                var index = length;
                callback = lodash.createCallback(callback, thisArg);
                while (index-- && callback(array[index], index, array)) {
                    n++;
                }
            } else {
                n = callback == null || thisArg ? 1 : callback || n;
            }
            return slice(array, 0, nativeMin(nativeMax(0, length - n), length));
        }
        function intersection(array) {
            var args = arguments, argsLength = args.length, argsIndex = -1, caches = getArray(), index = -1, indexOf = getIndexOf(), length = array ? array.length : 0, result = [], seen = getArray();
            while (++argsIndex < argsLength) {
                var value = args[argsIndex];
                caches[argsIndex] = indexOf === basicIndexOf && (value ? value.length : 0) >= largeArraySize && createCache(argsIndex ? args[argsIndex] : seen);
            }
            outer: while (++index < length) {
                var cache = caches[0];
                value = array[index];
                if ((cache ? cacheIndexOf(cache, value) : indexOf(seen, value)) < 0) {
                    argsIndex = argsLength;
                    (cache || seen).push(value);
                    while (--argsIndex) {
                        cache = caches[argsIndex];
                        if ((cache ? cacheIndexOf(cache, value) : indexOf(args[argsIndex], value)) < 0) {
                            continue outer;
                        }
                    }
                    result.push(value);
                }
            }
            while (argsLength--) {
                cache = caches[argsLength];
                if (cache) {
                    releaseObject(cache);
                }
            }
            releaseArray(caches);
            releaseArray(seen);
            return result;
        }
        function last(array, callback, thisArg) {
            if (array) {
                var n = 0, length = array.length;
                if (typeof callback != "number" && callback != null) {
                    var index = length;
                    callback = lodash.createCallback(callback, thisArg);
                    while (index-- && callback(array[index], index, array)) {
                        n++;
                    }
                } else {
                    n = callback;
                    if (n == null || thisArg) {
                        return array[length - 1];
                    }
                }
                return slice(array, nativeMax(0, length - n));
            }
        }
        function lastIndexOf(array, value, fromIndex) {
            var index = array ? array.length : 0;
            if (typeof fromIndex == "number") {
                index = (fromIndex < 0 ? nativeMax(0, index + fromIndex) : nativeMin(fromIndex, index - 1)) + 1;
            }
            while (index--) {
                if (array[index] === value) {
                    return index;
                }
            }
            return -1;
        }
        function range(start, end, step) {
            start = +start || 0;
            step = +step || 1;
            if (end == null) {
                end = start;
                start = 0;
            }
            var index = -1, length = nativeMax(0, ceil((end - start) / step)), result = Array(length);
            while (++index < length) {
                result[index] = start;
                start += step;
            }
            return result;
        }
        function rest(array, callback, thisArg) {
            if (typeof callback != "number" && callback != null) {
                var n = 0, index = -1, length = array ? array.length : 0;
                callback = lodash.createCallback(callback, thisArg);
                while (++index < length && callback(array[index], index, array)) {
                    n++;
                }
            } else {
                n = callback == null || thisArg ? 1 : nativeMax(0, callback);
            }
            return slice(array, n);
        }
        function sortedIndex(array, value, callback, thisArg) {
            var low = 0, high = array ? array.length : low;
            callback = callback ? lodash.createCallback(callback, thisArg, 1) : identity;
            value = callback(value);
            while (low < high) {
                var mid = low + high >>> 1;
                callback(array[mid]) < value ? low = mid + 1 : high = mid;
            }
            return low;
        }
        function union(array) {
            if (!isArray(array)) {
                arguments[0] = array ? nativeSlice.call(array) : arrayRef;
            }
            return uniq(concat.apply(arrayRef, arguments));
        }
        var uniq = overloadWrapper(function(array, isSorted, callback) {
            var index = -1, indexOf = getIndexOf(), length = array ? array.length : 0, result = [];
            var isLarge = !isSorted && length >= largeArraySize && indexOf === basicIndexOf, seen = callback || isLarge ? getArray() : result;
            if (isLarge) {
                var cache = createCache(seen);
                if (cache) {
                    indexOf = cacheIndexOf;
                    seen = cache;
                } else {
                    isLarge = false;
                    seen = callback ? seen : (releaseArray(seen), result);
                }
            }
            while (++index < length) {
                var value = array[index], computed = callback ? callback(value, index, array) : value;
                if (isSorted ? !index || seen[seen.length - 1] !== computed : indexOf(seen, computed) < 0) {
                    if (callback || isLarge) {
                        seen.push(computed);
                    }
                    result.push(value);
                }
            }
            if (isLarge) {
                releaseArray(seen.array);
                releaseObject(seen);
            } else if (callback) {
                releaseArray(seen);
            }
            return result;
        });
        function unzip(array) {
            var index = -1, length = array ? max(pluck(array, "length")) : 0, result = Array(length < 0 ? 0 : length);
            while (++index < length) {
                result[index] = pluck(array, index);
            }
            return result;
        }
        function without(array) {
            return difference(array, nativeSlice.call(arguments, 1));
        }
        function zip(array) {
            return array ? unzip(arguments) : [];
        }
        function zipObject(keys, values) {
            var index = -1, length = keys ? keys.length : 0, result = {};
            while (++index < length) {
                var key = keys[index];
                if (values) {
                    result[key] = values[index];
                } else {
                    result[key[0]] = key[1];
                }
            }
            return result;
        }
        function after(n, func) {
            if (n < 1) {
                return func();
            }
            return function() {
                if (--n < 1) {
                    return func.apply(this, arguments);
                }
            };
        }
        function bind(func, thisArg) {
            return support.fastBind || nativeBind && arguments.length > 2 ? nativeBind.call.apply(nativeBind, arguments) : createBound(func, thisArg, nativeSlice.call(arguments, 2));
        }
        function bindAll(object) {
            var funcs = arguments.length > 1 ? concat.apply(arrayRef, nativeSlice.call(arguments, 1)) : functions(object), index = -1, length = funcs.length;
            while (++index < length) {
                var key = funcs[index];
                object[key] = bind(object[key], object);
            }
            return object;
        }
        function bindKey(object, key) {
            return createBound(object, key, nativeSlice.call(arguments, 2), indicatorObject);
        }
        function compose() {
            var funcs = arguments;
            return function() {
                var args = arguments, length = funcs.length;
                while (length--) {
                    args = [ funcs[length].apply(this, args) ];
                }
                return args[0];
            };
        }
        function createCallback(func, thisArg, argCount) {
            if (func == null) {
                return identity;
            }
            var type = typeof func;
            if (type != "function") {
                if (type != "object") {
                    return function(object) {
                        return object[func];
                    };
                }
                var props = keys(func);
                return function(object) {
                    var length = props.length, result = false;
                    while (length--) {
                        if (!(result = isEqual(object[props[length]], func[props[length]], indicatorObject))) {
                            break;
                        }
                    }
                    return result;
                };
            }
            if (typeof thisArg == "undefined" || reThis && !reThis.test(fnToString.call(func))) {
                return func;
            }
            if (argCount === 1) {
                return function(value) {
                    return func.call(thisArg, value);
                };
            }
            if (argCount === 2) {
                return function(a, b) {
                    return func.call(thisArg, a, b);
                };
            }
            if (argCount === 4) {
                return function(accumulator, value, index, collection) {
                    return func.call(thisArg, accumulator, value, index, collection);
                };
            }
            return function(value, index, collection) {
                return func.call(thisArg, value, index, collection);
            };
        }
        function debounce(func, wait, options) {
            var args, result, thisArg, callCount = 0, lastCalled = 0, maxWait = false, maxTimeoutId = null, timeoutId = null, trailing = true;
            function clear() {
                clearTimeout(maxTimeoutId);
                clearTimeout(timeoutId);
                callCount = 0;
                maxTimeoutId = timeoutId = null;
            }
            function delayed() {
                var isCalled = trailing && (!leading || callCount > 1);
                clear();
                if (isCalled) {
                    if (maxWait !== false) {
                        lastCalled = new Date();
                    }
                    result = func.apply(thisArg, args);
                }
            }
            function maxDelayed() {
                clear();
                if (trailing || maxWait !== wait) {
                    lastCalled = new Date();
                    result = func.apply(thisArg, args);
                }
            }
            wait = nativeMax(0, wait || 0);
            if (options === true) {
                var leading = true;
                trailing = false;
            } else if (isObject(options)) {
                leading = options.leading;
                maxWait = "maxWait" in options && nativeMax(wait, options.maxWait || 0);
                trailing = "trailing" in options ? options.trailing : trailing;
            }
            return function() {
                args = arguments;
                thisArg = this;
                callCount++;
                clearTimeout(timeoutId);
                if (maxWait === false) {
                    if (leading && callCount < 2) {
                        result = func.apply(thisArg, args);
                    }
                } else {
                    var now = new Date();
                    if (!maxTimeoutId && !leading) {
                        lastCalled = now;
                    }
                    var remaining = maxWait - (now - lastCalled);
                    if (remaining <= 0) {
                        clearTimeout(maxTimeoutId);
                        maxTimeoutId = null;
                        lastCalled = now;
                        result = func.apply(thisArg, args);
                    } else if (!maxTimeoutId) {
                        maxTimeoutId = setTimeout(maxDelayed, remaining);
                    }
                }
                if (wait !== maxWait) {
                    timeoutId = setTimeout(delayed, wait);
                }
                return result;
            };
        }
        function defer(func) {
            var args = nativeSlice.call(arguments, 1);
            return setTimeout(function() {
                func.apply(undefined, args);
            }, 1);
        }
        if (isV8 && freeModule && typeof setImmediate == "function") {
            defer = bind(setImmediate, context);
        }
        function delay(func, wait) {
            var args = nativeSlice.call(arguments, 2);
            return setTimeout(function() {
                func.apply(undefined, args);
            }, wait);
        }
        function memoize(func, resolver) {
            function memoized() {
                var cache = memoized.cache, key = keyPrefix + (resolver ? resolver.apply(this, arguments) : arguments[0]);
                return hasOwnProperty.call(cache, key) ? cache[key] : cache[key] = func.apply(this, arguments);
            }
            memoized.cache = {};
            return memoized;
        }
        function once(func) {
            var ran, result;
            return function() {
                if (ran) {
                    return result;
                }
                ran = true;
                result = func.apply(this, arguments);
                func = null;
                return result;
            };
        }
        function partial(func) {
            return createBound(func, nativeSlice.call(arguments, 1));
        }
        function partialRight(func) {
            return createBound(func, nativeSlice.call(arguments, 1), null, indicatorObject);
        }
        function throttle(func, wait, options) {
            var leading = true, trailing = true;
            if (options === false) {
                leading = false;
            } else if (isObject(options)) {
                leading = "leading" in options ? options.leading : leading;
                trailing = "trailing" in options ? options.trailing : trailing;
            }
            options = getObject();
            options.leading = leading;
            options.maxWait = wait;
            options.trailing = trailing;
            var result = debounce(func, wait, options);
            releaseObject(options);
            return result;
        }
        function wrap(value, wrapper) {
            return function() {
                var args = [ value ];
                push.apply(args, arguments);
                return wrapper.apply(this, args);
            };
        }
        function escape(string) {
            return string == null ? "" : String(string).replace(reUnescapedHtml, escapeHtmlChar);
        }
        function identity(value) {
            return value;
        }
        function mixin(object) {
            forEach(functions(object), function(methodName) {
                var func = lodash[methodName] = object[methodName];
                lodash.prototype[methodName] = function() {
                    var value = this.__wrapped__, args = [ value ];
                    push.apply(args, arguments);
                    var result = func.apply(lodash, args);
                    return value && typeof value == "object" && value === result ? this : new lodashWrapper(result);
                };
            });
        }
        function noConflict() {
            context._ = oldDash;
            return this;
        }
        var parseInt = nativeParseInt(whitespace + "08") == 8 ? nativeParseInt : function(value, radix) {
            return nativeParseInt(isString(value) ? value.replace(reLeadingSpacesAndZeros, "") : value, radix || 0);
        };
        function random(min, max) {
            if (min == null && max == null) {
                max = 1;
            }
            min = +min || 0;
            if (max == null) {
                max = min;
                min = 0;
            } else {
                max = +max || 0;
            }
            var rand = nativeRandom();
            return min % 1 || max % 1 ? min + nativeMin(rand * (max - min + parseFloat("1e-" + ((rand + "").length - 1))), max) : min + floor(rand * (max - min + 1));
        }
        function result(object, property) {
            var value = object ? object[property] : undefined;
            return isFunction(value) ? object[property]() : value;
        }
        function template(text, data, options) {
            var settings = lodash.templateSettings;
            text || (text = "");
            options = iteratorTemplate ? defaults({}, options, settings) : settings;
            var imports = iteratorTemplate && defaults({}, options.imports, settings.imports), importsKeys = iteratorTemplate ? keys(imports) : [ "_" ], importsValues = iteratorTemplate ? values(imports) : [ lodash ];
            var isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
            var reDelimiters = RegExp((options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$", "g");
            text.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
                interpolateValue || (interpolateValue = esTemplateValue);
                source += text.slice(index, offset).replace(reUnescapedString, escapeStringChar);
                if (escapeValue) {
                    source += "' +\n__e(" + escapeValue + ") +\n'";
                }
                if (evaluateValue) {
                    isEvaluating = true;
                    source += "';\n" + evaluateValue + ";\n__p += '";
                }
                if (interpolateValue) {
                    source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
                }
                index = offset + match.length;
                return match;
            });
            source += "';\n";
            var variable = options.variable, hasVariable = variable;
            if (!hasVariable) {
                variable = "obj";
                source = "with (" + variable + ") {\n" + source + "\n}\n";
            }
            source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
            source = "function(" + variable + ") {\n" + (hasVariable ? "" : variable + " || (" + variable + " = {});\n") + "var __t, __p = '', __e = _.escape" + (isEvaluating ? ", __j = Array.prototype.join;\n" + "function print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
            var sourceURL = "\n/*\n//@ sourceURL=" + (options.sourceURL || "/lodash/template/source[" + templateCounter++ + "]") + "\n*/";
            try {
                var result = Function(importsKeys, "return " + source + sourceURL).apply(undefined, importsValues);
            } catch (e) {
                e.source = source;
                throw e;
            }
            if (data) {
                return result(data);
            }
            result.source = source;
            return result;
        }
        function times(n, callback, thisArg) {
            n = (n = +n) > -1 ? n : 0;
            var index = -1, result = Array(n);
            callback = lodash.createCallback(callback, thisArg, 1);
            while (++index < n) {
                result[index] = callback(index);
            }
            return result;
        }
        function unescape(string) {
            return string == null ? "" : String(string).replace(reEscapedHtml, unescapeHtmlChar);
        }
        function uniqueId(prefix) {
            var id = ++idCounter;
            return String(prefix == null ? "" : prefix) + id;
        }
        function tap(value, interceptor) {
            interceptor(value);
            return value;
        }
        function wrapperToString() {
            return String(this.__wrapped__);
        }
        function wrapperValueOf() {
            return this.__wrapped__;
        }
        lodash.after = after;
        lodash.assign = assign;
        lodash.at = at;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.compact = compact;
        lodash.compose = compose;
        lodash.countBy = countBy;
        lodash.createCallback = createCallback;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.filter = filter;
        lodash.flatten = flatten;
        lodash.forEach = forEach;
        lodash.forIn = forIn;
        lodash.forOwn = forOwn;
        lodash.functions = functions;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.invert = invert;
        lodash.invoke = invoke;
        lodash.keys = keys;
        lodash.map = map;
        lodash.max = max;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.min = min;
        lodash.omit = omit;
        lodash.once = once;
        lodash.pairs = pairs;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.pick = pick;
        lodash.pluck = pluck;
        lodash.range = range;
        lodash.reject = reject;
        lodash.rest = rest;
        lodash.shuffle = shuffle;
        lodash.sortBy = sortBy;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.times = times;
        lodash.toArray = toArray;
        lodash.transform = transform;
        lodash.union = union;
        lodash.uniq = uniq;
        lodash.unzip = unzip;
        lodash.values = values;
        lodash.where = where;
        lodash.without = without;
        lodash.wrap = wrap;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.collect = map;
        lodash.drop = rest;
        lodash.each = forEach;
        lodash.extend = assign;
        lodash.methods = functions;
        lodash.object = zipObject;
        lodash.select = filter;
        lodash.tail = rest;
        lodash.unique = uniq;
        mixin(lodash);
        lodash.chain = lodash;
        lodash.prototype.chain = function() {
            return this;
        };
        lodash.clone = clone;
        lodash.cloneDeep = cloneDeep;
        lodash.contains = contains;
        lodash.escape = escape;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.has = has;
        lodash.identity = identity;
        lodash.indexOf = indexOf;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isBoolean = isBoolean;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isFinite = isFinite;
        lodash.isFunction = isFunction;
        lodash.isNaN = isNaN;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isString = isString;
        lodash.isUndefined = isUndefined;
        lodash.lastIndexOf = lastIndexOf;
        lodash.mixin = mixin;
        lodash.noConflict = noConflict;
        lodash.parseInt = parseInt;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.result = result;
        lodash.runInContext = runInContext;
        lodash.size = size;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.template = template;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.all = every;
        lodash.any = some;
        lodash.detect = find;
        lodash.findWhere = find;
        lodash.foldl = reduce;
        lodash.foldr = reduceRight;
        lodash.include = contains;
        lodash.inject = reduce;
        forOwn(lodash, function(func, methodName) {
            if (!lodash.prototype[methodName]) {
                lodash.prototype[methodName] = function() {
                    var args = [ this.__wrapped__ ];
                    push.apply(args, arguments);
                    return func.apply(lodash, args);
                };
            }
        });
        lodash.first = first;
        lodash.last = last;
        lodash.take = first;
        lodash.head = first;
        forOwn(lodash, function(func, methodName) {
            if (!lodash.prototype[methodName]) {
                lodash.prototype[methodName] = function(callback, thisArg) {
                    var result = func(this.__wrapped__, callback, thisArg);
                    return callback == null || thisArg && typeof callback != "function" ? result : new lodashWrapper(result);
                };
            }
        });
        lodash.VERSION = "1.3.1";
        lodash.prototype.toString = wrapperToString;
        lodash.prototype.value = wrapperValueOf;
        lodash.prototype.valueOf = wrapperValueOf;
        basicEach([ "join", "pop", "shift" ], function(methodName) {
            var func = arrayRef[methodName];
            lodash.prototype[methodName] = function() {
                return func.apply(this.__wrapped__, arguments);
            };
        });
        basicEach([ "push", "reverse", "sort", "unshift" ], function(methodName) {
            var func = arrayRef[methodName];
            lodash.prototype[methodName] = function() {
                func.apply(this.__wrapped__, arguments);
                return this;
            };
        });
        basicEach([ "concat", "slice", "splice" ], function(methodName) {
            var func = arrayRef[methodName];
            lodash.prototype[methodName] = function() {
                return new lodashWrapper(func.apply(this.__wrapped__, arguments));
            };
        });
        if (!support.spliceObjects) {
            basicEach([ "pop", "shift", "splice" ], function(methodName) {
                var func = arrayRef[methodName], isSplice = methodName == "splice";
                lodash.prototype[methodName] = function() {
                    var value = this.__wrapped__, result = func.apply(value, arguments);
                    if (value.length === 0) {
                        delete value[0];
                    }
                    return isSplice ? new lodashWrapper(result) : result;
                };
            });
        }
        lodash._basicEach = basicEach;
        lodash._iteratorTemplate = iteratorTemplate;
        lodash._shimKeys = shimKeys;
        return lodash;
    }
    var _ = runInContext();
    if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
        window._ = _;
        define(function() {
            return _;
        });
    } else if (freeExports && !freeExports.nodeType) {
        if (freeModule) {
            (freeModule.exports = _)._ = _;
        } else {
            freeExports._ = _;
        }
    } else {
        window._ = _;
    }
})(this);

!function($) {
    "use strict";
    var Tooltip = function(element, options) {
        this.init("tooltip", element, options);
    };
    Tooltip.prototype = {
        constructor: Tooltip,
        init: function(type, element, options) {
            var eventIn, eventOut, triggers, trigger, i;
            this.type = type;
            this.$element = $(element);
            this.options = this.getOptions(options);
            this.enabled = true;
            triggers = this.options.trigger.split(" ");
            for (i = triggers.length; i--; ) {
                trigger = triggers[i];
                if (trigger == "click") {
                    this.$element.on("click." + this.type, this.options.selector, $.proxy(this.toggle, this));
                } else if (trigger != "manual") {
                    eventIn = trigger == "hover" ? "mouseenter" : "focus";
                    eventOut = trigger == "hover" ? "mouseleave" : "blur";
                    this.$element.on(eventIn + "." + this.type, this.options.selector, $.proxy(this.enter, this));
                    this.$element.on(eventOut + "." + this.type, this.options.selector, $.proxy(this.leave, this));
                }
            }
            this.options.selector ? this._options = $.extend({}, this.options, {
                trigger: "manual",
                selector: ""
            }) : this.fixTitle();
        },
        getOptions: function(options) {
            options = $.extend({}, $.fn[this.type].defaults, this.$element.data(), options);
            if (options.delay && typeof options.delay == "number") {
                options.delay = {
                    show: options.delay,
                    hide: options.delay
                };
            }
            return options;
        },
        enter: function(e) {
            var defaults = $.fn[this.type].defaults, options = {}, self;
            this._options && $.each(this._options, function(key, value) {
                if (defaults[key] != value) options[key] = value;
            }, this);
            self = $(e.currentTarget)[this.type](options).data(this.type);
            if (!self.options.delay || !self.options.delay.show) return self.show();
            clearTimeout(this.timeout);
            self.hoverState = "in";
            this.timeout = setTimeout(function() {
                if (self.hoverState == "in") self.show();
            }, self.options.delay.show);
        },
        leave: function(e) {
            var self = $(e.currentTarget)[this.type](this._options).data(this.type);
            if (this.timeout) clearTimeout(this.timeout);
            if (!self.options.delay || !self.options.delay.hide) return self.hide();
            self.hoverState = "out";
            this.timeout = setTimeout(function() {
                if (self.hoverState == "out") self.hide();
            }, self.options.delay.hide);
        },
        show: function() {
            var $tip, pos, actualWidth, actualHeight, placement, tp, e = $.Event("show");
            if (this.hasContent() && this.enabled) {
                this.$element.trigger(e);
                if (e.isDefaultPrevented()) return;
                $tip = this.tip();
                this.setContent();
                if (this.options.animation) {
                    $tip.addClass("fade");
                }
                placement = typeof this.options.placement == "function" ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement;
                $tip.detach().css({
                    top: 0,
                    left: 0,
                    display: "block"
                });
                this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element);
                pos = this.getPosition();
                actualWidth = $tip[0].offsetWidth;
                actualHeight = $tip[0].offsetHeight;
                switch (placement) {
                  case "bottom":
                    tp = {
                        top: pos.top + pos.height,
                        left: pos.left + pos.width / 2 - actualWidth / 2
                    };
                    break;

                  case "top":
                    tp = {
                        top: pos.top - actualHeight,
                        left: pos.left + pos.width / 2 - actualWidth / 2
                    };
                    break;

                  case "left":
                    tp = {
                        top: pos.top + pos.height / 2 - actualHeight / 2,
                        left: pos.left - actualWidth
                    };
                    break;

                  case "right":
                    tp = {
                        top: pos.top + pos.height / 2 - actualHeight / 2,
                        left: pos.left + pos.width
                    };
                    break;
                }
                this.applyPlacement(tp, placement);
                this.$element.trigger("shown");
            }
        },
        applyPlacement: function(offset, placement) {
            var $tip = this.tip(), width = $tip[0].offsetWidth, height = $tip[0].offsetHeight, actualWidth, actualHeight, delta, replace;
            $tip.offset(offset).addClass(placement).addClass("in");
            actualWidth = $tip[0].offsetWidth;
            actualHeight = $tip[0].offsetHeight;
            if (placement == "top" && actualHeight != height) {
                offset.top = offset.top + height - actualHeight;
                replace = true;
            }
            if (placement == "bottom" || placement == "top") {
                delta = 0;
                if (offset.left < 0) {
                    delta = offset.left * -2;
                    offset.left = 0;
                    $tip.offset(offset);
                    actualWidth = $tip[0].offsetWidth;
                    actualHeight = $tip[0].offsetHeight;
                }
                this.replaceArrow(delta - width + actualWidth, actualWidth, "left");
            } else {
                this.replaceArrow(actualHeight - height, actualHeight, "top");
            }
            if (replace) $tip.offset(offset);
        },
        replaceArrow: function(delta, dimension, position) {
            this.arrow().css(position, delta ? 50 * (1 - delta / dimension) + "%" : "");
        },
        setContent: function() {
            var $tip = this.tip(), title = this.getTitle();
            $tip.find(".tooltip-inner")[this.options.html ? "html" : "text"](title);
            $tip.removeClass("fade in top bottom left right");
        },
        hide: function() {
            var that = this, $tip = this.tip(), e = $.Event("hide");
            this.$element.trigger(e);
            if (e.isDefaultPrevented()) return;
            $tip.removeClass("in");
            function removeWithAnimation() {
                var timeout = setTimeout(function() {
                    $tip.off($.support.transition.end).detach();
                }, 500);
                $tip.one($.support.transition.end, function() {
                    clearTimeout(timeout);
                    $tip.detach();
                });
            }
            $.support.transition && this.$tip.hasClass("fade") ? removeWithAnimation() : $tip.detach();
            this.$element.trigger("hidden");
            return this;
        },
        fixTitle: function() {
            var $e = this.$element;
            if ($e.attr("title") || typeof $e.attr("data-original-title") != "string") {
                $e.attr("data-original-title", $e.attr("title") || "").attr("title", "");
            }
        },
        hasContent: function() {
            return this.getTitle();
        },
        getPosition: function() {
            var el = this.$element[0];
            return $.extend({}, typeof el.getBoundingClientRect == "function" ? el.getBoundingClientRect() : {
                width: el.offsetWidth,
                height: el.offsetHeight
            }, this.$element.offset());
        },
        getTitle: function() {
            var title, $e = this.$element, o = this.options;
            title = $e.attr("data-original-title") || (typeof o.title == "function" ? o.title.call($e[0]) : o.title);
            return title;
        },
        tip: function() {
            return this.$tip = this.$tip || $(this.options.template);
        },
        arrow: function() {
            return this.$arrow = this.$arrow || this.tip().find(".tooltip-arrow");
        },
        validate: function() {
            if (!this.$element[0].parentNode) {
                this.hide();
                this.$element = null;
                this.options = null;
            }
        },
        enable: function() {
            this.enabled = true;
        },
        disable: function() {
            this.enabled = false;
        },
        toggleEnabled: function() {
            this.enabled = !this.enabled;
        },
        toggle: function(e) {
            var self = e ? $(e.currentTarget)[this.type](this._options).data(this.type) : this;
            self.tip().hasClass("in") ? self.hide() : self.show();
        },
        destroy: function() {
            this.hide().$element.off("." + this.type).removeData(this.type);
        }
    };
    var old = $.fn.tooltip;
    $.fn.tooltip = function(option) {
        return this.each(function() {
            var $this = $(this), data = $this.data("tooltip"), options = typeof option == "object" && option;
            if (!data) $this.data("tooltip", data = new Tooltip(this, options));
            if (typeof option == "string") data[option]();
        });
    };
    $.fn.tooltip.Constructor = Tooltip;
    $.fn.tooltip.defaults = {
        animation: true,
        placement: "top",
        selector: false,
        template: '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
        trigger: "hover focus",
        title: "",
        delay: 0,
        html: false,
        container: false
    };
    $.fn.tooltip.noConflict = function() {
        $.fn.tooltip = old;
        return this;
    };
}(window.jQuery);

(function() {
    var SelectParser;
    SelectParser = function() {
        function SelectParser() {
            this.options_index = 0;
            this.parsed = [];
        }
        SelectParser.prototype.add_node = function(child) {
            if (child.nodeName.toUpperCase() === "OPTGROUP") {
                return this.add_group(child);
            } else {
                return this.add_option(child);
            }
        };
        SelectParser.prototype.add_group = function(group) {
            var group_position, option, _i, _len, _ref, _results;
            group_position = this.parsed.length;
            this.parsed.push({
                array_index: group_position,
                group: true,
                label: group.label,
                children: 0,
                disabled: group.disabled
            });
            _ref = group.childNodes;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                option = _ref[_i];
                _results.push(this.add_option(option, group_position, group.disabled));
            }
            return _results;
        };
        SelectParser.prototype.add_option = function(option, group_position, group_disabled) {
            if (option.nodeName.toUpperCase() === "OPTION") {
                if (option.text !== "") {
                    if (group_position != null) {
                        this.parsed[group_position].children += 1;
                    }
                    this.parsed.push({
                        array_index: this.parsed.length,
                        options_index: this.options_index,
                        value: option.value,
                        text: option.text,
                        html: option.innerHTML,
                        selected: option.selected,
                        disabled: group_disabled === true ? group_disabled : option.disabled,
                        group_array_index: group_position,
                        classes: option.className,
                        style: option.style.cssText
                    });
                } else {
                    this.parsed.push({
                        array_index: this.parsed.length,
                        options_index: this.options_index,
                        empty: true
                    });
                }
                return this.options_index += 1;
            }
        };
        return SelectParser;
    }();
    SelectParser.select_to_array = function(select) {
        var child, parser, _i, _len, _ref;
        parser = new SelectParser();
        _ref = select.childNodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            parser.add_node(child);
        }
        return parser.parsed;
    };
    this.SelectParser = SelectParser;
}).call(this);

(function() {
    var AbstractChosen, root;
    root = this;
    AbstractChosen = function() {
        function AbstractChosen(form_field, options) {
            this.form_field = form_field;
            this.options = options != null ? options : {};
            if (!AbstractChosen.browser_is_supported()) {
                return;
            }
            this.is_multiple = this.form_field.multiple;
            this.set_default_text();
            this.set_default_values();
            this.setup();
            this.set_up_html();
            this.register_observers();
            this.finish_setup();
        }
        AbstractChosen.prototype.set_default_values = function() {
            var _this = this;
            this.click_test_action = function(evt) {
                return _this.test_active_click(evt);
            };
            this.activate_action = function(evt) {
                return _this.activate_field(evt);
            };
            this.active_field = false;
            this.mouse_on_container = false;
            this.results_showing = false;
            this.result_highlighted = null;
            this.result_single_selected = null;
            this.allow_single_deselect = this.options.allow_single_deselect != null && this.form_field.options[0] != null && this.form_field.options[0].text === "" ? this.options.allow_single_deselect : false;
            this.disable_search_threshold = this.options.disable_search_threshold || 0;
            this.disable_search = this.options.disable_search || false;
            this.enable_split_word_search = this.options.enable_split_word_search != null ? this.options.enable_split_word_search : true;
            this.search_contains = this.options.search_contains || false;
            this.single_backstroke_delete = this.options.single_backstroke_delete || false;
            this.max_selected_options = this.options.max_selected_options || Infinity;
            return this.inherit_select_classes = this.options.inherit_select_classes || false;
        };
        AbstractChosen.prototype.set_default_text = function() {
            if (this.form_field.getAttribute("data-placeholder")) {
                this.default_text = this.form_field.getAttribute("data-placeholder");
            } else if (this.is_multiple) {
                this.default_text = this.options.placeholder_text_multiple || this.options.placeholder_text || AbstractChosen.default_multiple_text;
            } else {
                this.default_text = this.options.placeholder_text_single || this.options.placeholder_text || AbstractChosen.default_single_text;
            }
            return this.results_none_found = this.form_field.getAttribute("data-no_results_text") || this.options.no_results_text || AbstractChosen.default_no_result_text;
        };
        AbstractChosen.prototype.mouse_enter = function() {
            return this.mouse_on_container = true;
        };
        AbstractChosen.prototype.mouse_leave = function() {
            return this.mouse_on_container = false;
        };
        AbstractChosen.prototype.input_focus = function(evt) {
            var _this = this;
            if (this.is_multiple) {
                if (!this.active_field) {
                    return setTimeout(function() {
                        return _this.container_mousedown();
                    }, 50);
                }
            } else {
                if (!this.active_field) {
                    return this.activate_field();
                }
            }
        };
        AbstractChosen.prototype.input_blur = function(evt) {
            var _this = this;
            if (!this.mouse_on_container) {
                this.active_field = false;
                return setTimeout(function() {
                    return _this.blur_test();
                }, 100);
            }
        };
        AbstractChosen.prototype.result_add_option = function(option) {
            var classes, style;
            option.dom_id = this.container_id + "_o_" + option.array_index;
            classes = [];
            if (!option.disabled && !(option.selected && this.is_multiple)) {
                classes.push("active-result");
            }
            if (option.disabled && !(option.selected && this.is_multiple)) {
                classes.push("disabled-result");
            }
            if (option.selected) {
                classes.push("result-selected");
            }
            if (option.group_array_index != null) {
                classes.push("group-option");
            }
            if (option.classes !== "") {
                classes.push(option.classes);
            }
            style = option.style.cssText !== "" ? ' style="' + option.style + '"' : "";
            return '<li id="' + option.dom_id + '" class="' + classes.join(" ") + '"' + style + ">" + option.html + "</li>";
        };
        AbstractChosen.prototype.results_update_field = function() {
            this.set_default_text();
            if (!this.is_multiple) {
                this.results_reset_cleanup();
            }
            this.result_clear_highlight();
            this.result_single_selected = null;
            return this.results_build();
        };
        AbstractChosen.prototype.results_toggle = function() {
            if (this.results_showing) {
                return this.results_hide();
            } else {
                return this.results_show();
            }
        };
        AbstractChosen.prototype.results_search = function(evt) {
            if (this.results_showing) {
                return this.winnow_results();
            } else {
                return this.results_show();
            }
        };
        AbstractChosen.prototype.choices_count = function() {
            var option, _i, _len, _ref;
            if (this.selected_option_count != null) {
                return this.selected_option_count;
            }
            this.selected_option_count = 0;
            _ref = this.form_field.options;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                option = _ref[_i];
                if (option.selected) {
                    this.selected_option_count += 1;
                }
            }
            return this.selected_option_count;
        };
        AbstractChosen.prototype.choices_click = function(evt) {
            evt.preventDefault();
            if (!(this.results_showing || this.is_disabled)) {
                return this.results_show();
            }
        };
        AbstractChosen.prototype.keyup_checker = function(evt) {
            var stroke, _ref;
            stroke = (_ref = evt.which) != null ? _ref : evt.keyCode;
            this.search_field_scale();
            switch (stroke) {
              case 8:
                if (this.is_multiple && this.backstroke_length < 1 && this.choices_count() > 0) {
                    return this.keydown_backstroke();
                } else if (!this.pending_backstroke) {
                    this.result_clear_highlight();
                    return this.results_search();
                }
                break;

              case 13:
                evt.preventDefault();
                if (this.results_showing) {
                    return this.result_select(evt);
                }
                break;

              case 27:
                if (this.results_showing) {
                    this.results_hide();
                }
                return true;

              case 9:
              case 38:
              case 40:
              case 16:
              case 91:
              case 17:
                break;

              default:
                return this.results_search();
            }
        };
        AbstractChosen.prototype.generate_field_id = function() {
            var new_id;
            new_id = this.generate_random_id();
            this.form_field.id = new_id;
            return new_id;
        };
        AbstractChosen.prototype.generate_random_char = function() {
            var chars, newchar, rand;
            chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            rand = Math.floor(Math.random() * chars.length);
            return newchar = chars.substring(rand, rand + 1);
        };
        AbstractChosen.prototype.container_width = function() {
            if (this.options.width != null) {
                return this.options.width;
            } else {
                return "" + this.form_field.offsetWidth + "px";
            }
        };
        AbstractChosen.browser_is_supported = function() {
            var _ref;
            if (window.navigator.appName === "Microsoft Internet Explorer") {
                return null !== (_ref = document.documentMode) && _ref >= 8;
            }
            return true;
        };
        AbstractChosen.default_multiple_text = "Select Some Options";
        AbstractChosen.default_single_text = "Select an Option";
        AbstractChosen.default_no_result_text = "No results match";
        return AbstractChosen;
    }();
    root.AbstractChosen = AbstractChosen;
}).call(this);

(function() {
    var $, Chosen, root, _ref, __hasProp = {}.hasOwnProperty, __extends = function(child, parent) {
        for (var key in parent) {
            if (__hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
    };
    root = this;
    $ = jQuery;
    $.fn.extend({
        chosen: function(options) {
            if (!AbstractChosen.browser_is_supported()) {
                return this;
            }
            return this.each(function(input_field) {
                var $this;
                $this = $(this);
                if (!$this.hasClass("chzn-done")) {
                    return $this.data("chosen", new Chosen(this, options));
                }
            });
        }
    });
    Chosen = function(_super) {
        __extends(Chosen, _super);
        function Chosen() {
            _ref = Chosen.__super__.constructor.apply(this, arguments);
            return _ref;
        }
        Chosen.prototype.setup = function() {
            this.form_field_jq = $(this.form_field);
            this.current_selectedIndex = this.form_field.selectedIndex;
            return this.is_rtl = this.form_field_jq.hasClass("chzn-rtl");
        };
        Chosen.prototype.finish_setup = function() {
            return this.form_field_jq.addClass("chzn-done");
        };
        Chosen.prototype.set_up_html = function() {
            var container_classes, container_props;
            this.container_id = this.form_field.id.length ? this.form_field.id.replace(/[^\w]/g, "_") : this.generate_field_id();
            this.container_id += "_chzn";
            container_classes = [ "chzn-container" ];
            container_classes.push("chzn-container-" + (this.is_multiple ? "multi" : "single"));
            if (this.inherit_select_classes && this.form_field.className) {
                container_classes.push(this.form_field.className);
            }
            if (this.is_rtl) {
                container_classes.push("chzn-rtl");
            }
            container_props = {
                id: this.container_id,
                "class": container_classes.join(" "),
                style: "width: " + this.container_width() + ";",
                title: this.form_field.title
            };
            this.container = $("<div />", container_props);
            if (this.is_multiple) {
                this.container.html('<ul class="chzn-choices"><li class="search-field"><input type="text" value="' + this.default_text + '" class="default" autocomplete="off" style="width:25px;" /></li></ul><div class="chzn-drop"><ul class="chzn-results"></ul></div>');
            } else {
                this.container.html('<a href="javascript:void(0)" class="chzn-single chzn-default" tabindex="-1"><span>' + this.default_text + '</span><div><b></b></div></a><div class="chzn-drop"><div class="chzn-search"><input type="text" autocomplete="off" /></div><ul class="chzn-results"></ul></div>');
            }
            this.form_field_jq.hide().after(this.container);
            this.dropdown = this.container.find("div.chzn-drop").first();
            this.search_field = this.container.find("input").first();
            this.search_results = this.container.find("ul.chzn-results").first();
            this.search_field_scale();
            this.search_no_results = this.container.find("li.no-results").first();
            if (this.is_multiple) {
                this.search_choices = this.container.find("ul.chzn-choices").first();
                this.search_container = this.container.find("li.search-field").first();
            } else {
                this.search_container = this.container.find("div.chzn-search").first();
                this.selected_item = this.container.find(".chzn-single").first();
            }
            this.results_build();
            this.set_tab_index();
            this.set_label_behavior();
            return this.form_field_jq.trigger("liszt:ready", {
                chosen: this
            });
        };
        Chosen.prototype.register_observers = function() {
            var _this = this;
            this.container.mousedown(function(evt) {
                _this.container_mousedown(evt);
            });
            this.container.mouseup(function(evt) {
                _this.container_mouseup(evt);
            });
            this.container.mouseenter(function(evt) {
                _this.mouse_enter(evt);
            });
            this.container.mouseleave(function(evt) {
                _this.mouse_leave(evt);
            });
            this.search_results.mouseup(function(evt) {
                _this.search_results_mouseup(evt);
            });
            this.search_results.mouseover(function(evt) {
                _this.search_results_mouseover(evt);
            });
            this.search_results.mouseout(function(evt) {
                _this.search_results_mouseout(evt);
            });
            this.search_results.bind("mousewheel DOMMouseScroll", function(evt) {
                _this.search_results_mousewheel(evt);
            });
            this.form_field_jq.bind("liszt:updated", function(evt) {
                _this.results_update_field(evt);
            });
            this.form_field_jq.bind("liszt:activate", function(evt) {
                _this.activate_field(evt);
            });
            this.form_field_jq.bind("liszt:open", function(evt) {
                _this.container_mousedown(evt);
            });
            this.search_field.blur(function(evt) {
                _this.input_blur(evt);
            });
            this.search_field.keyup(function(evt) {
                _this.keyup_checker(evt);
            });
            this.search_field.keydown(function(evt) {
                _this.keydown_checker(evt);
            });
            this.search_field.focus(function(evt) {
                _this.input_focus(evt);
            });
            if (this.is_multiple) {
                return this.search_choices.click(function(evt) {
                    _this.choices_click(evt);
                });
            } else {
                return this.container.click(function(evt) {
                    evt.preventDefault();
                });
            }
        };
        Chosen.prototype.search_field_disabled = function() {
            this.is_disabled = this.form_field_jq[0].disabled;
            if (this.is_disabled) {
                this.container.addClass("chzn-disabled");
                this.search_field[0].disabled = true;
                if (!this.is_multiple) {
                    this.selected_item.unbind("focus", this.activate_action);
                }
                return this.close_field();
            } else {
                this.container.removeClass("chzn-disabled");
                this.search_field[0].disabled = false;
                if (!this.is_multiple) {
                    return this.selected_item.bind("focus", this.activate_action);
                }
            }
        };
        Chosen.prototype.container_mousedown = function(evt) {
            if (!this.is_disabled) {
                if (evt && evt.type === "mousedown" && !this.results_showing) {
                    evt.preventDefault();
                }
                if (!(evt != null && $(evt.target).hasClass("search-choice-close"))) {
                    if (!this.active_field) {
                        if (this.is_multiple) {
                            this.search_field.val("");
                        }
                        $(document).click(this.click_test_action);
                        this.results_show();
                    } else if (!this.is_multiple && evt && ($(evt.target)[0] === this.selected_item[0] || $(evt.target).parents("a.chzn-single").length)) {
                        evt.preventDefault();
                        this.results_toggle();
                    }
                    return this.activate_field();
                }
            }
        };
        Chosen.prototype.container_mouseup = function(evt) {
            if (evt.target.nodeName === "ABBR" && !this.is_disabled) {
                return this.results_reset(evt);
            }
        };
        Chosen.prototype.search_results_mousewheel = function(evt) {
            var delta, _ref1, _ref2;
            delta = -((_ref1 = evt.originalEvent) != null ? _ref1.wheelDelta : void 0) || ((_ref2 = evt.originialEvent) != null ? _ref2.detail : void 0);
            if (delta != null) {
                evt.preventDefault();
                if (evt.type === "DOMMouseScroll") {
                    delta = delta * 40;
                }
                return this.search_results.scrollTop(delta + this.search_results.scrollTop());
            }
        };
        Chosen.prototype.blur_test = function(evt) {
            if (!this.active_field && this.container.hasClass("chzn-container-active")) {
                return this.close_field();
            }
        };
        Chosen.prototype.close_field = function() {
            $(document).unbind("click", this.click_test_action);
            this.active_field = false;
            this.results_hide();
            this.container.removeClass("chzn-container-active");
            this.clear_backstroke();
            this.show_search_field_default();
            return this.search_field_scale();
        };
        Chosen.prototype.activate_field = function() {
            this.container.addClass("chzn-container-active");
            this.active_field = true;
            this.search_field.val(this.search_field.val());
            return this.search_field.focus();
        };
        Chosen.prototype.test_active_click = function(evt) {
            if ($(evt.target).parents("#" + this.container_id).length) {
                return this.active_field = true;
            } else {
                return this.close_field();
            }
        };
        Chosen.prototype.results_build = function() {
            var content, data, _i, _len, _ref1;
            this.parsing = true;
            this.selected_option_count = null;
            this.results_data = root.SelectParser.select_to_array(this.form_field);
            if (this.is_multiple) {
                this.search_choices.find("li.search-choice").remove();
            } else if (!this.is_multiple) {
                this.selected_item.addClass("chzn-default").find("span").text(this.default_text);
                if (this.disable_search || this.form_field.options.length <= this.disable_search_threshold) {
                    this.search_field[0].readOnly = true;
                    this.container.addClass("chzn-container-single-nosearch");
                } else {
                    this.search_field[0].readOnly = false;
                    this.container.removeClass("chzn-container-single-nosearch");
                }
            }
            content = "";
            _ref1 = this.results_data;
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                data = _ref1[_i];
                if (data.group) {
                    content += this.result_add_group(data);
                } else if (!data.empty) {
                    content += this.result_add_option(data);
                    if (data.selected && this.is_multiple) {
                        this.choice_build(data);
                    } else if (data.selected && !this.is_multiple) {
                        this.selected_item.removeClass("chzn-default").find("span").text(data.text);
                        if (this.allow_single_deselect) {
                            this.single_deselect_control_build();
                        }
                    }
                }
            }
            this.search_field_disabled();
            this.show_search_field_default();
            this.search_field_scale();
            this.search_results.html(content);
            return this.parsing = false;
        };
        Chosen.prototype.result_add_group = function(group) {
            group.dom_id = this.container_id + "_g_" + group.array_index;
            return '<li id="' + group.dom_id + '" class="group-result">' + $("<div />").text(group.label).html() + "</li>";
        };
        Chosen.prototype.result_do_highlight = function(el) {
            var high_bottom, high_top, maxHeight, visible_bottom, visible_top;
            if (el.length) {
                this.result_clear_highlight();
                this.result_highlight = el;
                this.result_highlight.addClass("highlighted");
                maxHeight = parseInt(this.search_results.css("maxHeight"), 10);
                visible_top = this.search_results.scrollTop();
                visible_bottom = maxHeight + visible_top;
                high_top = this.result_highlight.position().top + this.search_results.scrollTop();
                high_bottom = high_top + this.result_highlight.outerHeight();
                if (high_bottom >= visible_bottom) {
                    return this.search_results.scrollTop(high_bottom - maxHeight > 0 ? high_bottom - maxHeight : 0);
                } else if (high_top < visible_top) {
                    return this.search_results.scrollTop(high_top);
                }
            }
        };
        Chosen.prototype.result_clear_highlight = function() {
            if (this.result_highlight) {
                this.result_highlight.removeClass("highlighted");
            }
            return this.result_highlight = null;
        };
        Chosen.prototype.results_show = function() {
            if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
                this.form_field_jq.trigger("liszt:maxselected", {
                    chosen: this
                });
                return false;
            }
            this.container.addClass("chzn-with-drop");
            this.form_field_jq.trigger("liszt:showing_dropdown", {
                chosen: this
            });
            this.results_showing = true;
            this.search_field.focus();
            this.search_field.val(this.search_field.val());
            return this.winnow_results();
        };
        Chosen.prototype.results_hide = function() {
            if (this.results_showing) {
                this.result_clear_highlight();
                this.container.removeClass("chzn-with-drop");
                this.form_field_jq.trigger("liszt:hiding_dropdown", {
                    chosen: this
                });
            }
            return this.results_showing = false;
        };
        Chosen.prototype.set_tab_index = function(el) {
            var ti;
            if (this.form_field_jq.attr("tabindex")) {
                ti = this.form_field_jq.attr("tabindex");
                this.form_field_jq.attr("tabindex", -1);
                return this.search_field.attr("tabindex", ti);
            }
        };
        Chosen.prototype.set_label_behavior = function() {
            var _this = this;
            this.form_field_label = this.form_field_jq.parents("label");
            if (!this.form_field_label.length && this.form_field.id.length) {
                this.form_field_label = $("label[for='" + this.form_field.id + "']");
            }
            if (this.form_field_label.length > 0) {
                return this.form_field_label.click(function(evt) {
                    if (_this.is_multiple) {
                        return _this.container_mousedown(evt);
                    } else {
                        return _this.activate_field();
                    }
                });
            }
        };
        Chosen.prototype.show_search_field_default = function() {
            if (this.is_multiple && this.choices_count() < 1 && !this.active_field) {
                this.search_field.val(this.default_text);
                return this.search_field.addClass("default");
            } else {
                this.search_field.val("");
                return this.search_field.removeClass("default");
            }
        };
        Chosen.prototype.search_results_mouseup = function(evt) {
            var target;
            target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
            if (target.length) {
                this.result_highlight = target;
                this.result_select(evt);
                return this.search_field.focus();
            }
        };
        Chosen.prototype.search_results_mouseover = function(evt) {
            var target;
            target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
            if (target) {
                return this.result_do_highlight(target);
            }
        };
        Chosen.prototype.search_results_mouseout = function(evt) {
            if ($(evt.target).hasClass("active-result" || $(evt.target).parents(".active-result").first())) {
                return this.result_clear_highlight();
            }
        };
        Chosen.prototype.choice_build = function(item) {
            var choice, close_link, _this = this;
            choice = $("<li />", {
                "class": "search-choice"
            }).html("<span>" + item.html + "</span>");
            if (item.disabled) {
                choice.addClass("search-choice-disabled");
            } else {
                close_link = $("<a />", {
                    href: "#",
                    "class": "search-choice-close",
                    rel: item.array_index
                });
                close_link.click(function(evt) {
                    return _this.choice_destroy_link_click(evt);
                });
                choice.append(close_link);
            }
            return this.search_container.before(choice);
        };
        Chosen.prototype.choice_destroy_link_click = function(evt) {
            evt.preventDefault();
            evt.stopPropagation();
            if (!this.is_disabled) {
                return this.choice_destroy($(evt.target));
            }
        };
        Chosen.prototype.choice_destroy = function(link) {
            if (this.result_deselect(link.attr("rel"))) {
                this.show_search_field_default();
                if (this.is_multiple && this.choices_count() > 0 && this.search_field.val().length < 1) {
                    this.results_hide();
                }
                link.parents("li").first().remove();
                return this.search_field_scale();
            }
        };
        Chosen.prototype.results_reset = function() {
            this.form_field.options[0].selected = true;
            this.selected_option_count = null;
            this.selected_item.find("span").text(this.default_text);
            if (!this.is_multiple) {
                this.selected_item.addClass("chzn-default");
            }
            this.show_search_field_default();
            this.results_reset_cleanup();
            this.form_field_jq.trigger("change");
            if (this.active_field) {
                return this.results_hide();
            }
        };
        Chosen.prototype.results_reset_cleanup = function() {
            this.current_selectedIndex = this.form_field.selectedIndex;
            return this.selected_item.find("abbr").remove();
        };
        Chosen.prototype.result_select = function(evt) {
            var high, high_id, item, position;
            if (this.result_highlight) {
                high = this.result_highlight;
                high_id = high.attr("id");
                this.result_clear_highlight();
                if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
                    this.form_field_jq.trigger("liszt:maxselected", {
                        chosen: this
                    });
                    return false;
                }
                if (this.is_multiple) {
                    high.removeClass("active-result");
                } else {
                    this.search_results.find(".result-selected").removeClass("result-selected");
                    this.result_single_selected = high;
                    this.selected_item.removeClass("chzn-default");
                }
                high.addClass("result-selected");
                position = high_id.substr(high_id.lastIndexOf("_") + 1);
                item = this.results_data[position];
                item.selected = true;
                this.form_field.options[item.options_index].selected = true;
                this.selected_option_count = null;
                if (this.is_multiple) {
                    this.choice_build(item);
                } else {
                    this.selected_item.find("span").first().text(item.text);
                    if (this.allow_single_deselect) {
                        this.single_deselect_control_build();
                    }
                }
                if (!((evt.metaKey || evt.ctrlKey) && this.is_multiple)) {
                    this.results_hide();
                }
                this.search_field.val("");
                if (this.is_multiple || this.form_field.selectedIndex !== this.current_selectedIndex) {
                    this.form_field_jq.trigger("change", {
                        selected: this.form_field.options[item.options_index].value
                    });
                }
                this.current_selectedIndex = this.form_field.selectedIndex;
                return this.search_field_scale();
            }
        };
        Chosen.prototype.result_activate = function(el, option) {
            if (option.disabled) {
                return el.addClass("disabled-result");
            } else if (this.is_multiple && option.selected) {
                return el.addClass("result-selected");
            } else {
                return el.addClass("active-result");
            }
        };
        Chosen.prototype.result_deactivate = function(el) {
            return el.removeClass("active-result result-selected disabled-result");
        };
        Chosen.prototype.result_deselect = function(pos) {
            var result, result_data;
            result_data = this.results_data[pos];
            if (!this.form_field.options[result_data.options_index].disabled) {
                result_data.selected = false;
                this.form_field.options[result_data.options_index].selected = false;
                this.selected_option_count = null;
                result = $("#" + this.container_id + "_o_" + pos);
                result.removeClass("result-selected").addClass("active-result").show();
                this.result_clear_highlight();
                this.winnow_results();
                this.form_field_jq.trigger("change", {
                    deselected: this.form_field.options[result_data.options_index].value
                });
                this.search_field_scale();
                return true;
            } else {
                return false;
            }
        };
        Chosen.prototype.single_deselect_control_build = function() {
            if (!this.allow_single_deselect) {
                return;
            }
            if (!this.selected_item.find("abbr").length) {
                this.selected_item.find("span").first().after('<abbr class="search-choice-close"></abbr>');
            }
            return this.selected_item.addClass("chzn-single-with-deselect");
        };
        Chosen.prototype.winnow_results = function() {
            var found, option, part, parts, regex, regexAnchor, result, result_id, results, searchText, startpos, text, zregex, _i, _j, _len, _len1, _ref1;
            this.no_results_clear();
            results = 0;
            searchText = this.search_field.val() === this.default_text ? "" : $("<div/>").text($.trim(this.search_field.val())).html();
            regexAnchor = this.search_contains ? "" : "^";
            regex = new RegExp(regexAnchor + searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"), "i");
            zregex = new RegExp(searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"), "i");
            _ref1 = this.results_data;
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                option = _ref1[_i];
                if (!option.empty) {
                    if (option.group) {
                        $("#" + option.dom_id).css("display", "none");
                    } else {
                        found = false;
                        result_id = option.dom_id;
                        result = $("#" + result_id);
                        if (regex.test(option.html)) {
                            found = true;
                            results += 1;
                        } else if (this.enable_split_word_search && (option.html.indexOf(" ") >= 0 || option.html.indexOf("[") === 0)) {
                            parts = option.html.replace(/\[|\]/g, "").split(" ");
                            if (parts.length) {
                                for (_j = 0, _len1 = parts.length; _j < _len1; _j++) {
                                    part = parts[_j];
                                    if (regex.test(part)) {
                                        found = true;
                                        results += 1;
                                    }
                                }
                            }
                        }
                        if (found) {
                            if (searchText.length) {
                                startpos = option.html.search(zregex);
                                text = option.html.substr(0, startpos + searchText.length) + "</em>" + option.html.substr(startpos + searchText.length);
                                text = text.substr(0, startpos) + "<em>" + text.substr(startpos);
                            } else {
                                text = option.html;
                            }
                            result.html(text);
                            this.result_activate(result, option);
                            if (option.group_array_index != null) {
                                $("#" + this.results_data[option.group_array_index].dom_id).css("display", "list-item");
                            }
                        } else {
                            if (this.result_highlight && result_id === this.result_highlight.attr("id")) {
                                this.result_clear_highlight();
                            }
                            this.result_deactivate(result);
                        }
                    }
                }
            }
            if (results < 1 && searchText.length) {
                return this.no_results(searchText);
            } else {
                return this.winnow_results_set_highlight();
            }
        };
        Chosen.prototype.winnow_results_set_highlight = function() {
            var do_high, selected_results;
            if (!this.result_highlight) {
                selected_results = !this.is_multiple ? this.search_results.find(".result-selected.active-result") : [];
                do_high = selected_results.length ? selected_results.first() : this.search_results.find(".active-result").first();
                if (do_high != null) {
                    return this.result_do_highlight(do_high);
                }
            }
        };
        Chosen.prototype.no_results = function(terms) {
            var no_results_html;
            no_results_html = $('<li class="no-results">' + this.results_none_found + ' "<span></span>"</li>');
            no_results_html.find("span").first().html(terms);
            return this.search_results.append(no_results_html);
        };
        Chosen.prototype.no_results_clear = function() {
            return this.search_results.find(".no-results").remove();
        };
        Chosen.prototype.keydown_arrow = function() {
            var next_sib;
            if (this.results_showing && this.result_highlight) {
                next_sib = this.result_highlight.nextAll("li.active-result").first();
                if (next_sib) {
                    return this.result_do_highlight(next_sib);
                }
            } else {
                return this.results_show();
            }
        };
        Chosen.prototype.keyup_arrow = function() {
            var prev_sibs;
            if (!this.results_showing && !this.is_multiple) {
                return this.results_show();
            } else if (this.result_highlight) {
                prev_sibs = this.result_highlight.prevAll("li.active-result");
                if (prev_sibs.length) {
                    return this.result_do_highlight(prev_sibs.first());
                } else {
                    if (this.choices_count() > 0) {
                        this.results_hide();
                    }
                    return this.result_clear_highlight();
                }
            }
        };
        Chosen.prototype.keydown_backstroke = function() {
            var next_available_destroy;
            if (this.pending_backstroke) {
                this.choice_destroy(this.pending_backstroke.find("a").first());
                return this.clear_backstroke();
            } else {
                next_available_destroy = this.search_container.siblings("li.search-choice").last();
                if (next_available_destroy.length && !next_available_destroy.hasClass("search-choice-disabled")) {
                    this.pending_backstroke = next_available_destroy;
                    if (this.single_backstroke_delete) {
                        return this.keydown_backstroke();
                    } else {
                        return this.pending_backstroke.addClass("search-choice-focus");
                    }
                }
            }
        };
        Chosen.prototype.clear_backstroke = function() {
            if (this.pending_backstroke) {
                this.pending_backstroke.removeClass("search-choice-focus");
            }
            return this.pending_backstroke = null;
        };
        Chosen.prototype.keydown_checker = function(evt) {
            var stroke, _ref1;
            stroke = (_ref1 = evt.which) != null ? _ref1 : evt.keyCode;
            this.search_field_scale();
            if (stroke !== 8 && this.pending_backstroke) {
                this.clear_backstroke();
            }
            switch (stroke) {
              case 8:
                this.backstroke_length = this.search_field.val().length;
                break;

              case 9:
                if (this.results_showing && !this.is_multiple) {
                    this.result_select(evt);
                }
                this.mouse_on_container = false;
                break;

              case 13:
                evt.preventDefault();
                break;

              case 38:
                evt.preventDefault();
                this.keyup_arrow();
                break;

              case 40:
                evt.preventDefault();
                this.keydown_arrow();
                break;
            }
        };
        Chosen.prototype.search_field_scale = function() {
            var div, h, style, style_block, styles, w, _i, _len;
            if (this.is_multiple) {
                h = 0;
                w = 0;
                style_block = "position:absolute; left: -1000px; top: -1000px; display:none;";
                styles = [ "font-size", "font-style", "font-weight", "font-family", "line-height", "text-transform", "letter-spacing" ];
                for (_i = 0, _len = styles.length; _i < _len; _i++) {
                    style = styles[_i];
                    style_block += style + ":" + this.search_field.css(style) + ";";
                }
                div = $("<div />", {
                    style: style_block
                });
                div.text(this.search_field.val());
                $("body").append(div);
                w = div.width() + 25;
                div.remove();
                if (!this.f_width) {
                    this.f_width = this.container.outerWidth();
                }
                if (w > this.f_width - 10) {
                    w = this.f_width - 10;
                }
                w = this.search_field.hasClass("default") ? "100%" : w + "px";
                return this.search_field.css({
                    width: w
                });
            }
        };
        Chosen.prototype.generate_random_id = function() {
            var string;
            string = "sel" + this.generate_random_char() + this.generate_random_char() + this.generate_random_char();
            while ($("#" + string).length > 0) {
                string += this.generate_random_char();
            }
            return string;
        };
        return Chosen;
    }(AbstractChosen);
    root.Chosen = Chosen;
}).call(this);

var track = function(category, name, value) {
    "use strict";
    if (window._gaq) {
        window._gaq.push([ "_trackEvent", category, name, value ]);
    }
};

$(function() {
    "use strict";
    function isInternalHref(href) {
        if (href.indexOf("https:") == -1 && href.indexOf("http:") == -1 && href.indexOf("//") !== 0) {
            return true;
        } else {
            if (href.indexOf("consumerfinance.gov") !== -1) {
                return true;
            } else {
                return false;
            }
        }
    }
    $(document).ready(function() {
        $("a").not(".exit-link, .internal-link").each(function() {
            var href = $(this).attr("href");
            if (isInternalHref(href)) {
                $(this).addClass("internal-link");
            } else {
                $(this).addClass("exit-link");
            }
        });
        $("a.exit-link").on("click", function(e) {
            var linkDelay = 500;
            var link_text = $(this).text();
            var link_url = $(this).attr("href");
            e.preventDefault();
            try {
                track("exit link", link_text, link_url);
            } catch (error) {}
            setTimeout(function() {
                document.location.href = link_url;
            }, linkDelay);
        });
        $('a[href$="zip"],a[href$="pdf"],a[href$="doc"],a[href$="docx"],a[href$="xls"],a[href$="xlsx"],a[href$="ppt"],a[href$="pptx"],a[href$="txt"],a[href$="csv"],a[href$="jpg"],a[href$="jpeg"],a[href$="png"],a[href$="mov"],a[href$="wma"]').on("click", function(e) {
            var linkDelay = 500;
            var link_text = $(this).text();
            var link_url = $(this).attr("href");
            e.preventDefault();
            try {
                track("downloads", link_text, link_url);
            } catch (error) {}
            setTimeout(function() {
                document.location.href = link_url;
            }, linkDelay);
        });
        $("ul.social > a").on("click", function(e) {
            var linkDelay = 500;
            var link_text = $(this).text();
            var link_url = $(this).attr("href");
            e.preventDefault();
            try {
                track("social", link_text, link_url);
            } catch (error) {}
            setTimeout(function() {
                document.location.href = link_url;
            }, linkDelay);
        });
        $(".share-facebook").on("click", function(e) {
            var linkDelay = 500;
            var link_url = $(this).attr("href");
            e.preventDefault();
            try {
                track("social", "share", "facebook");
            } catch (error) {}
            setTimeout(function() {
                document.location.href = link_url;
            }, linkDelay);
        });
        $(".share-twitter").on("click", function(e) {
            var linkDelay = 500;
            var link_url = $(this).attr("href");
            e.preventDefault();
            try {
                track("social", "share", "twitter");
            } catch (error) {}
            setTimeout(function() {
                document.location.href = link_url;
            }, linkDelay);
        });
        $(".share-email").on("click", function(e) {
            var linkDelay = 500;
            var link_url = $(this).attr("href");
            e.preventDefault();
            try {
                track("social", "share", "email");
            } catch (error) {}
            setTimeout(function() {
                document.location.href = link_url;
            }, linkDelay);
        });
        $(".signup").on("click", "button", function() {
            var zip = $(this).closest(".signup").find("questionid_10376").val();
            track("social", "signup", "mailing list signup");
        });
    });
});

(function($) {
    "use strict";
    $.fn.findAndTrackYouTubeVideos = function() {
        var videoObjects = [], wasTriggeredOnce = {
            playing: false,
            ended: false
        };
        function onPlayerStateChange(event) {
            var videoIndex = event.target.id - 1;
            if (event.data == YT.PlayerState.PLAYING && wasTriggeredOnce.playing === false) {
                wasTriggeredOnce.playing = true;
                try {
                    track("videos", "play", videoObjects[videoIndex].title);
                } catch (error) {}
            } else if (event.data == YT.PlayerState.ENDED && wasTriggeredOnce.ended === false) {
                wasTriggeredOnce.ended = true;
                try {
                    track("videos", "ended", videoObjects[videoIndex].title);
                } catch (error) {}
            }
        }
        function isSrcYouTubeVideo(src) {
            if (src.indexOf("youtube.com/embed/") !== -1) {
                return true;
            } else {
                return false;
            }
        }
        function getYouTubeVideoIdFromSrc(src) {
            var videoId;
            if (src.substr(0, 24) == "//www.youtube.com/embed/") {
                videoId = src.substr(24);
            } else if (src.substr(0, 29) == "http://www.youtube.com/embed/") {
                videoId = src.substr(29);
            } else if (src.substr(0, 30) == "https://www.youtube.com/embed/") {
                videoId = src.substr(30);
            }
            if (videoId.indexOf("?") > -1) {
                videoId = videoId.substr(0, videoId.indexOf("?"));
            }
            return videoId;
        }
        function checkInitConditions(e) {
            var $e = $(e), isIframe = $e.is("iframe"), notAlreadyTracked = !$e.is("[data-is-findAndTrackYouTubeVideos]"), hasYouTubeSrc = isSrcYouTubeVideo($e.attr("src"));
            return isIframe && notAlreadyTracked && hasYouTubeSrc;
        }
        if ($.fn.findAndTrackYouTubeVideos.isIframeApiReady) {
            return this.each(function() {
                var $iframe = $(this), video = {};
                if (checkInitConditions($iframe)) {
                    video.id = getYouTubeVideoIdFromSrc($iframe.attr("src"));
                    $.ajax({
                        dataType: "JSON",
                        url: "https://gdata.youtube.com/feeds/api/videos/" + video.id + "?v=2&alt=json"
                    }).done(function(data) {
                        video.title = data.entry.title.$t;
                    });
                    $iframe.attr("data-is-findAndTrackYouTubeVideos", "");
                    $iframe.attr("id", video.id);
                    video.player = new YT.Player(video.id, {
                        events: {
                            onStateChange: onPlayerStateChange
                        }
                    });
                    if ($.inArray(video, videoObjects === -1)) {
                        videoObjects.push(video);
                    }
                }
            });
        } else {
            return false;
        }
    };
    $.fn.findAndTrackYouTubeVideos.isIframeApiReady = false;
})(jQuery);

var tag = document.createElement("script");

tag.src = "//www.youtube.com/iframe_api";

var firstScriptTag = document.getElementsByTagName("script")[0];

firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

function onYouTubeIframeAPIReady() {
    "use strict";
    $.fn.findAndTrackYouTubeVideos.isIframeApiReady = true;
    $("iframe").findAndTrackYouTubeVideos();
}
